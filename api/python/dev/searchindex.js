Search.setIndex({"alltitles": {"ABS": [[1317, "abs"]], "ACOS": [[1320, "acos"]], "ACOSD": [[1320, "acosd"]], "ARRAY_AGG": [[1313, "array-agg"]], "ARRAY_CONTAINS": [[1313, "array-contains"]], "ARRAY_GET": [[1313, "array-get"]], "ARRAY_LENGTH": [[1313, "array-length"]], "ARRAY_LOWER": [[1313, "array-lower"]], "ARRAY_MEAN": [[1313, "array-mean"]], "ARRAY_REVERSE": [[1313, "array-reverse"]], "ARRAY_SUM": [[1313, "array-sum"]], "ARRAY_TO_STRING": [[1313, "array-to-string"]], "ARRAY_UNIQUE": [[1313, "array-unique"]], "ARRAY_UPPER": [[1313, "array-upper"]], "ASIN": [[1320, "asin"]], "ASIND": [[1320, "asind"]], "ATAN": [[1320, "atan"]], "ATAN2": [[1320, "atan2"]], "ATAN2D": [[1320, "atan2d"]], "ATAND": [[1320, "atand"]], "AVG": [[1312, "avg"]], "Aggregate": [[1312, null]], "Aggregation": [[173, null], [324, null], [810, null], [916, null]], "Aliases": [[1312, null], [1312, null], [1317, null], [1317, null], [1318, null], [1318, null]], "Array": [[788, null], [1287, null], [1313, null]], "Asserts": [[1326, "asserts"]], "Attributes": [[312, null], [904, null], [1288, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[809, "avro"]], "BIT_AND": [[1314, "bit-and"]], "BIT_COUNT": [[1314, "bit-count"]], "BIT_LENGTH": [[1318, "bit-length"]], "BIT_OR": [[1314, "bit-or"]], "BIT_XOR": [[1314, "bit-xor"]], "Binary": [[789, null], [802, "binary"], [1289, null]], "Boolean": [[790, null], [1290, null]], "CAST": [[1321, "cast"]], "CBRT": [[1317, "cbrt"]], "CEIL": [[1317, "ceil"]], "COALESCE": [[1315, "coalesce"]], "CONCAT": [[1318, "concat"]], "CONCAT_WS": [[1318, "concat-ws"]], "COS": [[1320, "cos"]], "COSD": [[1320, "cosd"]], "COT": [[1320, "cot"]], "COTD": [[1320, "cotd"]], "COUNT": [[1312, "count"]], "CREATE TABLE": [[1325, "create-table"]], "CSV": [[809, "csv"]], "Categories": [[791, null], [1291, null]], "Clipboard": [[809, "clipboard"]], "Cloud Credentials": [[809, "cloud-credentials"]], "Columns / names": [[793, null]], "Comparison": [[802, "comparison"], [1299, "comparison"]], "Computation": [[313, null], [794, null], [1292, null]], "Conditional": [[1315, null]], "Config": [[172, null]], "Config load, save, state": [[172, "config-load-save-state"]], "Config options": [[172, "config-options"]], "Conjunction": [[802, "conjunction"]], "Conversion": [[807, "conversion"]], "DATE": [[1318, "date"]], "DATE_PART": [[1319, "date-part"]], "DEGREES": [[1320, "degrees"]], "DISTINCT": [[1311, "distinct"]], "DIV": [[1317, "div"]], "DROP TABLES": [[1325, "drop-tables"]], "Data types": [[322, null]], "DataFrame": [[317, null]], "DataType": [[322, "datatype"]], "Database": [[809, "database"]], "Delta Lake": [[809, "delta-lake"]], "Descriptive": [[314, null], [905, null], [1293, null]], "Documentation": [[1323, null], [1323, null], [1323, null]], "ENDS_WITH": [[1318, "ends-with"]], "EXCEPT": [[1324, "except"]], "EXP": [[1317, "exp"]], "EXPLAIN": [[1325, "explain"]], "EXTRACT": [[1319, "extract"]], "Errors": [[323, "errors"]], "Examples": [[1, "examples"], [915, "examples"], [1326, "examples"]], "Excel / ODS": [[809, "excel-ods"]], "Exceptions": [[323, null]], "Export": [[315, null], [1294, null]], "Expression SQL": [[1323, "expression-sql"]], "Expressions": [[796, null]], "Extending the API": [[1, null]], "FIRST": [[1312, "first"]], "FLOOR": [[1317, "floor"]], "FROM": [[1311, "from"]], "Feather / IPC": [[809, "feather-ipc"]], "Frame SQL": [[1323, "frame-sql"]], "Functions": [[795, null], [807, null], [915, "functions"]], "GPUEngine": [[906, null]], "GREATEST": [[1315, "greatest"]], "GROUP BY": [[1311, "group-by"]], "Global SQL": [[1323, "global-sql"]], "GroupBy": [[316, null], [907, null]], "HAVING": [[1311, "having"]], "IF": [[1315, "if"]], "IFNULL": [[1315, "ifnull"]], "INITCAP": [[1318, "initcap"]], "INTERSECT": [[1324, "intersect"]], "Iceberg": [[809, "iceberg"]], "Importing": [[915, "importing"]], "InProcessQuery": [[908, null]], "Index": [[0, null]], "Input/output": [[809, null]], "Introduction": [[1323, "introduction"]], "JOIN": [[1311, "join"]], "JSON": [[809, "json"]], "LAST": [[1312, "last"]], "LEAST": [[1315, "least"]], "LEFT": [[1318, "left"]], "LENGTH": [[1318, "length"]], "LIMIT": [[1311, "limit"]], "LN": [[1317, "ln"]], "LOG": [[1317, "log"]], "LOG10": [[1317, "log10"]], "LOG1P": [[1317, "log1p"]], "LOG2": [[1317, "log2"]], "LOWER": [[1318, "lower"]], "LTRIM": [[1318, "ltrim"]], "LazyFrame": [[909, null]], "List": [[797, null], [1296, null]], "MAX": [[1312, "max"]], "MEDIAN": [[1312, "median"]], "MIN": [[1312, "min"]], "MOD": [[1317, "mod"]], "Manipulation/selection": [[319, null], [800, null], [911, null], [1298, null]], "Math": [[1317, null]], "Meta": [[798, null]], "Metadata": [[912, null]], "Methods": [[1323, "methods"]], "Miscellaneous": [[318, null], [799, null], [807, "miscellaneous"], [910, null], [1297, null]], "NULLIF": [[1315, "nullif"]], "Name": [[801, null]], "Nested": [[322, "nested"]], "Numeric": [[322, "numeric"], [802, "numeric"], [1299, "numeric"]], "OCTET_LENGTH": [[1318, "octet-length"]], "OFFSET": [[1311, "offset"]], "ORDER BY": [[1311, "order-by"]], "Operators": [[802, null], [1299, null]], "Other": [[322, "other"]], "PI": [[1317, "pi"]], "POW": [[1317, "pow"]], "Panic": [[323, "panic"]], "Parallelization": [[807, "parallelization"]], "Parametric testing": [[1326, "parametric-testing"]], "Parquet": [[809, "parquet"]], "Plot": [[320, null], [1300, null]], "Plugins": [[913, null]], "Polars strategies": [[1326, "polars-strategies"]], "Profiles": [[1326, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[809, "pyarrow-datasets"]], "Python API": [[1323, null]], "Python API reference": [[808, null]], "QUANTILE_CONT": [[1312, "quantile-cont"]], "QUANTILE_DISC": [[1312, "quantile-disc"]], "Querying": [[1323, "querying"]], "RADIANS": [[1320, "radians"]], "REGEXP_LIKE": [[1318, "regexp-like"]], "REPLACE": [[1318, "replace"]], "REVERSE": [[1318, "reverse"]], "RIGHT": [[1318, "right"]], "ROUND": [[1317, "round"]], "RTRIM": [[1318, "rtrim"]], "Random": [[807, "random"]], "SELECT": [[1311, "select"]], "SHOW TABLES": [[1325, "show-tables"]], "SIGN": [[1317, "sign"]], "SIN": [[1320, "sin"]], "SIND": [[1320, "sind"]], "SQL Clauses": [[1311, null]], "SQL Functions": [[1316, null]], "SQL Interface": [[1322, null]], "SQLContext": [[1323, "sqlcontext"]], "SQRT": [[1317, "sqrt"]], "STARTS_WITH": [[1318, "starts-with"]], "STDDEV": [[1312, "stddev"]], "STRFTIME": [[1319, "strftime"]], "STRPOS": [[1318, "strpos"]], "STRPTIME": [[1318, "strptime"]], "SUBSTRING": [[1318, "substring"]], "SUM": [[1312, "sum"]], "Schema": [[914, null]], "Selectors": [[915, null]], "Serialization": [[318, "serialization"], [910, "serialization"]], "Series": [[1295, null]], "Set Operations": [[1324, null]], "Set operations": [[915, "set-operations"]], "Strategy helpers": [[1326, "strategy-helpers"]], "String": [[322, "string"], [803, null], [1301, null], [1318, null]], "StringCache": [[807, "stringcache"]], "Struct": [[804, null], [1302, null]], "Style": [[321, null]], "TAN": [[1320, "tan"]], "TAND": [[1320, "tand"]], "TIMESTAMP": [[1318, "timestamp"]], "TRUNCATE": [[1325, "truncate"]], "TRY_CAST": [[1321, "try-cast"]], "Table Operations": [[1325, null]], "Temporal": [[322, "temporal"], [805, null], [1303, null], [1314, null], [1319, null]], "Testing": [[1326, null]], "Trigonometry": [[1320, null]], "Types": [[1321, null]], "UNION": [[1324, "union"]], "UNION ALL": [[1324, "union-all"]], "UNION BY NAME": [[1324, "union-by-name"]], "UNNEST": [[1313, "unnest"], [1325, "unnest"]], "UPPER": [[1318, "upper"]], "Use as a context manager": [[172, "use-as-a-context-manager"]], "Use as a decorator": [[172, "use-as-a-decorator"]], "VARIANCE": [[1312, "variance"]], "WHERE": [[1311, "where"]], "Warnings": [[323, "warnings"]], "Window": [[806, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_float_precision": [[10, null]], "polars.Config.set_fmt_float": [[11, null]], "polars.Config.set_fmt_str_lengths": [[12, null]], "polars.Config.set_fmt_table_cell_list_len": [[13, null]], "polars.Config.set_streaming_chunk_size": [[14, null]], "polars.Config.set_tbl_cell_alignment": [[15, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, null]], "polars.Config.set_tbl_cols": [[17, null]], "polars.Config.set_tbl_column_data_type_inline": [[18, null]], "polars.Config.set_tbl_dataframe_shape_below": [[19, null]], "polars.Config.set_tbl_formatting": [[20, null]], "polars.Config.set_tbl_hide_column_data_types": [[21, null]], "polars.Config.set_tbl_hide_column_names": [[22, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, null]], "polars.Config.set_tbl_hide_dtype_separator": [[24, null]], "polars.Config.set_tbl_rows": [[25, null]], "polars.Config.set_tbl_width_chars": [[26, null]], "polars.Config.set_thousands_separator": [[27, null]], "polars.Config.set_trim_decimal_zeros": [[28, null]], "polars.Config.set_verbose": [[29, null]], "polars.Config.state": [[30, null]], "polars.CredentialProvider": [[31, null]], "polars.CredentialProviderAWS": [[32, null]], "polars.CredentialProviderGCP": [[33, null]], "polars.DataFrame.__array__": [[174, null]], "polars.DataFrame.__arrow_c_stream__": [[175, null]], "polars.DataFrame.__dataframe__": [[176, null]], "polars.DataFrame.__getitem__": [[177, null]], "polars.DataFrame.approx_n_unique": [[178, null]], "polars.DataFrame.bottom_k": [[179, null]], "polars.DataFrame.cast": [[180, null]], "polars.DataFrame.clear": [[181, null]], "polars.DataFrame.clone": [[182, null]], "polars.DataFrame.collect_schema": [[183, null]], "polars.DataFrame.columns": [[184, null]], "polars.DataFrame.corr": [[185, null]], "polars.DataFrame.count": [[186, null]], "polars.DataFrame.describe": [[187, null]], "polars.DataFrame.deserialize": [[188, null]], "polars.DataFrame.drop": [[189, null]], "polars.DataFrame.drop_in_place": [[190, null]], "polars.DataFrame.drop_nulls": [[191, null]], "polars.DataFrame.dtypes": [[192, null]], "polars.DataFrame.equals": [[193, null]], "polars.DataFrame.estimated_size": [[194, null]], "polars.DataFrame.explode": [[195, null]], "polars.DataFrame.extend": [[196, null]], "polars.DataFrame.fill_nan": [[197, null]], "polars.DataFrame.fill_null": [[198, null]], "polars.DataFrame.filter": [[199, null]], "polars.DataFrame.flags": [[200, null]], "polars.DataFrame.fold": [[201, null]], "polars.DataFrame.gather_every": [[202, null]], "polars.DataFrame.get_column": [[203, null]], "polars.DataFrame.get_column_index": [[204, null]], "polars.DataFrame.get_columns": [[205, null]], "polars.DataFrame.glimpse": [[206, null]], "polars.DataFrame.group_by": [[207, null]], "polars.DataFrame.group_by_dynamic": [[208, null]], "polars.DataFrame.hash_rows": [[209, null]], "polars.DataFrame.head": [[210, null]], "polars.DataFrame.height": [[211, null]], "polars.DataFrame.hstack": [[212, null]], "polars.DataFrame.insert_column": [[213, null]], "polars.DataFrame.interpolate": [[214, null]], "polars.DataFrame.is_duplicated": [[215, null]], "polars.DataFrame.is_empty": [[216, null]], "polars.DataFrame.is_unique": [[217, null]], "polars.DataFrame.item": [[218, null]], "polars.DataFrame.iter_columns": [[219, null]], "polars.DataFrame.iter_rows": [[220, null]], "polars.DataFrame.iter_slices": [[221, null]], "polars.DataFrame.join": [[222, null]], "polars.DataFrame.join_asof": [[223, null]], "polars.DataFrame.join_where": [[224, null]], "polars.DataFrame.lazy": [[225, null]], "polars.DataFrame.limit": [[226, null]], "polars.DataFrame.map_rows": [[227, null]], "polars.DataFrame.max": [[228, null]], "polars.DataFrame.max_horizontal": [[229, null]], "polars.DataFrame.mean": [[230, null]], "polars.DataFrame.mean_horizontal": [[231, null]], "polars.DataFrame.median": [[232, null]], "polars.DataFrame.melt": [[233, null]], "polars.DataFrame.merge_sorted": [[234, null]], "polars.DataFrame.min": [[235, null]], "polars.DataFrame.min_horizontal": [[236, null]], "polars.DataFrame.n_chunks": [[237, null]], "polars.DataFrame.n_unique": [[238, null]], "polars.DataFrame.null_count": [[239, null]], "polars.DataFrame.partition_by": [[240, null]], "polars.DataFrame.pipe": [[241, null]], "polars.DataFrame.pivot": [[242, null]], "polars.DataFrame.product": [[243, null]], "polars.DataFrame.quantile": [[244, null]], "polars.DataFrame.rechunk": [[245, null]], "polars.DataFrame.rename": [[246, null]], "polars.DataFrame.replace_column": [[247, null]], "polars.DataFrame.reverse": [[248, null]], "polars.DataFrame.rolling": [[249, null]], "polars.DataFrame.row": [[250, null]], "polars.DataFrame.rows": [[251, null]], "polars.DataFrame.rows_by_key": [[252, null]], "polars.DataFrame.sample": [[253, null]], "polars.DataFrame.schema": [[254, null]], "polars.DataFrame.select": [[255, null]], "polars.DataFrame.select_seq": [[256, null]], "polars.DataFrame.serialize": [[257, null]], "polars.DataFrame.set_sorted": [[258, null]], "polars.DataFrame.shape": [[259, null]], "polars.DataFrame.shift": [[260, null]], "polars.DataFrame.shrink_to_fit": [[261, null]], "polars.DataFrame.slice": [[262, null]], "polars.DataFrame.sort": [[263, null]], "polars.DataFrame.sql": [[264, null]], "polars.DataFrame.std": [[265, null]], "polars.DataFrame.sum": [[266, null]], "polars.DataFrame.sum_horizontal": [[267, null]], "polars.DataFrame.tail": [[268, null]], "polars.DataFrame.to_arrow": [[269, null]], "polars.DataFrame.to_dict": [[270, null]], "polars.DataFrame.to_dicts": [[271, null]], "polars.DataFrame.to_dummies": [[272, null]], "polars.DataFrame.to_init_repr": [[273, null]], "polars.DataFrame.to_jax": [[274, null]], "polars.DataFrame.to_numpy": [[275, null]], "polars.DataFrame.to_pandas": [[276, null]], "polars.DataFrame.to_series": [[277, null]], "polars.DataFrame.to_struct": [[278, null]], "polars.DataFrame.to_torch": [[279, null]], "polars.DataFrame.top_k": [[280, null]], "polars.DataFrame.transpose": [[281, null]], "polars.DataFrame.unique": [[282, null]], "polars.DataFrame.unnest": [[283, null]], "polars.DataFrame.unpivot": [[284, null]], "polars.DataFrame.unstack": [[285, null]], "polars.DataFrame.update": [[286, null]], "polars.DataFrame.upsample": [[287, null]], "polars.DataFrame.var": [[288, null]], "polars.DataFrame.vstack": [[289, null]], "polars.DataFrame.width": [[290, null]], "polars.DataFrame.with_columns": [[291, null]], "polars.DataFrame.with_columns_seq": [[292, null]], "polars.DataFrame.with_row_count": [[293, null]], "polars.DataFrame.with_row_index": [[294, null]], "polars.DataFrame.write_avro": [[34, null]], "polars.DataFrame.write_clipboard": [[35, null]], "polars.DataFrame.write_csv": [[36, null]], "polars.DataFrame.write_database": [[37, null]], "polars.DataFrame.write_delta": [[38, null]], "polars.DataFrame.write_excel": [[39, null]], "polars.DataFrame.write_ipc": [[40, null]], "polars.DataFrame.write_ipc_stream": [[41, null]], "polars.DataFrame.write_json": [[42, null]], "polars.DataFrame.write_ndjson": [[43, null]], "polars.DataFrame.write_parquet": [[44, null]], "polars.Expr.abs": [[325, null]], "polars.Expr.add": [[326, null]], "polars.Expr.agg_groups": [[327, null]], "polars.Expr.alias": [[328, null]], "polars.Expr.all": [[329, null]], "polars.Expr.and_": [[330, null]], "polars.Expr.any": [[331, null]], "polars.Expr.append": [[332, null]], "polars.Expr.approx_n_unique": [[333, null]], "polars.Expr.arccos": [[334, null]], "polars.Expr.arccosh": [[335, null]], "polars.Expr.arcsin": [[336, null]], "polars.Expr.arcsinh": [[337, null]], "polars.Expr.arctan": [[338, null]], "polars.Expr.arctanh": [[339, null]], "polars.Expr.arg_max": [[340, null]], "polars.Expr.arg_min": [[341, null]], "polars.Expr.arg_sort": [[342, null]], "polars.Expr.arg_true": [[343, null]], "polars.Expr.arg_unique": [[344, null]], "polars.Expr.arr.all": [[345, null]], "polars.Expr.arr.any": [[346, null]], "polars.Expr.arr.arg_max": [[347, null]], "polars.Expr.arr.arg_min": [[348, null]], "polars.Expr.arr.contains": [[349, null]], "polars.Expr.arr.count_matches": [[350, null]], "polars.Expr.arr.explode": [[351, null]], "polars.Expr.arr.first": [[352, null]], "polars.Expr.arr.get": [[353, null]], "polars.Expr.arr.join": [[354, null]], "polars.Expr.arr.last": [[355, null]], "polars.Expr.arr.max": [[356, null]], "polars.Expr.arr.median": [[357, null]], "polars.Expr.arr.min": [[358, null]], "polars.Expr.arr.n_unique": [[359, null]], "polars.Expr.arr.reverse": [[360, null]], "polars.Expr.arr.shift": [[361, null]], "polars.Expr.arr.sort": [[362, null]], "polars.Expr.arr.std": [[363, null]], "polars.Expr.arr.sum": [[364, null]], "polars.Expr.arr.to_list": [[365, null]], "polars.Expr.arr.to_struct": [[366, null]], "polars.Expr.arr.unique": [[367, null]], "polars.Expr.arr.var": [[368, null]], "polars.Expr.backward_fill": [[369, null]], "polars.Expr.bin.contains": [[370, null]], "polars.Expr.bin.decode": [[371, null]], "polars.Expr.bin.encode": [[372, null]], "polars.Expr.bin.ends_with": [[373, null]], "polars.Expr.bin.size": [[374, null]], "polars.Expr.bin.starts_with": [[375, null]], "polars.Expr.bitwise_and": [[376, null]], "polars.Expr.bitwise_count_ones": [[377, null]], "polars.Expr.bitwise_count_zeros": [[378, null]], "polars.Expr.bitwise_leading_ones": [[379, null]], "polars.Expr.bitwise_leading_zeros": [[380, null]], "polars.Expr.bitwise_or": [[381, null]], "polars.Expr.bitwise_trailing_ones": [[382, null]], "polars.Expr.bitwise_trailing_zeros": [[383, null]], "polars.Expr.bitwise_xor": [[384, null]], "polars.Expr.bottom_k": [[385, null]], "polars.Expr.bottom_k_by": [[386, null]], "polars.Expr.cast": [[387, null]], "polars.Expr.cat.get_categories": [[388, null]], "polars.Expr.cbrt": [[389, null]], "polars.Expr.ceil": [[390, null]], "polars.Expr.clip": [[391, null]], "polars.Expr.cos": [[392, null]], "polars.Expr.cosh": [[393, null]], "polars.Expr.cot": [[394, null]], "polars.Expr.count": [[395, null]], "polars.Expr.cum_count": [[396, null]], "polars.Expr.cum_max": [[397, null]], "polars.Expr.cum_min": [[398, null]], "polars.Expr.cum_prod": [[399, null]], "polars.Expr.cum_sum": [[400, null]], "polars.Expr.cumulative_eval": [[401, null]], "polars.Expr.cut": [[402, null]], "polars.Expr.degrees": [[403, null]], "polars.Expr.deserialize": [[404, null]], "polars.Expr.diff": [[405, null]], "polars.Expr.dot": [[406, null]], "polars.Expr.drop_nans": [[407, null]], "polars.Expr.drop_nulls": [[408, null]], "polars.Expr.dt.add_business_days": [[409, null]], "polars.Expr.dt.base_utc_offset": [[410, null]], "polars.Expr.dt.cast_time_unit": [[411, null]], "polars.Expr.dt.century": [[412, null]], "polars.Expr.dt.combine": [[413, null]], "polars.Expr.dt.convert_time_zone": [[414, null]], "polars.Expr.dt.date": [[415, null]], "polars.Expr.dt.datetime": [[416, null]], "polars.Expr.dt.day": [[417, null]], "polars.Expr.dt.dst_offset": [[418, null]], "polars.Expr.dt.epoch": [[419, null]], "polars.Expr.dt.hour": [[420, null]], "polars.Expr.dt.is_leap_year": [[421, null]], "polars.Expr.dt.iso_year": [[422, null]], "polars.Expr.dt.microsecond": [[423, null]], "polars.Expr.dt.millennium": [[424, null]], "polars.Expr.dt.millisecond": [[425, null]], "polars.Expr.dt.minute": [[426, null]], "polars.Expr.dt.month": [[427, null]], "polars.Expr.dt.month_end": [[428, null]], "polars.Expr.dt.month_start": [[429, null]], "polars.Expr.dt.nanosecond": [[430, null]], "polars.Expr.dt.offset_by": [[431, null]], "polars.Expr.dt.ordinal_day": [[432, null]], "polars.Expr.dt.quarter": [[433, null]], "polars.Expr.dt.replace_time_zone": [[434, null]], "polars.Expr.dt.round": [[435, null]], "polars.Expr.dt.second": [[436, null]], "polars.Expr.dt.strftime": [[437, null]], "polars.Expr.dt.time": [[438, null]], "polars.Expr.dt.timestamp": [[439, null]], "polars.Expr.dt.to_string": [[440, null]], "polars.Expr.dt.total_days": [[441, null]], "polars.Expr.dt.total_hours": [[442, null]], "polars.Expr.dt.total_microseconds": [[443, null]], "polars.Expr.dt.total_milliseconds": [[444, null]], "polars.Expr.dt.total_minutes": [[445, null]], "polars.Expr.dt.total_nanoseconds": [[446, null]], "polars.Expr.dt.total_seconds": [[447, null]], "polars.Expr.dt.truncate": [[448, null]], "polars.Expr.dt.week": [[449, null]], "polars.Expr.dt.weekday": [[450, null]], "polars.Expr.dt.with_time_unit": [[451, null]], "polars.Expr.dt.year": [[452, null]], "polars.Expr.entropy": [[453, null]], "polars.Expr.eq": [[454, null]], "polars.Expr.eq_missing": [[455, null]], "polars.Expr.ewm_mean": [[456, null]], "polars.Expr.ewm_mean_by": [[457, null]], "polars.Expr.ewm_std": [[458, null]], "polars.Expr.ewm_var": [[459, null]], "polars.Expr.exclude": [[460, null]], "polars.Expr.exp": [[461, null]], "polars.Expr.explode": [[462, null]], "polars.Expr.extend_constant": [[463, null]], "polars.Expr.fill_nan": [[464, null]], "polars.Expr.fill_null": [[465, null]], "polars.Expr.filter": [[466, null]], "polars.Expr.first": [[467, null]], "polars.Expr.flatten": [[468, null]], "polars.Expr.floor": [[469, null]], "polars.Expr.floordiv": [[470, null]], "polars.Expr.forward_fill": [[471, null]], "polars.Expr.from_json": [[472, null]], "polars.Expr.gather": [[473, null]], "polars.Expr.gather_every": [[474, null]], "polars.Expr.ge": [[475, null]], "polars.Expr.get": [[476, null]], "polars.Expr.gt": [[477, null]], "polars.Expr.has_nulls": [[478, null]], "polars.Expr.hash": [[479, null]], "polars.Expr.head": [[480, null]], "polars.Expr.hist": [[481, null]], "polars.Expr.implode": [[482, null]], "polars.Expr.inspect": [[483, null]], "polars.Expr.interpolate": [[484, null]], "polars.Expr.interpolate_by": [[485, null]], "polars.Expr.is_between": [[486, null]], "polars.Expr.is_duplicated": [[487, null]], "polars.Expr.is_finite": [[488, null]], "polars.Expr.is_first_distinct": [[489, null]], "polars.Expr.is_in": [[490, null]], "polars.Expr.is_infinite": [[491, null]], "polars.Expr.is_last_distinct": [[492, null]], "polars.Expr.is_nan": [[493, null]], "polars.Expr.is_not_nan": [[494, null]], "polars.Expr.is_not_null": [[495, null]], "polars.Expr.is_null": [[496, null]], "polars.Expr.is_unique": [[497, null]], "polars.Expr.kurtosis": [[498, null]], "polars.Expr.last": [[499, null]], "polars.Expr.le": [[500, null]], "polars.Expr.len": [[501, null]], "polars.Expr.limit": [[502, null]], "polars.Expr.list.all": [[503, null]], "polars.Expr.list.any": [[504, null]], "polars.Expr.list.arg_max": [[505, null]], "polars.Expr.list.arg_min": [[506, null]], "polars.Expr.list.concat": [[507, null]], "polars.Expr.list.contains": [[508, null]], "polars.Expr.list.count_matches": [[509, null]], "polars.Expr.list.diff": [[510, null]], "polars.Expr.list.drop_nulls": [[511, null]], "polars.Expr.list.eval": [[512, null]], "polars.Expr.list.explode": [[513, null]], "polars.Expr.list.first": [[514, null]], "polars.Expr.list.gather": [[515, null]], "polars.Expr.list.gather_every": [[516, null]], "polars.Expr.list.get": [[517, null]], "polars.Expr.list.head": [[518, null]], "polars.Expr.list.join": [[519, null]], "polars.Expr.list.last": [[520, null]], "polars.Expr.list.len": [[521, null]], "polars.Expr.list.max": [[522, null]], "polars.Expr.list.mean": [[523, null]], "polars.Expr.list.median": [[524, null]], "polars.Expr.list.min": [[525, null]], "polars.Expr.list.n_unique": [[526, null]], "polars.Expr.list.reverse": [[527, null]], "polars.Expr.list.sample": [[528, null]], "polars.Expr.list.set_difference": [[529, null]], "polars.Expr.list.set_intersection": [[530, null]], "polars.Expr.list.set_symmetric_difference": [[531, null]], "polars.Expr.list.set_union": [[532, null]], "polars.Expr.list.shift": [[533, null]], "polars.Expr.list.slice": [[534, null]], "polars.Expr.list.sort": [[535, null]], "polars.Expr.list.std": [[536, null]], "polars.Expr.list.sum": [[537, null]], "polars.Expr.list.tail": [[538, null]], "polars.Expr.list.to_array": [[539, null]], "polars.Expr.list.to_struct": [[540, null]], "polars.Expr.list.unique": [[541, null]], "polars.Expr.list.var": [[542, null]], "polars.Expr.log": [[543, null]], "polars.Expr.log10": [[544, null]], "polars.Expr.log1p": [[545, null]], "polars.Expr.lower_bound": [[546, null]], "polars.Expr.lt": [[547, null]], "polars.Expr.map_batches": [[548, null]], "polars.Expr.map_elements": [[549, null]], "polars.Expr.max": [[550, null]], "polars.Expr.mean": [[551, null]], "polars.Expr.median": [[552, null]], "polars.Expr.meta.eq": [[553, null]], "polars.Expr.meta.has_multiple_outputs": [[554, null]], "polars.Expr.meta.is_column": [[555, null]], "polars.Expr.meta.is_column_selection": [[556, null]], "polars.Expr.meta.is_literal": [[557, null]], "polars.Expr.meta.is_regex_projection": [[558, null]], "polars.Expr.meta.ne": [[559, null]], "polars.Expr.meta.output_name": [[560, null]], "polars.Expr.meta.pop": [[561, null]], "polars.Expr.meta.root_names": [[562, null]], "polars.Expr.meta.serialize": [[563, null]], "polars.Expr.meta.show_graph": [[564, null]], "polars.Expr.meta.tree_format": [[565, null]], "polars.Expr.meta.undo_aliases": [[566, null]], "polars.Expr.meta.write_json": [[567, null]], "polars.Expr.min": [[568, null]], "polars.Expr.mod": [[569, null]], "polars.Expr.mode": [[570, null]], "polars.Expr.mul": [[571, null]], "polars.Expr.n_unique": [[572, null]], "polars.Expr.name.keep": [[573, null]], "polars.Expr.name.map": [[574, null]], "polars.Expr.name.map_fields": [[575, null]], "polars.Expr.name.prefix": [[576, null]], "polars.Expr.name.prefix_fields": [[577, null]], "polars.Expr.name.suffix": [[578, null]], "polars.Expr.name.suffix_fields": [[579, null]], "polars.Expr.name.to_lowercase": [[580, null]], "polars.Expr.name.to_uppercase": [[581, null]], "polars.Expr.nan_max": [[582, null]], "polars.Expr.nan_min": [[583, null]], "polars.Expr.ne": [[584, null]], "polars.Expr.ne_missing": [[585, null]], "polars.Expr.neg": [[586, null]], "polars.Expr.not_": [[587, null]], "polars.Expr.null_count": [[588, null]], "polars.Expr.or_": [[589, null]], "polars.Expr.over": [[590, null]], "polars.Expr.pct_change": [[591, null]], "polars.Expr.peak_max": [[592, null]], "polars.Expr.peak_min": [[593, null]], "polars.Expr.pipe": [[594, null]], "polars.Expr.pow": [[595, null]], "polars.Expr.product": [[596, null]], "polars.Expr.qcut": [[597, null]], "polars.Expr.quantile": [[598, null]], "polars.Expr.radians": [[599, null]], "polars.Expr.rank": [[600, null]], "polars.Expr.rechunk": [[601, null]], "polars.Expr.reinterpret": [[602, null]], "polars.Expr.repeat_by": [[603, null]], "polars.Expr.replace": [[604, null]], "polars.Expr.replace_strict": [[605, null]], "polars.Expr.reshape": [[606, null]], "polars.Expr.reverse": [[607, null]], "polars.Expr.rle": [[608, null]], "polars.Expr.rle_id": [[609, null]], "polars.Expr.rolling": [[610, null]], "polars.Expr.rolling_map": [[611, null]], "polars.Expr.rolling_max": [[612, null]], "polars.Expr.rolling_max_by": [[613, null]], "polars.Expr.rolling_mean": [[614, null]], "polars.Expr.rolling_mean_by": [[615, null]], "polars.Expr.rolling_median": [[616, null]], "polars.Expr.rolling_median_by": [[617, null]], "polars.Expr.rolling_min": [[618, null]], "polars.Expr.rolling_min_by": [[619, null]], "polars.Expr.rolling_quantile": [[620, null]], "polars.Expr.rolling_quantile_by": [[621, null]], "polars.Expr.rolling_skew": [[622, null]], "polars.Expr.rolling_std": [[623, null]], "polars.Expr.rolling_std_by": [[624, null]], "polars.Expr.rolling_sum": [[625, null]], "polars.Expr.rolling_sum_by": [[626, null]], "polars.Expr.rolling_var": [[627, null]], "polars.Expr.rolling_var_by": [[628, null]], "polars.Expr.round": [[629, null]], "polars.Expr.round_sig_figs": [[630, null]], "polars.Expr.sample": [[631, null]], "polars.Expr.search_sorted": [[632, null]], "polars.Expr.set_sorted": [[633, null]], "polars.Expr.shift": [[634, null]], "polars.Expr.shrink_dtype": [[635, null]], "polars.Expr.shuffle": [[636, null]], "polars.Expr.sign": [[637, null]], "polars.Expr.sin": [[638, null]], "polars.Expr.sinh": [[639, null]], "polars.Expr.skew": [[640, null]], "polars.Expr.slice": [[641, null]], "polars.Expr.sort": [[642, null]], "polars.Expr.sort_by": [[643, null]], "polars.Expr.sqrt": [[644, null]], "polars.Expr.std": [[645, null]], "polars.Expr.str.concat": [[646, null]], "polars.Expr.str.contains": [[647, null]], "polars.Expr.str.contains_any": [[648, null]], "polars.Expr.str.count_matches": [[649, null]], "polars.Expr.str.decode": [[650, null]], "polars.Expr.str.encode": [[651, null]], "polars.Expr.str.ends_with": [[652, null]], "polars.Expr.str.escape_regex": [[653, null]], "polars.Expr.str.explode": [[654, null]], "polars.Expr.str.extract": [[655, null]], "polars.Expr.str.extract_all": [[656, null]], "polars.Expr.str.extract_groups": [[657, null]], "polars.Expr.str.extract_many": [[658, null]], "polars.Expr.str.find": [[659, null]], "polars.Expr.str.head": [[660, null]], "polars.Expr.str.join": [[661, null]], "polars.Expr.str.json_decode": [[662, null]], "polars.Expr.str.json_path_match": [[663, null]], "polars.Expr.str.len_bytes": [[664, null]], "polars.Expr.str.len_chars": [[665, null]], "polars.Expr.str.pad_end": [[666, null]], "polars.Expr.str.pad_start": [[667, null]], "polars.Expr.str.replace": [[668, null]], "polars.Expr.str.replace_all": [[669, null]], "polars.Expr.str.replace_many": [[670, null]], "polars.Expr.str.reverse": [[671, null]], "polars.Expr.str.slice": [[672, null]], "polars.Expr.str.split": [[673, null]], "polars.Expr.str.split_exact": [[674, null]], "polars.Expr.str.splitn": [[675, null]], "polars.Expr.str.starts_with": [[676, null]], "polars.Expr.str.strip_chars": [[677, null]], "polars.Expr.str.strip_chars_end": [[678, null]], "polars.Expr.str.strip_chars_start": [[679, null]], "polars.Expr.str.strip_prefix": [[680, null]], "polars.Expr.str.strip_suffix": [[681, null]], "polars.Expr.str.strptime": [[682, null]], "polars.Expr.str.tail": [[683, null]], "polars.Expr.str.to_date": [[684, null]], "polars.Expr.str.to_datetime": [[685, null]], "polars.Expr.str.to_decimal": [[686, null]], "polars.Expr.str.to_integer": [[687, null]], "polars.Expr.str.to_lowercase": [[688, null]], "polars.Expr.str.to_time": [[689, null]], "polars.Expr.str.to_titlecase": [[690, null]], "polars.Expr.str.to_uppercase": [[691, null]], "polars.Expr.str.zfill": [[692, null]], "polars.Expr.struct.field": [[693, null]], "polars.Expr.struct.json_encode": [[694, null]], "polars.Expr.struct.rename_fields": [[695, null]], "polars.Expr.struct.unnest": [[696, null]], "polars.Expr.struct.with_fields": [[697, null]], "polars.Expr.sub": [[698, null]], "polars.Expr.sum": [[699, null]], "polars.Expr.tail": [[700, null]], "polars.Expr.tan": [[701, null]], "polars.Expr.tanh": [[702, null]], "polars.Expr.to_physical": [[703, null]], "polars.Expr.top_k": [[704, null]], "polars.Expr.top_k_by": [[705, null]], "polars.Expr.truediv": [[706, null]], "polars.Expr.unique": [[707, null]], "polars.Expr.unique_counts": [[708, null]], "polars.Expr.upper_bound": [[709, null]], "polars.Expr.value_counts": [[710, null]], "polars.Expr.var": [[711, null]], "polars.Expr.where": [[712, null]], "polars.Expr.xor": [[713, null]], "polars.LazyFrame.approx_n_unique": [[811, null]], "polars.LazyFrame.bottom_k": [[812, null]], "polars.LazyFrame.cache": [[813, null]], "polars.LazyFrame.cast": [[814, null]], "polars.LazyFrame.clear": [[815, null]], "polars.LazyFrame.clone": [[816, null]], "polars.LazyFrame.collect": [[817, null]], "polars.LazyFrame.collect_async": [[818, null]], "polars.LazyFrame.collect_schema": [[819, null]], "polars.LazyFrame.columns": [[820, null]], "polars.LazyFrame.count": [[821, null]], "polars.LazyFrame.describe": [[822, null]], "polars.LazyFrame.deserialize": [[823, null]], "polars.LazyFrame.drop": [[824, null]], "polars.LazyFrame.drop_nulls": [[825, null]], "polars.LazyFrame.dtypes": [[826, null]], "polars.LazyFrame.explain": [[827, null]], "polars.LazyFrame.explode": [[828, null]], "polars.LazyFrame.fill_nan": [[829, null]], "polars.LazyFrame.fill_null": [[830, null]], "polars.LazyFrame.filter": [[831, null]], "polars.LazyFrame.first": [[832, null]], "polars.LazyFrame.gather_every": [[833, null]], "polars.LazyFrame.group_by": [[834, null]], "polars.LazyFrame.group_by_dynamic": [[835, null]], "polars.LazyFrame.head": [[836, null]], "polars.LazyFrame.inspect": [[837, null]], "polars.LazyFrame.interpolate": [[838, null]], "polars.LazyFrame.join": [[839, null]], "polars.LazyFrame.join_asof": [[840, null]], "polars.LazyFrame.join_where": [[841, null]], "polars.LazyFrame.last": [[842, null]], "polars.LazyFrame.lazy": [[843, null]], "polars.LazyFrame.limit": [[844, null]], "polars.LazyFrame.map_batches": [[845, null]], "polars.LazyFrame.max": [[846, null]], "polars.LazyFrame.mean": [[847, null]], "polars.LazyFrame.median": [[848, null]], "polars.LazyFrame.melt": [[849, null]], "polars.LazyFrame.merge_sorted": [[850, null]], "polars.LazyFrame.min": [[851, null]], "polars.LazyFrame.null_count": [[852, null]], "polars.LazyFrame.pipe": [[853, null]], "polars.LazyFrame.profile": [[854, null]], "polars.LazyFrame.quantile": [[855, null]], "polars.LazyFrame.rename": [[856, null]], "polars.LazyFrame.reverse": [[857, null]], "polars.LazyFrame.rolling": [[858, null]], "polars.LazyFrame.schema": [[859, null]], "polars.LazyFrame.select": [[860, null]], "polars.LazyFrame.select_seq": [[861, null]], "polars.LazyFrame.serialize": [[862, null]], "polars.LazyFrame.set_sorted": [[863, null]], "polars.LazyFrame.shift": [[864, null]], "polars.LazyFrame.show_graph": [[865, null]], "polars.LazyFrame.sink_csv": [[45, null]], "polars.LazyFrame.sink_ipc": [[46, null]], "polars.LazyFrame.sink_ndjson": [[47, null]], "polars.LazyFrame.sink_parquet": [[48, null]], "polars.LazyFrame.slice": [[866, null]], "polars.LazyFrame.sort": [[867, null]], "polars.LazyFrame.sql": [[868, null]], "polars.LazyFrame.std": [[869, null]], "polars.LazyFrame.sum": [[870, null]], "polars.LazyFrame.tail": [[871, null]], "polars.LazyFrame.top_k": [[872, null]], "polars.LazyFrame.unique": [[873, null]], "polars.LazyFrame.unnest": [[874, null]], "polars.LazyFrame.unpivot": [[875, null]], "polars.LazyFrame.update": [[876, null]], "polars.LazyFrame.var": [[877, null]], "polars.LazyFrame.width": [[878, null]], "polars.LazyFrame.with_columns": [[879, null]], "polars.LazyFrame.with_columns_seq": [[880, null]], "polars.LazyFrame.with_context": [[881, null]], "polars.LazyFrame.with_row_count": [[882, null]], "polars.LazyFrame.with_row_index": [[883, null]], "polars.SQLContext.execute": [[1304, null]], "polars.SQLContext.execute_global": [[1305, null]], "polars.SQLContext.register": [[1306, null]], "polars.SQLContext.register_globals": [[1307, null]], "polars.SQLContext.register_many": [[1308, null]], "polars.SQLContext.tables": [[1309, null]], "polars.SQLContext.unregister": [[1310, null]], "polars.Series.__array__": [[917, null]], "polars.Series.__arrow_c_stream__": [[918, null]], "polars.Series.__getitem__": [[919, null]], "polars.Series.abs": [[920, null]], "polars.Series.alias": [[921, null]], "polars.Series.all": [[922, null]], "polars.Series.any": [[923, null]], "polars.Series.append": [[924, null]], "polars.Series.approx_n_unique": [[925, null]], "polars.Series.arccos": [[926, null]], "polars.Series.arccosh": [[927, null]], "polars.Series.arcsin": [[928, null]], "polars.Series.arcsinh": [[929, null]], "polars.Series.arctan": [[930, null]], "polars.Series.arctanh": [[931, null]], "polars.Series.arg_max": [[932, null]], "polars.Series.arg_min": [[933, null]], "polars.Series.arg_sort": [[934, null]], "polars.Series.arg_true": [[935, null]], "polars.Series.arg_unique": [[936, null]], "polars.Series.arr.all": [[937, null]], "polars.Series.arr.any": [[938, null]], "polars.Series.arr.arg_max": [[939, null]], "polars.Series.arr.arg_min": [[940, null]], "polars.Series.arr.contains": [[941, null]], "polars.Series.arr.count_matches": [[942, null]], "polars.Series.arr.explode": [[943, null]], "polars.Series.arr.first": [[944, null]], "polars.Series.arr.get": [[945, null]], "polars.Series.arr.join": [[946, null]], "polars.Series.arr.last": [[947, null]], "polars.Series.arr.max": [[948, null]], "polars.Series.arr.median": [[949, null]], "polars.Series.arr.min": [[950, null]], "polars.Series.arr.n_unique": [[951, null]], "polars.Series.arr.reverse": [[952, null]], "polars.Series.arr.shift": [[953, null]], "polars.Series.arr.sort": [[954, null]], "polars.Series.arr.std": [[955, null]], "polars.Series.arr.sum": [[956, null]], "polars.Series.arr.to_list": [[957, null]], "polars.Series.arr.to_struct": [[958, null]], "polars.Series.arr.unique": [[959, null]], "polars.Series.arr.var": [[960, null]], "polars.Series.bin.contains": [[961, null]], "polars.Series.bin.decode": [[962, null]], "polars.Series.bin.encode": [[963, null]], "polars.Series.bin.ends_with": [[964, null]], "polars.Series.bin.size": [[965, null]], "polars.Series.bin.starts_with": [[966, null]], "polars.Series.bitwise_and": [[967, null]], "polars.Series.bitwise_count_ones": [[968, null]], "polars.Series.bitwise_count_zeros": [[969, null]], "polars.Series.bitwise_leading_ones": [[970, null]], "polars.Series.bitwise_leading_zeros": [[971, null]], "polars.Series.bitwise_or": [[972, null]], "polars.Series.bitwise_trailing_ones": [[973, null]], "polars.Series.bitwise_trailing_zeros": [[974, null]], "polars.Series.bitwise_xor": [[975, null]], "polars.Series.bottom_k": [[976, null]], "polars.Series.cast": [[977, null]], "polars.Series.cat.get_categories": [[978, null]], "polars.Series.cat.is_local": [[979, null]], "polars.Series.cat.to_local": [[980, null]], "polars.Series.cat.uses_lexical_ordering": [[981, null]], "polars.Series.cbrt": [[982, null]], "polars.Series.ceil": [[983, null]], "polars.Series.chunk_lengths": [[984, null]], "polars.Series.clear": [[985, null]], "polars.Series.clip": [[986, null]], "polars.Series.clone": [[987, null]], "polars.Series.cos": [[988, null]], "polars.Series.cosh": [[989, null]], "polars.Series.cot": [[990, null]], "polars.Series.count": [[991, null]], "polars.Series.cum_count": [[992, null]], "polars.Series.cum_max": [[993, null]], "polars.Series.cum_min": [[994, null]], "polars.Series.cum_prod": [[995, null]], "polars.Series.cum_sum": [[996, null]], "polars.Series.cumulative_eval": [[997, null]], "polars.Series.cut": [[998, null]], "polars.Series.describe": [[999, null]], "polars.Series.diff": [[1000, null]], "polars.Series.dot": [[1001, null]], "polars.Series.drop_nans": [[1002, null]], "polars.Series.drop_nulls": [[1003, null]], "polars.Series.dt.add_business_days": [[1004, null]], "polars.Series.dt.base_utc_offset": [[1005, null]], "polars.Series.dt.cast_time_unit": [[1006, null]], "polars.Series.dt.century": [[1007, null]], "polars.Series.dt.combine": [[1008, null]], "polars.Series.dt.convert_time_zone": [[1009, null]], "polars.Series.dt.date": [[1010, null]], "polars.Series.dt.datetime": [[1011, null]], "polars.Series.dt.day": [[1012, null]], "polars.Series.dt.dst_offset": [[1013, null]], "polars.Series.dt.epoch": [[1014, null]], "polars.Series.dt.hour": [[1015, null]], "polars.Series.dt.is_leap_year": [[1016, null]], "polars.Series.dt.iso_year": [[1017, null]], "polars.Series.dt.max": [[1018, null]], "polars.Series.dt.mean": [[1019, null]], "polars.Series.dt.median": [[1020, null]], "polars.Series.dt.microsecond": [[1021, null]], "polars.Series.dt.millennium": [[1022, null]], "polars.Series.dt.millisecond": [[1023, null]], "polars.Series.dt.min": [[1024, null]], "polars.Series.dt.minute": [[1025, null]], "polars.Series.dt.month": [[1026, null]], "polars.Series.dt.month_end": [[1027, null]], "polars.Series.dt.month_start": [[1028, null]], "polars.Series.dt.nanosecond": [[1029, null]], "polars.Series.dt.offset_by": [[1030, null]], "polars.Series.dt.ordinal_day": [[1031, null]], "polars.Series.dt.quarter": [[1032, null]], "polars.Series.dt.replace_time_zone": [[1033, null]], "polars.Series.dt.round": [[1034, null]], "polars.Series.dt.second": [[1035, null]], "polars.Series.dt.strftime": [[1036, null]], "polars.Series.dt.time": [[1037, null]], "polars.Series.dt.timestamp": [[1038, null]], "polars.Series.dt.to_string": [[1039, null]], "polars.Series.dt.total_days": [[1040, null]], "polars.Series.dt.total_hours": [[1041, null]], "polars.Series.dt.total_microseconds": [[1042, null]], "polars.Series.dt.total_milliseconds": [[1043, null]], "polars.Series.dt.total_minutes": [[1044, null]], "polars.Series.dt.total_nanoseconds": [[1045, null]], "polars.Series.dt.total_seconds": [[1046, null]], "polars.Series.dt.truncate": [[1047, null]], "polars.Series.dt.week": [[1048, null]], "polars.Series.dt.weekday": [[1049, null]], "polars.Series.dt.with_time_unit": [[1050, null]], "polars.Series.dt.year": [[1051, null]], "polars.Series.dtype": [[1052, null]], "polars.Series.entropy": [[1053, null]], "polars.Series.eq": [[1054, null]], "polars.Series.eq_missing": [[1055, null]], "polars.Series.equals": [[1056, null]], "polars.Series.estimated_size": [[1057, null]], "polars.Series.ewm_mean": [[1058, null]], "polars.Series.ewm_mean_by": [[1059, null]], "polars.Series.ewm_std": [[1060, null]], "polars.Series.ewm_var": [[1061, null]], "polars.Series.exp": [[1062, null]], "polars.Series.explode": [[1063, null]], "polars.Series.extend": [[1064, null]], "polars.Series.extend_constant": [[1065, null]], "polars.Series.fill_nan": [[1066, null]], "polars.Series.fill_null": [[1067, null]], "polars.Series.filter": [[1068, null]], "polars.Series.first": [[1069, null]], "polars.Series.flags": [[1070, null]], "polars.Series.floor": [[1071, null]], "polars.Series.gather": [[1072, null]], "polars.Series.gather_every": [[1073, null]], "polars.Series.ge": [[1074, null]], "polars.Series.get_chunks": [[1075, null]], "polars.Series.gt": [[1076, null]], "polars.Series.has_nulls": [[1077, null]], "polars.Series.has_validity": [[1078, null]], "polars.Series.hash": [[1079, null]], "polars.Series.head": [[1080, null]], "polars.Series.hist": [[1081, null]], "polars.Series.implode": [[1082, null]], "polars.Series.interpolate": [[1083, null]], "polars.Series.interpolate_by": [[1084, null]], "polars.Series.is_between": [[1085, null]], "polars.Series.is_duplicated": [[1086, null]], "polars.Series.is_empty": [[1087, null]], "polars.Series.is_finite": [[1088, null]], "polars.Series.is_first_distinct": [[1089, null]], "polars.Series.is_in": [[1090, null]], "polars.Series.is_infinite": [[1091, null]], "polars.Series.is_last_distinct": [[1092, null]], "polars.Series.is_nan": [[1093, null]], "polars.Series.is_not_nan": [[1094, null]], "polars.Series.is_not_null": [[1095, null]], "polars.Series.is_null": [[1096, null]], "polars.Series.is_sorted": [[1097, null]], "polars.Series.is_unique": [[1098, null]], "polars.Series.item": [[1099, null]], "polars.Series.kurtosis": [[1100, null]], "polars.Series.last": [[1101, null]], "polars.Series.le": [[1102, null]], "polars.Series.len": [[1103, null]], "polars.Series.limit": [[1104, null]], "polars.Series.list.all": [[1105, null]], "polars.Series.list.any": [[1106, null]], "polars.Series.list.arg_max": [[1107, null]], "polars.Series.list.arg_min": [[1108, null]], "polars.Series.list.concat": [[1109, null]], "polars.Series.list.contains": [[1110, null]], "polars.Series.list.count_matches": [[1111, null]], "polars.Series.list.diff": [[1112, null]], "polars.Series.list.drop_nulls": [[1113, null]], "polars.Series.list.eval": [[1114, null]], "polars.Series.list.explode": [[1115, null]], "polars.Series.list.first": [[1116, null]], "polars.Series.list.gather": [[1117, null]], "polars.Series.list.gather_every": [[1118, null]], "polars.Series.list.get": [[1119, null]], "polars.Series.list.head": [[1120, null]], "polars.Series.list.join": [[1121, null]], "polars.Series.list.last": [[1122, null]], "polars.Series.list.len": [[1123, null]], "polars.Series.list.max": [[1124, null]], "polars.Series.list.mean": [[1125, null]], "polars.Series.list.median": [[1126, null]], "polars.Series.list.min": [[1127, null]], "polars.Series.list.n_unique": [[1128, null]], "polars.Series.list.reverse": [[1129, null]], "polars.Series.list.sample": [[1130, null]], "polars.Series.list.set_difference": [[1131, null]], "polars.Series.list.set_intersection": [[1132, null]], "polars.Series.list.set_symmetric_difference": [[1133, null]], "polars.Series.list.set_union": [[1134, null]], "polars.Series.list.shift": [[1135, null]], "polars.Series.list.slice": [[1136, null]], "polars.Series.list.sort": [[1137, null]], "polars.Series.list.std": [[1138, null]], "polars.Series.list.sum": [[1139, null]], "polars.Series.list.tail": [[1140, null]], "polars.Series.list.to_array": [[1141, null]], "polars.Series.list.to_struct": [[1142, null]], "polars.Series.list.unique": [[1143, null]], "polars.Series.list.var": [[1144, null]], "polars.Series.log": [[1145, null]], "polars.Series.log10": [[1146, null]], "polars.Series.log1p": [[1147, null]], "polars.Series.lower_bound": [[1148, null]], "polars.Series.lt": [[1149, null]], "polars.Series.map_elements": [[1150, null]], "polars.Series.max": [[1151, null]], "polars.Series.mean": [[1152, null]], "polars.Series.median": [[1153, null]], "polars.Series.min": [[1154, null]], "polars.Series.mode": [[1155, null]], "polars.Series.n_chunks": [[1156, null]], "polars.Series.n_unique": [[1157, null]], "polars.Series.name": [[1158, null]], "polars.Series.nan_max": [[1159, null]], "polars.Series.nan_min": [[1160, null]], "polars.Series.ne": [[1161, null]], "polars.Series.ne_missing": [[1162, null]], "polars.Series.new_from_index": [[1163, null]], "polars.Series.not_": [[1164, null]], "polars.Series.null_count": [[1165, null]], "polars.Series.pct_change": [[1166, null]], "polars.Series.peak_max": [[1167, null]], "polars.Series.peak_min": [[1168, null]], "polars.Series.pow": [[1169, null]], "polars.Series.product": [[1170, null]], "polars.Series.qcut": [[1171, null]], "polars.Series.quantile": [[1172, null]], "polars.Series.rank": [[1173, null]], "polars.Series.rechunk": [[1174, null]], "polars.Series.reinterpret": [[1175, null]], "polars.Series.rename": [[1176, null]], "polars.Series.replace": [[1177, null]], "polars.Series.replace_strict": [[1178, null]], "polars.Series.reshape": [[1179, null]], "polars.Series.reverse": [[1180, null]], "polars.Series.rle": [[1181, null]], "polars.Series.rle_id": [[1182, null]], "polars.Series.rolling_map": [[1183, null]], "polars.Series.rolling_max": [[1184, null]], "polars.Series.rolling_mean": [[1185, null]], "polars.Series.rolling_median": [[1186, null]], "polars.Series.rolling_min": [[1187, null]], "polars.Series.rolling_quantile": [[1188, null]], "polars.Series.rolling_skew": [[1189, null]], "polars.Series.rolling_std": [[1190, null]], "polars.Series.rolling_sum": [[1191, null]], "polars.Series.rolling_var": [[1192, null]], "polars.Series.round": [[1193, null]], "polars.Series.round_sig_figs": [[1194, null]], "polars.Series.sample": [[1195, null]], "polars.Series.scatter": [[1196, null]], "polars.Series.search_sorted": [[1197, null]], "polars.Series.set": [[1198, null]], "polars.Series.set_sorted": [[1199, null]], "polars.Series.shape": [[1200, null]], "polars.Series.shift": [[1201, null]], "polars.Series.shrink_dtype": [[1202, null]], "polars.Series.shrink_to_fit": [[1203, null]], "polars.Series.shuffle": [[1204, null]], "polars.Series.sign": [[1205, null]], "polars.Series.sin": [[1206, null]], "polars.Series.sinh": [[1207, null]], "polars.Series.skew": [[1208, null]], "polars.Series.slice": [[1209, null]], "polars.Series.sort": [[1210, null]], "polars.Series.sqrt": [[1211, null]], "polars.Series.std": [[1212, null]], "polars.Series.str.concat": [[1213, null]], "polars.Series.str.contains": [[1214, null]], "polars.Series.str.contains_any": [[1215, null]], "polars.Series.str.count_matches": [[1216, null]], "polars.Series.str.decode": [[1217, null]], "polars.Series.str.encode": [[1218, null]], "polars.Series.str.ends_with": [[1219, null]], "polars.Series.str.escape_regex": [[1220, null]], "polars.Series.str.explode": [[1221, null]], "polars.Series.str.extract": [[1222, null]], "polars.Series.str.extract_all": [[1223, null]], "polars.Series.str.extract_groups": [[1224, null]], "polars.Series.str.extract_many": [[1225, null]], "polars.Series.str.find": [[1226, null]], "polars.Series.str.head": [[1227, null]], "polars.Series.str.join": [[1228, null]], "polars.Series.str.json_decode": [[1229, null]], "polars.Series.str.json_path_match": [[1230, null]], "polars.Series.str.len_bytes": [[1231, null]], "polars.Series.str.len_chars": [[1232, null]], "polars.Series.str.pad_end": [[1233, null]], "polars.Series.str.pad_start": [[1234, null]], "polars.Series.str.replace": [[1235, null]], "polars.Series.str.replace_all": [[1236, null]], "polars.Series.str.replace_many": [[1237, null]], "polars.Series.str.reverse": [[1238, null]], "polars.Series.str.slice": [[1239, null]], "polars.Series.str.split": [[1240, null]], "polars.Series.str.split_exact": [[1241, null]], "polars.Series.str.splitn": [[1242, null]], "polars.Series.str.starts_with": [[1243, null]], "polars.Series.str.strip_chars": [[1244, null]], "polars.Series.str.strip_chars_end": [[1245, null]], "polars.Series.str.strip_chars_start": [[1246, null]], "polars.Series.str.strip_prefix": [[1247, null]], "polars.Series.str.strip_suffix": [[1248, null]], "polars.Series.str.strptime": [[1249, null]], "polars.Series.str.tail": [[1250, null]], "polars.Series.str.to_date": [[1251, null]], "polars.Series.str.to_datetime": [[1252, null]], "polars.Series.str.to_decimal": [[1253, null]], "polars.Series.str.to_integer": [[1254, null]], "polars.Series.str.to_lowercase": [[1255, null]], "polars.Series.str.to_time": [[1256, null]], "polars.Series.str.to_titlecase": [[1257, null]], "polars.Series.str.to_uppercase": [[1258, null]], "polars.Series.str.zfill": [[1259, null]], "polars.Series.struct.field": [[1260, null]], "polars.Series.struct.fields": [[1261, null]], "polars.Series.struct.json_encode": [[1262, null]], "polars.Series.struct.rename_fields": [[1263, null]], "polars.Series.struct.schema": [[1264, null]], "polars.Series.struct.unnest": [[1265, null]], "polars.Series.sum": [[1266, null]], "polars.Series.tail": [[1267, null]], "polars.Series.tan": [[1268, null]], "polars.Series.tanh": [[1269, null]], "polars.Series.to_arrow": [[1270, null]], "polars.Series.to_dummies": [[1271, null]], "polars.Series.to_frame": [[1272, null]], "polars.Series.to_init_repr": [[1273, null]], "polars.Series.to_jax": [[1274, null]], "polars.Series.to_list": [[1275, null]], "polars.Series.to_numpy": [[1276, null]], "polars.Series.to_pandas": [[1277, null]], "polars.Series.to_physical": [[1278, null]], "polars.Series.to_torch": [[1279, null]], "polars.Series.top_k": [[1280, null]], "polars.Series.unique": [[1281, null]], "polars.Series.unique_counts": [[1282, null]], "polars.Series.upper_bound": [[1283, null]], "polars.Series.value_counts": [[1284, null]], "polars.Series.var": [[1285, null]], "polars.Series.zip_with": [[1286, null]], "polars.StringCache": [[49, null]], "polars.align_frames": [[50, null]], "polars.all": [[714, null]], "polars.all_horizontal": [[715, null]], "polars.any": [[716, null]], "polars.any_horizontal": [[717, null]], "polars.api.register_dataframe_namespace": [[51, null]], "polars.api.register_expr_namespace": [[52, null]], "polars.api.register_lazyframe_namespace": [[53, null]], "polars.api.register_series_namespace": [[54, null]], "polars.approx_n_unique": [[718, null]], "polars.arange": [[719, null]], "polars.arctan2": [[720, null]], "polars.arctan2d": [[721, null]], "polars.arg_sort_by": [[722, null]], "polars.arg_where": [[723, null]], "polars.build_info": [[55, null]], "polars.business_day_count": [[724, null]], "polars.coalesce": [[725, null]], "polars.col": [[792, null]], "polars.collect_all": [[56, null]], "polars.collect_all_async": [[57, null]], "polars.concat": [[58, null]], "polars.concat_list": [[726, null]], "polars.concat_str": [[727, null]], "polars.corr": [[728, null]], "polars.count": [[729, null]], "polars.cov": [[730, null]], "polars.cum_count": [[731, null]], "polars.cum_fold": [[732, null]], "polars.cum_reduce": [[733, null]], "polars.cum_sum": [[734, null]], "polars.cum_sum_horizontal": [[735, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[295, null]], "polars.dataframe.group_by.GroupBy.agg": [[296, null]], "polars.dataframe.group_by.GroupBy.all": [[297, null]], "polars.dataframe.group_by.GroupBy.count": [[298, null]], "polars.dataframe.group_by.GroupBy.first": [[299, null]], "polars.dataframe.group_by.GroupBy.head": [[300, null]], "polars.dataframe.group_by.GroupBy.last": [[301, null]], "polars.dataframe.group_by.GroupBy.len": [[302, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[303, null]], "polars.dataframe.group_by.GroupBy.max": [[304, null]], "polars.dataframe.group_by.GroupBy.mean": [[305, null]], "polars.dataframe.group_by.GroupBy.median": [[306, null]], "polars.dataframe.group_by.GroupBy.min": [[307, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[308, null]], "polars.dataframe.group_by.GroupBy.quantile": [[309, null]], "polars.dataframe.group_by.GroupBy.sum": [[310, null]], "polars.dataframe.group_by.GroupBy.tail": [[311, null]], "polars.datatypes.Array": [[59, null]], "polars.datatypes.Binary": [[60, null]], "polars.datatypes.Boolean": [[61, null]], "polars.datatypes.Categorical": [[62, null]], "polars.datatypes.DataType": [[63, null]], "polars.datatypes.Date": [[64, null]], "polars.datatypes.Datetime": [[65, null]], "polars.datatypes.Decimal": [[66, null]], "polars.datatypes.Duration": [[67, null]], "polars.datatypes.Enum": [[68, null]], "polars.datatypes.Float32": [[69, null]], "polars.datatypes.Float64": [[70, null]], "polars.datatypes.Int16": [[71, null]], "polars.datatypes.Int32": [[72, null]], "polars.datatypes.Int64": [[73, null]], "polars.datatypes.Int8": [[74, null]], "polars.datatypes.List": [[75, null]], "polars.datatypes.Null": [[76, null]], "polars.datatypes.Object": [[77, null]], "polars.datatypes.String": [[78, null]], "polars.datatypes.Struct": [[79, null]], "polars.datatypes.Time": [[80, null]], "polars.datatypes.UInt16": [[81, null]], "polars.datatypes.UInt32": [[82, null]], "polars.datatypes.UInt64": [[83, null]], "polars.datatypes.UInt8": [[84, null]], "polars.datatypes.Unknown": [[85, null]], "polars.datatypes.Utf8": [[86, null]], "polars.date": [[736, null]], "polars.date_range": [[737, null]], "polars.date_ranges": [[738, null]], "polars.datetime": [[739, null]], "polars.datetime_range": [[740, null]], "polars.datetime_ranges": [[741, null]], "polars.disable_string_cache": [[87, null]], "polars.duration": [[742, null]], "polars.element": [[743, null]], "polars.enable_string_cache": [[88, null]], "polars.escape_regex": [[89, null]], "polars.exceptions.CategoricalRemappingWarning": [[90, null]], "polars.exceptions.ChronoFormatWarning": [[91, null]], "polars.exceptions.ColumnNotFoundError": [[92, null]], "polars.exceptions.ComputeError": [[93, null]], "polars.exceptions.CustomUFuncWarning": [[94, null]], "polars.exceptions.DataOrientationWarning": [[95, null]], "polars.exceptions.DuplicateError": [[96, null]], "polars.exceptions.InvalidOperationError": [[97, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[98, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[99, null]], "polars.exceptions.NoDataError": [[100, null]], "polars.exceptions.NoRowsReturnedError": [[101, null]], "polars.exceptions.OutOfBoundsError": [[102, null]], "polars.exceptions.PanicException": [[103, null]], "polars.exceptions.ParameterCollisionError": [[104, null]], "polars.exceptions.PerformanceWarning": [[105, null]], "polars.exceptions.PolarsError": [[106, null]], "polars.exceptions.PolarsInefficientMapWarning": [[107, null]], "polars.exceptions.PolarsWarning": [[108, null]], "polars.exceptions.RowsError": [[109, null]], "polars.exceptions.SQLInterfaceError": [[110, null]], "polars.exceptions.SQLSyntaxError": [[111, null]], "polars.exceptions.SchemaError": [[112, null]], "polars.exceptions.SchemaFieldNotFoundError": [[113, null]], "polars.exceptions.ShapeError": [[114, null]], "polars.exceptions.StringCacheMismatchError": [[115, null]], "polars.exceptions.StructFieldNotFoundError": [[116, null]], "polars.exceptions.TooManyRowsReturnedError": [[117, null]], "polars.exceptions.UnstableWarning": [[118, null]], "polars.exceptions.UnsuitableSQLError": [[119, null]], "polars.exclude": [[744, null]], "polars.first": [[745, null]], "polars.fold": [[746, null]], "polars.format": [[747, null]], "polars.from_arrow": [[120, null]], "polars.from_dataframe": [[121, null]], "polars.from_dict": [[122, null]], "polars.from_dicts": [[123, null]], "polars.from_epoch": [[748, null]], "polars.from_numpy": [[124, null]], "polars.from_pandas": [[125, null]], "polars.from_records": [[126, null]], "polars.from_repr": [[127, null]], "polars.get_index_type": [[128, null]], "polars.groups": [[749, null]], "polars.head": [[750, null]], "polars.implode": [[751, null]], "polars.int_range": [[752, null]], "polars.int_ranges": [[753, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[129, null]], "polars.json_normalize": [[130, null]], "polars.last": [[754, null]], "polars.lazyframe.engine_config.GPUEngine": [[884, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[885, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[886, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[887, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[888, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[889, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[890, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[891, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[892, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[893, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[894, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[895, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[896, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[897, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[898, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[899, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[900, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[901, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[902, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[903, null]], "polars.len": [[755, null]], "polars.lit": [[756, null]], "polars.map_batches": [[757, null]], "polars.map_groups": [[758, null]], "polars.max": [[759, null]], "polars.max_horizontal": [[760, null]], "polars.mean": [[761, null]], "polars.mean_horizontal": [[762, null]], "polars.median": [[763, null]], "polars.min": [[764, null]], "polars.min_horizontal": [[765, null]], "polars.n_unique": [[766, null]], "polars.nth": [[767, null]], "polars.ones": [[768, null]], "polars.quantile": [[769, null]], "polars.read_avro": [[131, null]], "polars.read_clipboard": [[132, null]], "polars.read_csv": [[133, null]], "polars.read_csv_batched": [[134, null]], "polars.read_database": [[135, null]], "polars.read_database_uri": [[136, null]], "polars.read_delta": [[137, null]], "polars.read_excel": [[138, null]], "polars.read_ipc": [[139, null]], "polars.read_ipc_schema": [[140, null]], "polars.read_ipc_stream": [[141, null]], "polars.read_json": [[142, null]], "polars.read_ndjson": [[143, null]], "polars.read_ods": [[144, null]], "polars.read_parquet": [[145, null]], "polars.read_parquet_schema": [[146, null]], "polars.reduce": [[770, null]], "polars.repeat": [[771, null]], "polars.rolling_corr": [[772, null]], "polars.rolling_cov": [[773, null]], "polars.scan_csv": [[147, null]], "polars.scan_delta": [[148, null]], "polars.scan_iceberg": [[149, null]], "polars.scan_ipc": [[150, null]], "polars.scan_ndjson": [[151, null]], "polars.scan_parquet": [[152, null]], "polars.scan_pyarrow_dataset": [[153, null]], "polars.select": [[774, null]], "polars.set_random_seed": [[154, null]], "polars.show_versions": [[155, null]], "polars.sql": [[775, null]], "polars.sql_expr": [[776, null]], "polars.std": [[777, null]], "polars.struct": [[778, null]], "polars.sum": [[779, null]], "polars.sum_horizontal": [[780, null]], "polars.tail": [[781, null]], "polars.testing.assert_frame_equal": [[156, null]], "polars.testing.assert_frame_not_equal": [[157, null]], "polars.testing.assert_series_equal": [[158, null]], "polars.testing.assert_series_not_equal": [[159, null]], "polars.testing.parametric.column": [[160, null]], "polars.testing.parametric.columns": [[161, null]], "polars.testing.parametric.create_list_strategy": [[162, null]], "polars.testing.parametric.dataframes": [[163, null]], "polars.testing.parametric.dtypes": [[164, null]], "polars.testing.parametric.lists": [[165, null]], "polars.testing.parametric.load_profile": [[166, null]], "polars.testing.parametric.series": [[167, null]], "polars.testing.parametric.set_profile": [[168, null]], "polars.thread_pool_size": [[169, null]], "polars.threadpool_size": [[170, null]], "polars.time": [[782, null]], "polars.time_range": [[783, null]], "polars.time_ranges": [[784, null]], "polars.using_string_cache": [[171, null]], "polars.var": [[785, null]], "polars.when": [[786, null]], "polars.zeros": [[787, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.json_normalize", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[174, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[917, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[175, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[918, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[176, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1323, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1323, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[177, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[919, "polars.Series.__getitem__", false]], "__init__() (polars.credentialprovider method)": [[31, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[32, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[33, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[59, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[60, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[61, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[62, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[63, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[64, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[65, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[66, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[67, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[68, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[69, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[70, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[71, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[72, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[73, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[74, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[75, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[76, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[77, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[78, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[79, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[80, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[81, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[82, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[83, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[84, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[85, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[884, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.sqlcontext method)": [[1323, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[49, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[160, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[325, "polars.Expr.abs", false]], "abs() (polars.series method)": [[920, "polars.Series.abs", false]], "add() (polars.expr method)": [[326, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[409, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1004, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[296, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[885, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[327, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[328, "polars.Expr.alias", false]], "alias() (polars.series method)": [[921, "polars.Series.alias", false]], "align_frames() (in module polars)": [[50, "polars.align_frames", false]], "all() (in module polars)": [[714, "polars.all", false]], "all() (in module polars.selectors)": [[915, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[297, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[329, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[345, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[503, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[886, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[922, "polars.Series.all", false]], "all() (polars.series.arr method)": [[937, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1105, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[715, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[915, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[915, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[330, "polars.Expr.and_", false]], "any() (in module polars)": [[716, "polars.any", false]], "any() (polars.expr method)": [[331, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[346, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[504, "polars.Expr.list.any", false]], "any() (polars.series method)": [[923, "polars.Series.any", false]], "any() (polars.series.arr method)": [[938, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1106, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[717, "polars.any_horizontal", false]], "append() (polars.expr method)": [[332, "polars.Expr.append", false]], "append() (polars.series method)": [[924, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[718, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[178, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[333, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[811, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[925, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[719, "polars.arange", false]], "arccos() (polars.expr method)": [[334, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[926, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[335, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[927, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[336, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[928, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[337, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[929, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[338, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[930, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[720, "polars.arctan2", false]], "arctan2d() (in module polars)": [[721, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[339, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[931, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[340, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[347, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[505, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[932, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[939, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1107, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[341, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[348, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[506, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[933, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[940, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1108, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[342, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[934, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[722, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[343, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[935, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[344, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[936, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[723, "polars.arg_where", false]], "array (class in polars.datatypes)": [[59, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[156, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[157, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[158, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[159, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[369, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[410, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1005, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[60, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[915, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[376, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[967, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[377, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[968, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[378, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[969, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[379, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[970, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[380, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[971, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[381, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[972, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[382, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[973, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[383, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[974, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[384, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[975, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[61, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[915, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[179, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[385, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[812, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[976, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[386, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[55, "polars.build_info", false]], "business_day_count() (in module polars)": [[724, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[915, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[915, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[915, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[813, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[901, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[180, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[387, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[814, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[977, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[411, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1006, "polars.Series.dt.cast_time_unit", false]], "categorical (class in polars.datatypes)": [[62, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[915, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[90, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[389, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[982, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[390, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[983, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[412, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1007, "polars.Series.dt.century", false]], "chronoformatwarning": [[91, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[984, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[181, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[815, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[985, "polars.Series.clear", false]], "clip() (polars.expr method)": [[391, "polars.Expr.clip", false]], "clip() (polars.series method)": [[986, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[182, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[816, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[987, "polars.Series.clone", false]], "coalesce() (in module polars)": [[725, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[817, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[56, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[57, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[818, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[183, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[819, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[160, "polars.testing.parametric.column", false]], "columnnotfounderror": [[92, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[184, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[820, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[161, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[413, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1008, "polars.Series.dt.combine", false]], "computeerror": [[93, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[58, "polars.concat", false]], "concat() (polars.expr.list method)": [[507, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[646, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1109, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1213, "polars.Series.str.concat", false]], "concat_list() (in module polars)": [[726, "polars.concat_list", false]], "concat_str() (in module polars)": [[727, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[915, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[349, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[370, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[508, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[647, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[941, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[961, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1110, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1214, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[648, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1215, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[414, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1009, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[728, "polars.corr", false]], "corr() (polars.dataframe method)": [[185, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[392, "polars.Expr.cos", false]], "cos() (polars.series method)": [[988, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[393, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[989, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[394, "polars.Expr.cot", false]], "cot() (polars.series method)": [[990, "polars.Series.cot", false]], "count() (in module polars)": [[729, "polars.count", false]], "count() (polars.dataframe method)": [[186, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[395, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[821, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[887, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[991, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[350, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[509, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[649, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[942, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1111, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1216, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[730, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[162, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[31, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[32, "polars.CredentialProviderAWS", false]], "credentialprovidergcp (class in polars)": [[33, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[731, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[396, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[992, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[732, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[397, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[993, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[398, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[994, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[399, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[995, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[733, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[734, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[400, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[996, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[735, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[401, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[997, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[94, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[402, "polars.Expr.cut", false]], "cut() (polars.series method)": [[998, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[163, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[95, "polars.exceptions.DataOrientationWarning", false]], "datatype (class in polars.datatypes)": [[63, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[64, "polars.datatypes.Date", false]], "date() (in module polars)": [[736, "polars.date", false]], "date() (in module polars.selectors)": [[915, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[415, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1010, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[737, "polars.date_range", false]], "date_ranges() (in module polars)": [[738, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[65, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[739, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[915, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[416, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1011, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[740, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[741, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[417, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1012, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[66, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[915, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[371, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[650, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[962, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1217, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[403, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[187, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[822, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[999, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[188, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[404, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[823, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[405, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[510, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1000, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1112, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[915, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[87, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[406, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1001, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[189, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[824, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[190, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.expr method)": [[407, "polars.Expr.drop_nans", false]], "drop_nans() (polars.series method)": [[1002, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[191, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[408, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[511, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[825, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1003, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1113, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[418, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1013, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1052, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[192, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[826, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[164, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[96, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[67, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[742, "polars.duration", false]], "duration() (in module polars.selectors)": [[915, "polars.selectors.duration", false]], "element() (in module polars)": [[743, "polars.element", false]], "enable_string_cache() (in module polars)": [[88, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[372, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[651, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[963, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1218, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[915, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[373, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.str method)": [[652, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[964, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.str method)": [[1219, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[453, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1053, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[68, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[419, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1014, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[454, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[553, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1054, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[455, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1055, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[193, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1056, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[89, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[653, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1220, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[194, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1057, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[512, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1114, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[456, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1058, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[457, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1059, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[458, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1060, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[459, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1061, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[744, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[915, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[460, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1304, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1305, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[461, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1062, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[915, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[827, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[195, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[462, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[351, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[513, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[654, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[828, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1063, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[943, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1115, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1221, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[196, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1064, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[463, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1065, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[655, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1222, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[656, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1223, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[657, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1224, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[658, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1225, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[902, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[903, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field() (polars.expr.struct method)": [[693, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1260, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1261, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[197, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[464, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[829, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1066, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[198, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[465, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[830, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1067, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[199, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[466, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[831, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1068, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[659, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1226, "polars.Series.str.find", false]], "first() (in module polars)": [[745, "polars.first", false]], "first() (in module polars.selectors)": [[915, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[467, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[352, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[514, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[832, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[888, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1069, "polars.Series.first", false]], "first() (polars.series.arr method)": [[944, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1116, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[200, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1070, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[468, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[915, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[69, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[70, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[469, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1071, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[470, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[746, "polars.fold", false]], "fold() (polars.dataframe method)": [[201, "polars.DataFrame.fold", false]], "format() (in module polars)": [[747, "polars.format", false]], "forward_fill() (polars.expr method)": [[471, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[120, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[121, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[122, "polars.from_dict", false]], "from_dicts() (in module polars)": [[123, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[748, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[472, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[124, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[125, "polars.from_pandas", false]], "from_records() (in module polars)": [[126, "polars.from_records", false]], "from_repr() (in module polars)": [[127, "polars.from_repr", false]], "gather() (polars.expr method)": [[473, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[515, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1072, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1117, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[202, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[474, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[516, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[833, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1073, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1118, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[475, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1074, "polars.Series.ge", false]], "get() (polars.expr method)": [[476, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[353, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[517, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[945, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1119, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[388, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[978, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1075, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[203, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[204, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[205, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[128, "polars.get_index_type", false]], "glimpse() (polars.dataframe method)": [[206, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[884, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[207, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[834, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[208, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[835, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[749, "polars.groups", false]], "gt() (polars.expr method)": [[477, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1076, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[554, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[478, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1077, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1078, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[479, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1079, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[209, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[750, "polars.head", false]], "head() (polars.dataframe method)": [[210, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[480, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[518, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[660, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[836, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[889, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1080, "polars.Series.head", false]], "head() (polars.series.list method)": [[1120, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1227, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[211, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[481, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1081, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[420, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1015, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[212, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[751, "polars.implode", false]], "implode() (polars.expr method)": [[482, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1082, "polars.Series.implode", false]], "insert_column() (polars.dataframe method)": [[213, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[483, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[837, "polars.LazyFrame.inspect", false]], "int16 (class in polars.datatypes)": [[71, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[72, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[73, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[74, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[752, "polars.int_range", false]], "int_ranges() (in module polars)": [[753, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[915, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[214, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[484, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[838, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1083, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[485, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1084, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[97, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[486, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1085, "polars.Series.is_between", false]], "is_column() (polars.expr.meta method)": [[555, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[556, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[215, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[487, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1086, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[216, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1087, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[488, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1088, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[489, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1089, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[490, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1090, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[491, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1091, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[492, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1092, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[421, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1016, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[557, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[979, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[493, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1093, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[494, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1094, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[495, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1095, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[496, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1096, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[558, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[915, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1097, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[217, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[497, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1098, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[422, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1017, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[218, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1099, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[219, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[220, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[221, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[222, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[354, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[519, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[661, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[839, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[946, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1121, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1228, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[223, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[840, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[224, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[841, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[662, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1229, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[694, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1262, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[130, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[663, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1230, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[573, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[498, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1100, "polars.Series.kurtosis", false]], "last() (in module polars)": [[754, "polars.last", false]], "last() (in module polars.selectors)": [[915, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[499, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[355, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[520, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[842, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[890, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1101, "polars.Series.last", false]], "last() (polars.series.arr method)": [[947, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1122, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[225, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[843, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[500, "polars.Expr.le", false]], "le() (polars.series method)": [[1102, "polars.Series.le", false]], "len() (in module polars)": [[755, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[302, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[501, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[521, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[891, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1103, "polars.Series.len", false]], "len() (polars.series.list method)": [[1123, "polars.Series.list.len", false]], "len_bytes() (polars.expr.str method)": [[664, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1231, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.str method)": [[665, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.str method)": [[1232, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[226, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[502, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[844, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1104, "polars.Series.limit", false]], "list (class in polars.datatypes)": [[75, "polars.datatypes.List", false]], "lists() (in module polars.testing.parametric)": [[165, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[756, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[166, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[543, "polars.Expr.log", false]], "log() (polars.series method)": [[1145, "polars.Series.log", false]], "log10() (polars.expr method)": [[544, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1146, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[545, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1147, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[546, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1148, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[547, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1149, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[574, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[757, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[548, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[845, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[549, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1150, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[575, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[758, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[303, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[892, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[227, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[98, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[915, "polars.selectors.matches", false]], "max() (in module polars)": [[759, "polars.max", false]], "max() (polars.dataframe method)": [[228, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[304, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[550, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[356, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[522, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[846, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[893, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1151, "polars.Series.max", false]], "max() (polars.series.arr method)": [[948, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1018, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1124, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[760, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[229, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[761, "polars.mean", false]], "mean() (polars.dataframe method)": [[230, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[305, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[551, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[523, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[847, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[894, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1152, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1019, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1125, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[762, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[231, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[763, "polars.median", false]], "median() (polars.dataframe method)": [[232, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[306, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[552, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[357, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[524, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[848, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[895, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1153, "polars.Series.median", false]], "median() (polars.series.arr method)": [[949, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1020, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1126, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[233, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[849, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[234, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[850, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[423, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1021, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[424, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1022, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[425, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1023, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[764, "polars.min", false]], "min() (polars.dataframe method)": [[235, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[307, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[568, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[358, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[525, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[851, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[896, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1154, "polars.Series.min", false]], "min() (polars.series.arr method)": [[950, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1024, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1127, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[765, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[236, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[426, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1025, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[569, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[570, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1155, "polars.Series.mode", false]], "module": [[913, "module-polars.plugins", false], [915, "module-polars.selectors", false]], "moduleupgraderequirederror": [[99, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[427, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1026, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[428, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1027, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[429, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1028, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[571, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[237, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1156, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[766, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[238, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[308, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[572, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[359, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[526, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[897, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1157, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[951, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1128, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1158, "polars.Series.name", false]], "nan_max() (polars.expr method)": [[582, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1159, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[583, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1160, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[430, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1029, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[584, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[559, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1161, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[585, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1162, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[586, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1163, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[129, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[100, "polars.exceptions.NoDataError", false]], "norowsreturnederror": [[101, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[587, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1164, "polars.Series.not_", false]], "nth() (in module polars)": [[767, "polars.nth", false]], "null (class in polars.datatypes)": [[76, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[239, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[588, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[852, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1165, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[915, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[77, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[431, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1030, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[768, "polars.ones", false]], "or_() (polars.expr method)": [[589, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[432, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1031, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[102, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[560, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[590, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[666, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1233, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[667, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1234, "polars.Series.str.pad_start", false]], "panicexception": [[103, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[104, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[240, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[591, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1166, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[592, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1167, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[593, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1168, "polars.Series.peak_min", false]], "performancewarning": [[105, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[241, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[594, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[853, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[242, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[320, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1300, "polars.Series.plot", false]], "polars.plugins": [[913, "module-polars.plugins", false]], "polars.selectors": [[915, "module-polars.selectors", false]], "polarserror": [[106, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[107, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[108, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[561, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[595, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1169, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[576, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[577, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[243, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[596, "polars.Expr.product", false]], "product() (polars.series method)": [[1170, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[854, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[597, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1171, "polars.Series.qcut", false]], "quantile() (in module polars)": [[769, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[244, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[309, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[598, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[855, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[898, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1172, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[433, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1032, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[599, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[600, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1173, "polars.Series.rank", false]], "read_avro() (in module polars)": [[131, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[132, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[133, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[134, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[135, "polars.read_database", false]], "read_database_uri() (in module polars)": [[136, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[137, "polars.read_delta", false]], "read_excel() (in module polars)": [[138, "polars.read_excel", false]], "read_ipc() (in module polars)": [[139, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[140, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[141, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[142, "polars.read_json", false]], "read_ndjson() (in module polars)": [[143, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[144, "polars.read_ods", false]], "read_parquet() (in module polars)": [[145, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[146, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[245, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[601, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1174, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[770, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1306, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[51, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[52, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1307, "polars.SQLContext.register_globals", false]], "register_lazyframe_namespace() (in module polars.api)": [[53, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1308, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[913, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[54, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[602, "polars.Expr.reinterpret", false]], "reinterpret() (polars.series method)": [[1175, "polars.Series.reinterpret", false]], "rename() (polars.dataframe method)": [[246, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[856, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1176, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[695, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1263, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[771, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[603, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[604, "polars.Expr.replace", false]], "replace() (polars.expr.str method)": [[668, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1177, "polars.Series.replace", false]], "replace() (polars.series.str method)": [[1235, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[669, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1236, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[247, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[670, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1237, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[605, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1178, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[434, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1033, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[606, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1179, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[248, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[607, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[360, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[527, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[671, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[857, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1180, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[952, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1129, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1238, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[608, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1181, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[609, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1182, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[249, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[610, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[858, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[772, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[773, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[611, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1183, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[612, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1184, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[613, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[614, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1185, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[615, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[616, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1186, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[617, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[618, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1187, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[619, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[620, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1188, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[621, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[622, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1189, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[623, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1190, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[624, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[625, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1191, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[626, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[627, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1192, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[628, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[562, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[629, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[435, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1193, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1034, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[630, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1194, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[250, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[251, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[252, "polars.DataFrame.rows_by_key", false]], "rowserror": [[109, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[253, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[631, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[528, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1195, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1130, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[147, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[148, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[149, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[150, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[151, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[152, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[153, "polars.scan_pyarrow_dataset", false]], "scatter() (polars.series method)": [[1196, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[254, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[859, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1264, "polars.Series.struct.schema", false]], "schemaerror": [[112, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[113, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[632, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1197, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[436, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1035, "polars.Series.dt.second", false]], "select() (in module polars)": [[774, "polars.select", false]], "select() (polars.dataframe method)": [[255, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[860, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[256, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[861, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[257, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[563, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[862, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[167, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1198, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[529, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1131, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[530, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1132, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[168, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[154, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[258, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[633, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[863, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1199, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[531, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1133, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[532, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1134, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[259, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1200, "polars.Series.shape", false]], "shapeerror": [[114, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[260, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[634, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[361, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[533, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[864, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1201, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[953, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1135, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[564, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[865, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[155, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[635, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1202, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[261, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1203, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[636, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1204, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[637, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1205, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[915, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[638, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1206, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[639, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1207, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[46, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[47, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[374, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[965, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[640, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1208, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[262, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[641, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[534, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[672, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[866, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1209, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1136, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1239, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[263, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[642, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[362, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[535, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[867, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1210, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[954, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1137, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[643, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[673, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1240, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[674, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1241, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[675, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1242, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[775, "polars.sql", false]], "sql() (polars.dataframe method)": [[264, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[868, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[776, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1323, "polars.SQLContext", false]], "sqlinterfaceerror": [[110, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[111, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[644, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1211, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[915, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[375, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.str method)": [[676, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[966, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.str method)": [[1243, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[30, "polars.Config.state", false]], "std() (in module polars)": [[777, "polars.std", false]], "std() (polars.dataframe method)": [[265, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[645, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[363, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[536, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[869, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1212, "polars.Series.std", false]], "std() (polars.series.arr method)": [[955, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1138, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[437, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1036, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[78, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[915, "polars.selectors.string", false]], "stringcache (class in polars)": [[49, "polars.StringCache", false]], "stringcachemismatcherror": [[115, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[677, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1244, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[678, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1245, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[679, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1246, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[680, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1247, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[681, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1248, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[682, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1249, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[79, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[778, "polars.struct", false]], "structfieldnotfounderror": [[116, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[321, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[698, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[578, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[579, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[779, "polars.sum", false]], "sum() (polars.dataframe method)": [[266, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[310, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[699, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[364, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[537, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[870, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[899, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1266, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[956, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1139, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[780, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[267, "polars.DataFrame.sum_horizontal", false]], "tables() (polars.sqlcontext method)": [[1309, "polars.SQLContext.tables", false]], "tail() (in module polars)": [[781, "polars.tail", false]], "tail() (polars.dataframe method)": [[268, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[311, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[700, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[538, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[683, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[871, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[900, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1267, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1140, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1250, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[701, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1268, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[702, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1269, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[915, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[169, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[170, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[80, "polars.datatypes.Time", false]], "time() (in module polars)": [[782, "polars.time", false]], "time() (in module polars.selectors)": [[915, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[438, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1037, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[783, "polars.time_range", false]], "time_ranges() (in module polars)": [[784, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[439, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1038, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[539, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1141, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[269, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1270, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[684, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1251, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[685, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1252, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[686, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1253, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[270, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[271, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[272, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1271, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1272, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[273, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1273, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[687, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1254, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[274, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1274, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[365, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1275, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[957, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[980, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[580, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[688, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1255, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[275, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1276, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[276, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1277, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[703, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1278, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[277, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[440, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1039, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[278, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[366, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[540, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[958, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1142, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[689, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1256, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[690, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1257, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[279, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1279, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[581, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[691, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1258, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[117, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[280, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[704, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[872, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1280, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[705, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[441, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1040, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[442, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1041, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[443, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1042, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[444, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1043, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[445, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1044, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[446, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1045, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[447, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1046, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[281, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[565, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[706, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[448, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1047, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[81, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[82, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[83, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[84, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[566, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[282, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[707, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[367, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[541, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[873, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1281, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[959, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1143, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[708, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1282, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[85, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[283, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[696, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[874, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1265, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[284, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[875, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1310, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[915, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[118, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[285, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[119, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[286, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[876, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[709, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1283, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[287, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[981, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[171, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[86, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[710, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1284, "polars.Series.value_counts", false]], "var() (in module polars)": [[785, "polars.var", false]], "var() (polars.dataframe method)": [[288, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[711, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[368, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[542, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[877, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1285, "polars.Series.var", false]], "var() (polars.series.arr method)": [[960, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1144, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[289, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[449, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1048, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[450, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1049, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[786, "polars.when", false]], "where() (polars.expr method)": [[712, "polars.Expr.where", false]], "width (polars.dataframe property)": [[290, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[878, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[291, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[879, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[292, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[880, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[881, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[697, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[293, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[882, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[294, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[883, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[451, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1050, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[34, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[35, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[36, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[37, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[38, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[39, "polars.DataFrame.write_excel", false]], "write_ipc() (polars.dataframe method)": [[40, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[42, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[567, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[43, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[44, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[713, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[452, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1051, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[787, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[692, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1259, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1286, "polars.Series.zip_with", false]]}, "objects": {"polars": [[31, 1, 1, "", "CredentialProvider"], [32, 1, 1, "", "CredentialProviderAWS"], [33, 1, 1, "", "CredentialProviderGCP"], [1323, 1, 1, "", "SQLContext"], [49, 1, 1, "", "StringCache"], [50, 4, 1, "", "align_frames"], [714, 4, 1, "", "all"], [715, 4, 1, "", "all_horizontal"], [716, 4, 1, "", "any"], [717, 4, 1, "", "any_horizontal"], [718, 4, 1, "", "approx_n_unique"], [719, 4, 1, "", "arange"], [720, 4, 1, "", "arctan2"], [721, 4, 1, "", "arctan2d"], [722, 4, 1, "", "arg_sort_by"], [723, 4, 1, "", "arg_where"], [55, 4, 1, "", "build_info"], [724, 4, 1, "", "business_day_count"], [725, 4, 1, "", "coalesce"], [56, 4, 1, "", "collect_all"], [57, 4, 1, "", "collect_all_async"], [58, 4, 1, "", "concat"], [726, 4, 1, "", "concat_list"], [727, 4, 1, "", "concat_str"], [728, 4, 1, "", "corr"], [729, 4, 1, "", "count"], [730, 4, 1, "", "cov"], [731, 4, 1, "", "cum_count"], [732, 4, 1, "", "cum_fold"], [733, 4, 1, "", "cum_reduce"], [734, 4, 1, "", "cum_sum"], [735, 4, 1, "", "cum_sum_horizontal"], [736, 4, 1, "", "date"], [737, 4, 1, "", "date_range"], [738, 4, 1, "", "date_ranges"], [739, 4, 1, "", "datetime"], [740, 4, 1, "", "datetime_range"], [741, 4, 1, "", "datetime_ranges"], [87, 4, 1, "", "disable_string_cache"], [742, 4, 1, "", "duration"], [743, 4, 1, "", "element"], [88, 4, 1, "", "enable_string_cache"], [89, 4, 1, "", "escape_regex"], [744, 4, 1, "", "exclude"], [745, 4, 1, "", "first"], [746, 4, 1, "", "fold"], [747, 4, 1, "", "format"], [120, 4, 1, "", "from_arrow"], [121, 4, 1, "", "from_dataframe"], [122, 4, 1, "", "from_dict"], [123, 4, 1, "", "from_dicts"], [748, 4, 1, "", "from_epoch"], [124, 4, 1, "", "from_numpy"], [125, 4, 1, "", "from_pandas"], [126, 4, 1, "", "from_records"], [127, 4, 1, "", "from_repr"], [128, 4, 1, "", "get_index_type"], [749, 4, 1, "", "groups"], [750, 4, 1, "", "head"], [751, 4, 1, "", "implode"], [752, 4, 1, "", "int_range"], [753, 4, 1, "", "int_ranges"], [130, 4, 1, "", "json_normalize"], [754, 4, 1, "", "last"], [755, 4, 1, "", "len"], [756, 4, 1, "", "lit"], [757, 4, 1, "", "map_batches"], [758, 4, 1, "", "map_groups"], [759, 4, 1, "", "max"], [760, 4, 1, "", "max_horizontal"], [761, 4, 1, "", "mean"], [762, 4, 1, "", "mean_horizontal"], [763, 4, 1, "", "median"], [764, 4, 1, "", "min"], [765, 4, 1, "", "min_horizontal"], [766, 4, 1, "", "n_unique"], [767, 4, 1, "", "nth"], [768, 4, 1, "", "ones"], [913, 6, 0, "-", "plugins"], [769, 4, 1, "", "quantile"], [131, 4, 1, "", "read_avro"], [132, 4, 1, "", "read_clipboard"], [133, 4, 1, "", "read_csv"], [134, 4, 1, "", "read_csv_batched"], [135, 4, 1, "", "read_database"], [136, 4, 1, "", "read_database_uri"], [137, 4, 1, "", "read_delta"], [138, 4, 1, "", "read_excel"], [139, 4, 1, "", "read_ipc"], [140, 4, 1, "", "read_ipc_schema"], [141, 4, 1, "", "read_ipc_stream"], [142, 4, 1, "", "read_json"], [143, 4, 1, "", "read_ndjson"], [144, 4, 1, "", "read_ods"], [145, 4, 1, "", "read_parquet"], [146, 4, 1, "", "read_parquet_schema"], [770, 4, 1, "", "reduce"], [771, 4, 1, "", "repeat"], [772, 4, 1, "", "rolling_corr"], [773, 4, 1, "", "rolling_cov"], [147, 4, 1, "", "scan_csv"], [148, 4, 1, "", "scan_delta"], [149, 4, 1, "", "scan_iceberg"], [150, 4, 1, "", "scan_ipc"], [151, 4, 1, "", "scan_ndjson"], [152, 4, 1, "", "scan_parquet"], [153, 4, 1, "", "scan_pyarrow_dataset"], [774, 4, 1, "", "select"], [915, 6, 0, "-", "selectors"], [154, 4, 1, "", "set_random_seed"], [155, 4, 1, "", "show_versions"], [775, 4, 1, "", "sql"], [776, 4, 1, "", "sql_expr"], [777, 4, 1, "", "std"], [778, 4, 1, "", "struct"], [779, 4, 1, "", "sum"], [780, 4, 1, "", "sum_horizontal"], [781, 4, 1, "", "tail"], [169, 4, 1, "", "thread_pool_size"], [170, 4, 1, "", "threadpool_size"], [782, 4, 1, "", "time"], [783, 4, 1, "", "time_range"], [784, 4, 1, "", "time_ranges"], [171, 4, 1, "", "using_string_cache"], [785, 4, 1, "", "var"], [786, 4, 1, "", "when"], [787, 4, 1, "", "zeros"]], "polars.Config": [[2, 0, 1, "", "load"], [3, 0, 1, "", "load_from_file"], [4, 0, 1, "", "restore_defaults"], [5, 0, 1, "", "save"], [6, 0, 1, "", "save_to_file"], [7, 0, 1, "", "set_ascii_tables"], [8, 0, 1, "", "set_auto_structify"], [9, 0, 1, "", "set_decimal_separator"], [10, 0, 1, "", "set_float_precision"], [11, 0, 1, "", "set_fmt_float"], [12, 0, 1, "", "set_fmt_str_lengths"], [13, 0, 1, "", "set_fmt_table_cell_list_len"], [14, 0, 1, "", "set_streaming_chunk_size"], [15, 0, 1, "", "set_tbl_cell_alignment"], [16, 0, 1, "", "set_tbl_cell_numeric_alignment"], [17, 0, 1, "", "set_tbl_cols"], [18, 0, 1, "", "set_tbl_column_data_type_inline"], [19, 0, 1, "", "set_tbl_dataframe_shape_below"], [20, 0, 1, "", "set_tbl_formatting"], [21, 0, 1, "", "set_tbl_hide_column_data_types"], [22, 0, 1, "", "set_tbl_hide_column_names"], [23, 0, 1, "", "set_tbl_hide_dataframe_shape"], [24, 0, 1, "", "set_tbl_hide_dtype_separator"], [25, 0, 1, "", "set_tbl_rows"], [26, 0, 1, "", "set_tbl_width_chars"], [27, 0, 1, "", "set_thousands_separator"], [28, 0, 1, "", "set_trim_decimal_zeros"], [29, 0, 1, "", "set_verbose"], [30, 0, 1, "", "state"]], "polars.CredentialProvider": [[31, 0, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[32, 0, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[33, 0, 1, "", "__init__"]], "polars.DataFrame": [[174, 0, 1, "", "__array__"], [175, 0, 1, "", "__arrow_c_stream__"], [176, 0, 1, "", "__dataframe__"], [177, 0, 1, "", "__getitem__"], [178, 0, 1, "", "approx_n_unique"], [179, 0, 1, "", "bottom_k"], [180, 0, 1, "", "cast"], [181, 0, 1, "", "clear"], [182, 0, 1, "", "clone"], [183, 0, 1, "", "collect_schema"], [184, 2, 1, "", "columns"], [185, 0, 1, "", "corr"], [186, 0, 1, "", "count"], [187, 0, 1, "", "describe"], [188, 0, 1, "", "deserialize"], [189, 0, 1, "", "drop"], [190, 0, 1, "", "drop_in_place"], [191, 0, 1, "", "drop_nulls"], [192, 2, 1, "", "dtypes"], [193, 0, 1, "", "equals"], [194, 0, 1, "", "estimated_size"], [195, 0, 1, "", "explode"], [196, 0, 1, "", "extend"], [197, 0, 1, "", "fill_nan"], [198, 0, 1, "", "fill_null"], [199, 0, 1, "", "filter"], [200, 2, 1, "", "flags"], [201, 0, 1, "", "fold"], [202, 0, 1, "", "gather_every"], [203, 0, 1, "", "get_column"], [204, 0, 1, "", "get_column_index"], [205, 0, 1, "", "get_columns"], [206, 0, 1, "", "glimpse"], [207, 0, 1, "", "group_by"], [208, 0, 1, "", "group_by_dynamic"], [209, 0, 1, "", "hash_rows"], [210, 0, 1, "", "head"], [211, 2, 1, "", "height"], [212, 0, 1, "", "hstack"], [213, 0, 1, "", "insert_column"], [214, 0, 1, "", "interpolate"], [215, 0, 1, "", "is_duplicated"], [216, 0, 1, "", "is_empty"], [217, 0, 1, "", "is_unique"], [218, 0, 1, "", "item"], [219, 0, 1, "", "iter_columns"], [220, 0, 1, "", "iter_rows"], [221, 0, 1, "", "iter_slices"], [222, 0, 1, "", "join"], [223, 0, 1, "", "join_asof"], [224, 0, 1, "", "join_where"], [225, 0, 1, "", "lazy"], [226, 0, 1, "", "limit"], [227, 0, 1, "", "map_rows"], [228, 0, 1, "", "max"], [229, 0, 1, "", "max_horizontal"], [230, 0, 1, "", "mean"], [231, 0, 1, "", "mean_horizontal"], [232, 0, 1, "", "median"], [233, 0, 1, "", "melt"], [234, 0, 1, "", "merge_sorted"], [235, 0, 1, "", "min"], [236, 0, 1, "", "min_horizontal"], [237, 0, 1, "", "n_chunks"], [238, 0, 1, "", "n_unique"], [239, 0, 1, "", "null_count"], [240, 0, 1, "", "partition_by"], [241, 0, 1, "", "pipe"], [242, 0, 1, "", "pivot"], [320, 2, 1, "", "plot"], [243, 0, 1, "", "product"], [244, 0, 1, "", "quantile"], [245, 0, 1, "", "rechunk"], [246, 0, 1, "", "rename"], [247, 0, 1, "", "replace_column"], [248, 0, 1, "", "reverse"], [249, 0, 1, "", "rolling"], [250, 0, 1, "", "row"], [251, 0, 1, "", "rows"], [252, 0, 1, "", "rows_by_key"], [253, 0, 1, "", "sample"], [254, 2, 1, "", "schema"], [255, 0, 1, "", "select"], [256, 0, 1, "", "select_seq"], [257, 0, 1, "", "serialize"], [258, 0, 1, "", "set_sorted"], [259, 2, 1, "", "shape"], [260, 0, 1, "", "shift"], [261, 0, 1, "", "shrink_to_fit"], [262, 0, 1, "", "slice"], [263, 0, 1, "", "sort"], [264, 0, 1, "", "sql"], [265, 0, 1, "", "std"], [321, 2, 1, "", "style"], [266, 0, 1, "", "sum"], [267, 0, 1, "", "sum_horizontal"], [268, 0, 1, "", "tail"], [269, 0, 1, "", "to_arrow"], [270, 0, 1, "", "to_dict"], [271, 0, 1, "", "to_dicts"], [272, 0, 1, "", "to_dummies"], [273, 0, 1, "", "to_init_repr"], [274, 0, 1, "", "to_jax"], [275, 0, 1, "", "to_numpy"], [276, 0, 1, "", "to_pandas"], [277, 0, 1, "", "to_series"], [278, 0, 1, "", "to_struct"], [279, 0, 1, "", "to_torch"], [280, 0, 1, "", "top_k"], [281, 0, 1, "", "transpose"], [282, 0, 1, "", "unique"], [283, 0, 1, "", "unnest"], [284, 0, 1, "", "unpivot"], [285, 0, 1, "", "unstack"], [286, 0, 1, "", "update"], [287, 0, 1, "", "upsample"], [288, 0, 1, "", "var"], [289, 0, 1, "", "vstack"], [290, 2, 1, "", "width"], [291, 0, 1, "", "with_columns"], [292, 0, 1, "", "with_columns_seq"], [293, 0, 1, "", "with_row_count"], [294, 0, 1, "", "with_row_index"], [34, 0, 1, "", "write_avro"], [35, 0, 1, "", "write_clipboard"], [36, 0, 1, "", "write_csv"], [37, 0, 1, "", "write_database"], [38, 0, 1, "", "write_delta"], [39, 0, 1, "", "write_excel"], [40, 0, 1, "", "write_ipc"], [41, 0, 1, "", "write_ipc_stream"], [42, 0, 1, "", "write_json"], [43, 0, 1, "", "write_ndjson"], [44, 0, 1, "", "write_parquet"]], "polars.Expr": [[325, 0, 1, "", "abs"], [326, 0, 1, "", "add"], [327, 0, 1, "", "agg_groups"], [328, 0, 1, "", "alias"], [329, 0, 1, "", "all"], [330, 0, 1, "", "and_"], [331, 0, 1, "", "any"], [332, 0, 1, "", "append"], [333, 0, 1, "", "approx_n_unique"], [334, 0, 1, "", "arccos"], [335, 0, 1, "", "arccosh"], [336, 0, 1, "", "arcsin"], [337, 0, 1, "", "arcsinh"], [338, 0, 1, "", "arctan"], [339, 0, 1, "", "arctanh"], [340, 0, 1, "", "arg_max"], [341, 0, 1, "", "arg_min"], [342, 0, 1, "", "arg_sort"], [343, 0, 1, "", "arg_true"], [344, 0, 1, "", "arg_unique"], [369, 0, 1, "", "backward_fill"], [376, 0, 1, "", "bitwise_and"], [377, 0, 1, "", "bitwise_count_ones"], [378, 0, 1, "", "bitwise_count_zeros"], [379, 0, 1, "", "bitwise_leading_ones"], [380, 0, 1, "", "bitwise_leading_zeros"], [381, 0, 1, "", "bitwise_or"], [382, 0, 1, "", "bitwise_trailing_ones"], [383, 0, 1, "", "bitwise_trailing_zeros"], [384, 0, 1, "", "bitwise_xor"], [385, 0, 1, "", "bottom_k"], [386, 0, 1, "", "bottom_k_by"], [387, 0, 1, "", "cast"], [389, 0, 1, "", "cbrt"], [390, 0, 1, "", "ceil"], [391, 0, 1, "", "clip"], [392, 0, 1, "", "cos"], [393, 0, 1, "", "cosh"], [394, 0, 1, "", "cot"], [395, 0, 1, "", "count"], [396, 0, 1, "", "cum_count"], [397, 0, 1, "", "cum_max"], [398, 0, 1, "", "cum_min"], [399, 0, 1, "", "cum_prod"], [400, 0, 1, "", "cum_sum"], [401, 0, 1, "", "cumulative_eval"], [402, 0, 1, "", "cut"], [403, 0, 1, "", "degrees"], [404, 0, 1, "", "deserialize"], [405, 0, 1, "", "diff"], [406, 0, 1, "", "dot"], [407, 0, 1, "", "drop_nans"], [408, 0, 1, "", "drop_nulls"], [453, 0, 1, "", "entropy"], [454, 0, 1, "", "eq"], [455, 0, 1, "", "eq_missing"], [456, 0, 1, "", "ewm_mean"], [457, 0, 1, "", "ewm_mean_by"], [458, 0, 1, "", "ewm_std"], [459, 0, 1, "", "ewm_var"], [460, 0, 1, "", "exclude"], [461, 0, 1, "", "exp"], [462, 0, 1, "", "explode"], [463, 0, 1, "", "extend_constant"], [464, 0, 1, "", "fill_nan"], [465, 0, 1, "", "fill_null"], [466, 0, 1, "", "filter"], [467, 0, 1, "", "first"], [468, 0, 1, "", "flatten"], [469, 0, 1, "", "floor"], [470, 0, 1, "", "floordiv"], [471, 0, 1, "", "forward_fill"], [472, 0, 1, "", "from_json"], [473, 0, 1, "", "gather"], [474, 0, 1, "", "gather_every"], [475, 0, 1, "", "ge"], [476, 0, 1, "", "get"], [477, 0, 1, "", "gt"], [478, 0, 1, "", "has_nulls"], [479, 0, 1, "", "hash"], [480, 0, 1, "", "head"], [481, 0, 1, "", "hist"], [482, 0, 1, "", "implode"], [483, 0, 1, "", "inspect"], [484, 0, 1, "", "interpolate"], [485, 0, 1, "", "interpolate_by"], [486, 0, 1, "", "is_between"], [487, 0, 1, "", "is_duplicated"], [488, 0, 1, "", "is_finite"], [489, 0, 1, "", "is_first_distinct"], [490, 0, 1, "", "is_in"], [491, 0, 1, "", "is_infinite"], [492, 0, 1, "", "is_last_distinct"], [493, 0, 1, "", "is_nan"], [494, 0, 1, "", "is_not_nan"], [495, 0, 1, "", "is_not_null"], [496, 0, 1, "", "is_null"], [497, 0, 1, "", "is_unique"], [498, 0, 1, "", "kurtosis"], [499, 0, 1, "", "last"], [500, 0, 1, "", "le"], [501, 0, 1, "", "len"], [502, 0, 1, "", "limit"], [543, 0, 1, "", "log"], [544, 0, 1, "", "log10"], [545, 0, 1, "", "log1p"], [546, 0, 1, "", "lower_bound"], [547, 0, 1, "", "lt"], [548, 0, 1, "", "map_batches"], [549, 0, 1, "", "map_elements"], [550, 0, 1, "", "max"], [551, 0, 1, "", "mean"], [552, 0, 1, "", "median"], [568, 0, 1, "", "min"], [569, 0, 1, "", "mod"], [570, 0, 1, "", "mode"], [571, 0, 1, "", "mul"], [572, 0, 1, "", "n_unique"], [582, 0, 1, "", "nan_max"], [583, 0, 1, "", "nan_min"], [584, 0, 1, "", "ne"], [585, 0, 1, "", "ne_missing"], [586, 0, 1, "", "neg"], [587, 0, 1, "", "not_"], [588, 0, 1, "", "null_count"], [589, 0, 1, "", "or_"], [590, 0, 1, "", "over"], [591, 0, 1, "", "pct_change"], [592, 0, 1, "", "peak_max"], [593, 0, 1, "", "peak_min"], [594, 0, 1, "", "pipe"], [595, 0, 1, "", "pow"], [596, 0, 1, "", "product"], [597, 0, 1, "", "qcut"], [598, 0, 1, "", "quantile"], [599, 0, 1, "", "radians"], [600, 0, 1, "", "rank"], [601, 0, 1, "", "rechunk"], [602, 0, 1, "", "reinterpret"], [603, 0, 1, "", "repeat_by"], [604, 0, 1, "", "replace"], [605, 0, 1, "", "replace_strict"], [606, 0, 1, "", "reshape"], [607, 0, 1, "", "reverse"], [608, 0, 1, "", "rle"], [609, 0, 1, "", "rle_id"], [610, 0, 1, "", "rolling"], [611, 0, 1, "", "rolling_map"], [612, 0, 1, "", "rolling_max"], [613, 0, 1, "", "rolling_max_by"], [614, 0, 1, "", "rolling_mean"], [615, 0, 1, "", "rolling_mean_by"], [616, 0, 1, "", "rolling_median"], [617, 0, 1, "", "rolling_median_by"], [618, 0, 1, "", "rolling_min"], [619, 0, 1, "", "rolling_min_by"], [620, 0, 1, "", "rolling_quantile"], [621, 0, 1, "", "rolling_quantile_by"], [622, 0, 1, "", "rolling_skew"], [623, 0, 1, "", "rolling_std"], [624, 0, 1, "", "rolling_std_by"], [625, 0, 1, "", "rolling_sum"], [626, 0, 1, "", "rolling_sum_by"], [627, 0, 1, "", "rolling_var"], [628, 0, 1, "", "rolling_var_by"], [629, 0, 1, "", "round"], [630, 0, 1, "", "round_sig_figs"], [631, 0, 1, "", "sample"], [632, 0, 1, "", "search_sorted"], [633, 0, 1, "", "set_sorted"], [634, 0, 1, "", "shift"], [635, 0, 1, "", "shrink_dtype"], [636, 0, 1, "", "shuffle"], [637, 0, 1, "", "sign"], [638, 0, 1, "", "sin"], [639, 0, 1, "", "sinh"], [640, 0, 1, "", "skew"], [641, 0, 1, "", "slice"], [642, 0, 1, "", "sort"], [643, 0, 1, "", "sort_by"], [644, 0, 1, "", "sqrt"], [645, 0, 1, "", "std"], [698, 0, 1, "", "sub"], [699, 0, 1, "", "sum"], [700, 0, 1, "", "tail"], [701, 0, 1, "", "tan"], [702, 0, 1, "", "tanh"], [703, 0, 1, "", "to_physical"], [704, 0, 1, "", "top_k"], [705, 0, 1, "", "top_k_by"], [706, 0, 1, "", "truediv"], [707, 0, 1, "", "unique"], [708, 0, 1, "", "unique_counts"], [709, 0, 1, "", "upper_bound"], [710, 0, 1, "", "value_counts"], [711, 0, 1, "", "var"], [712, 0, 1, "", "where"], [713, 0, 1, "", "xor"]], "polars.Expr.arr": [[345, 0, 1, "", "all"], [346, 0, 1, "", "any"], [347, 0, 1, "", "arg_max"], [348, 0, 1, "", "arg_min"], [349, 0, 1, "", "contains"], [350, 0, 1, "", "count_matches"], [351, 0, 1, "", "explode"], [352, 0, 1, "", "first"], [353, 0, 1, "", "get"], [354, 0, 1, "", "join"], [355, 0, 1, "", "last"], [356, 0, 1, "", "max"], [357, 0, 1, "", "median"], [358, 0, 1, "", "min"], [359, 0, 1, "", "n_unique"], [360, 0, 1, "", "reverse"], [361, 0, 1, "", "shift"], [362, 0, 1, "", "sort"], [363, 0, 1, "", "std"], [364, 0, 1, "", "sum"], [365, 0, 1, "", "to_list"], [366, 0, 1, "", "to_struct"], [367, 0, 1, "", "unique"], [368, 0, 1, "", "var"]], "polars.Expr.bin": [[370, 0, 1, "", "contains"], [371, 0, 1, "", "decode"], [372, 0, 1, "", "encode"], [373, 0, 1, "", "ends_with"], [374, 0, 1, "", "size"], [375, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[388, 0, 1, "", "get_categories"]], "polars.Expr.dt": [[409, 0, 1, "", "add_business_days"], [410, 0, 1, "", "base_utc_offset"], [411, 0, 1, "", "cast_time_unit"], [412, 0, 1, "", "century"], [413, 0, 1, "", "combine"], [414, 0, 1, "", "convert_time_zone"], [415, 0, 1, "", "date"], [416, 0, 1, "", "datetime"], [417, 0, 1, "", "day"], [418, 0, 1, "", "dst_offset"], [419, 0, 1, "", "epoch"], [420, 0, 1, "", "hour"], [421, 0, 1, "", "is_leap_year"], [422, 0, 1, "", "iso_year"], [423, 0, 1, "", "microsecond"], [424, 0, 1, "", "millennium"], [425, 0, 1, "", "millisecond"], [426, 0, 1, "", "minute"], [427, 0, 1, "", "month"], [428, 0, 1, "", "month_end"], [429, 0, 1, "", "month_start"], [430, 0, 1, "", "nanosecond"], [431, 0, 1, "", "offset_by"], [432, 0, 1, "", "ordinal_day"], [433, 0, 1, "", "quarter"], [434, 0, 1, "", "replace_time_zone"], [435, 0, 1, "", "round"], [436, 0, 1, "", "second"], [437, 0, 1, "", "strftime"], [438, 0, 1, "", "time"], [439, 0, 1, "", "timestamp"], [440, 0, 1, "", "to_string"], [441, 0, 1, "", "total_days"], [442, 0, 1, "", "total_hours"], [443, 0, 1, "", "total_microseconds"], [444, 0, 1, "", "total_milliseconds"], [445, 0, 1, "", "total_minutes"], [446, 0, 1, "", "total_nanoseconds"], [447, 0, 1, "", "total_seconds"], [448, 0, 1, "", "truncate"], [449, 0, 1, "", "week"], [450, 0, 1, "", "weekday"], [451, 0, 1, "", "with_time_unit"], [452, 0, 1, "", "year"]], "polars.Expr.list": [[503, 0, 1, "", "all"], [504, 0, 1, "", "any"], [505, 0, 1, "", "arg_max"], [506, 0, 1, "", "arg_min"], [507, 0, 1, "", "concat"], [508, 0, 1, "", "contains"], [509, 0, 1, "", "count_matches"], [510, 0, 1, "", "diff"], [511, 0, 1, "", "drop_nulls"], [512, 0, 1, "", "eval"], [513, 0, 1, "", "explode"], [514, 0, 1, "", "first"], [515, 0, 1, "", "gather"], [516, 0, 1, "", "gather_every"], [517, 0, 1, "", "get"], [518, 0, 1, "", "head"], [519, 0, 1, "", "join"], [520, 0, 1, "", "last"], [521, 0, 1, "", "len"], [522, 0, 1, "", "max"], [523, 0, 1, "", "mean"], [524, 0, 1, "", "median"], [525, 0, 1, "", "min"], [526, 0, 1, "", "n_unique"], [527, 0, 1, "", "reverse"], [528, 0, 1, "", "sample"], [529, 0, 1, "", "set_difference"], [530, 0, 1, "", "set_intersection"], [531, 0, 1, "", "set_symmetric_difference"], [532, 0, 1, "", "set_union"], [533, 0, 1, "", "shift"], [534, 0, 1, "", "slice"], [535, 0, 1, "", "sort"], [536, 0, 1, "", "std"], [537, 0, 1, "", "sum"], [538, 0, 1, "", "tail"], [539, 0, 1, "", "to_array"], [540, 0, 1, "", "to_struct"], [541, 0, 1, "", "unique"], [542, 0, 1, "", "var"]], "polars.Expr.meta": [[553, 0, 1, "", "eq"], [554, 0, 1, "", "has_multiple_outputs"], [555, 0, 1, "", "is_column"], [556, 0, 1, "", "is_column_selection"], [557, 0, 1, "", "is_literal"], [558, 0, 1, "", "is_regex_projection"], [559, 0, 1, "", "ne"], [560, 0, 1, "", "output_name"], [561, 0, 1, "", "pop"], [562, 0, 1, "", "root_names"], [563, 0, 1, "", "serialize"], [564, 0, 1, "", "show_graph"], [565, 0, 1, "", "tree_format"], [566, 0, 1, "", "undo_aliases"], [567, 0, 1, "", "write_json"]], "polars.Expr.name": [[573, 0, 1, "", "keep"], [574, 0, 1, "", "map"], [575, 0, 1, "", "map_fields"], [576, 0, 1, "", "prefix"], [577, 0, 1, "", "prefix_fields"], [578, 0, 1, "", "suffix"], [579, 0, 1, "", "suffix_fields"], [580, 0, 1, "", "to_lowercase"], [581, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[646, 0, 1, "", "concat"], [647, 0, 1, "", "contains"], [648, 0, 1, "", "contains_any"], [649, 0, 1, "", "count_matches"], [650, 0, 1, "", "decode"], [651, 0, 1, "", "encode"], [652, 0, 1, "", "ends_with"], [653, 0, 1, "", "escape_regex"], [654, 0, 1, "", "explode"], [655, 0, 1, "", "extract"], [656, 0, 1, "", "extract_all"], [657, 0, 1, "", "extract_groups"], [658, 0, 1, "", "extract_many"], [659, 0, 1, "", "find"], [660, 0, 1, "", "head"], [661, 0, 1, "", "join"], [662, 0, 1, "", "json_decode"], [663, 0, 1, "", "json_path_match"], [664, 0, 1, "", "len_bytes"], [665, 0, 1, "", "len_chars"], [666, 0, 1, "", "pad_end"], [667, 0, 1, "", "pad_start"], [668, 0, 1, "", "replace"], [669, 0, 1, "", "replace_all"], [670, 0, 1, "", "replace_many"], [671, 0, 1, "", "reverse"], [672, 0, 1, "", "slice"], [673, 0, 1, "", "split"], [674, 0, 1, "", "split_exact"], [675, 0, 1, "", "splitn"], [676, 0, 1, "", "starts_with"], [677, 0, 1, "", "strip_chars"], [678, 0, 1, "", "strip_chars_end"], [679, 0, 1, "", "strip_chars_start"], [680, 0, 1, "", "strip_prefix"], [681, 0, 1, "", "strip_suffix"], [682, 0, 1, "", "strptime"], [683, 0, 1, "", "tail"], [684, 0, 1, "", "to_date"], [685, 0, 1, "", "to_datetime"], [686, 0, 1, "", "to_decimal"], [687, 0, 1, "", "to_integer"], [688, 0, 1, "", "to_lowercase"], [689, 0, 1, "", "to_time"], [690, 0, 1, "", "to_titlecase"], [691, 0, 1, "", "to_uppercase"], [692, 0, 1, "", "zfill"]], "polars.Expr.struct": [[693, 0, 1, "", "field"], [694, 0, 1, "", "json_encode"], [695, 0, 1, "", "rename_fields"], [696, 0, 1, "", "unnest"], [697, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[811, 0, 1, "", "approx_n_unique"], [812, 0, 1, "", "bottom_k"], [813, 0, 1, "", "cache"], [814, 0, 1, "", "cast"], [815, 0, 1, "", "clear"], [816, 0, 1, "", "clone"], [817, 0, 1, "", "collect"], [818, 0, 1, "", "collect_async"], [819, 0, 1, "", "collect_schema"], [820, 2, 1, "", "columns"], [821, 0, 1, "", "count"], [822, 0, 1, "", "describe"], [823, 0, 1, "", "deserialize"], [824, 0, 1, "", "drop"], [825, 0, 1, "", "drop_nulls"], [826, 2, 1, "", "dtypes"], [827, 0, 1, "", "explain"], [828, 0, 1, "", "explode"], [829, 0, 1, "", "fill_nan"], [830, 0, 1, "", "fill_null"], [831, 0, 1, "", "filter"], [832, 0, 1, "", "first"], [833, 0, 1, "", "gather_every"], [834, 0, 1, "", "group_by"], [835, 0, 1, "", "group_by_dynamic"], [836, 0, 1, "", "head"], [837, 0, 1, "", "inspect"], [838, 0, 1, "", "interpolate"], [839, 0, 1, "", "join"], [840, 0, 1, "", "join_asof"], [841, 0, 1, "", "join_where"], [842, 0, 1, "", "last"], [843, 0, 1, "", "lazy"], [844, 0, 1, "", "limit"], [845, 0, 1, "", "map_batches"], [846, 0, 1, "", "max"], [847, 0, 1, "", "mean"], [848, 0, 1, "", "median"], [849, 0, 1, "", "melt"], [850, 0, 1, "", "merge_sorted"], [851, 0, 1, "", "min"], [852, 0, 1, "", "null_count"], [853, 0, 1, "", "pipe"], [854, 0, 1, "", "profile"], [855, 0, 1, "", "quantile"], [856, 0, 1, "", "rename"], [857, 0, 1, "", "reverse"], [858, 0, 1, "", "rolling"], [859, 2, 1, "", "schema"], [860, 0, 1, "", "select"], [861, 0, 1, "", "select_seq"], [862, 0, 1, "", "serialize"], [863, 0, 1, "", "set_sorted"], [864, 0, 1, "", "shift"], [865, 0, 1, "", "show_graph"], [45, 0, 1, "", "sink_csv"], [46, 0, 1, "", "sink_ipc"], [47, 0, 1, "", "sink_ndjson"], [48, 0, 1, "", "sink_parquet"], [866, 0, 1, "", "slice"], [867, 0, 1, "", "sort"], [868, 0, 1, "", "sql"], [869, 0, 1, "", "std"], [870, 0, 1, "", "sum"], [871, 0, 1, "", "tail"], [872, 0, 1, "", "top_k"], [873, 0, 1, "", "unique"], [874, 0, 1, "", "unnest"], [875, 0, 1, "", "unpivot"], [876, 0, 1, "", "update"], [877, 0, 1, "", "var"], [878, 2, 1, "", "width"], [879, 0, 1, "", "with_columns"], [880, 0, 1, "", "with_columns_seq"], [881, 0, 1, "", "with_context"], [882, 0, 1, "", "with_row_count"], [883, 0, 1, "", "with_row_index"]], "polars.SQLContext": [[1323, 0, 1, "", "__enter__"], [1323, 0, 1, "", "__exit__"], [1323, 0, 1, "", "__init__"], [1304, 0, 1, "", "execute"], [1305, 0, 1, "", "execute_global"], [1306, 0, 1, "", "register"], [1307, 0, 1, "", "register_globals"], [1308, 0, 1, "", "register_many"], [1309, 0, 1, "", "tables"], [1310, 0, 1, "", "unregister"]], "polars.Series": [[917, 0, 1, "", "__array__"], [918, 0, 1, "", "__arrow_c_stream__"], [919, 0, 1, "", "__getitem__"], [920, 0, 1, "", "abs"], [921, 0, 1, "", "alias"], [922, 0, 1, "", "all"], [923, 0, 1, "", "any"], [924, 0, 1, "", "append"], [925, 0, 1, "", "approx_n_unique"], [926, 0, 1, "", "arccos"], [927, 0, 1, "", "arccosh"], [928, 0, 1, "", "arcsin"], [929, 0, 1, "", "arcsinh"], [930, 0, 1, "", "arctan"], [931, 0, 1, "", "arctanh"], [932, 0, 1, "", "arg_max"], [933, 0, 1, "", "arg_min"], [934, 0, 1, "", "arg_sort"], [935, 0, 1, "", "arg_true"], [936, 0, 1, "", "arg_unique"], [967, 0, 1, "", "bitwise_and"], [968, 0, 1, "", "bitwise_count_ones"], [969, 0, 1, "", "bitwise_count_zeros"], [970, 0, 1, "", "bitwise_leading_ones"], [971, 0, 1, "", "bitwise_leading_zeros"], [972, 0, 1, "", "bitwise_or"], [973, 0, 1, "", "bitwise_trailing_ones"], [974, 0, 1, "", "bitwise_trailing_zeros"], [975, 0, 1, "", "bitwise_xor"], [976, 0, 1, "", "bottom_k"], [977, 0, 1, "", "cast"], [982, 0, 1, "", "cbrt"], [983, 0, 1, "", "ceil"], [984, 0, 1, "", "chunk_lengths"], [985, 0, 1, "", "clear"], [986, 0, 1, "", "clip"], [987, 0, 1, "", "clone"], [988, 0, 1, "", "cos"], [989, 0, 1, "", "cosh"], [990, 0, 1, "", "cot"], [991, 0, 1, "", "count"], [992, 0, 1, "", "cum_count"], [993, 0, 1, "", "cum_max"], [994, 0, 1, "", "cum_min"], [995, 0, 1, "", "cum_prod"], [996, 0, 1, "", "cum_sum"], [997, 0, 1, "", "cumulative_eval"], [998, 0, 1, "", "cut"], [999, 0, 1, "", "describe"], [1000, 0, 1, "", "diff"], [1001, 0, 1, "", "dot"], [1002, 0, 1, "", "drop_nans"], [1003, 0, 1, "", "drop_nulls"], [1052, 2, 1, "", "dtype"], [1053, 0, 1, "", "entropy"], [1054, 0, 1, "", "eq"], [1055, 0, 1, "", "eq_missing"], [1056, 0, 1, "", "equals"], [1057, 0, 1, "", "estimated_size"], [1058, 0, 1, "", "ewm_mean"], [1059, 0, 1, "", "ewm_mean_by"], [1060, 0, 1, "", "ewm_std"], [1061, 0, 1, "", "ewm_var"], [1062, 0, 1, "", "exp"], [1063, 0, 1, "", "explode"], [1064, 0, 1, "", "extend"], [1065, 0, 1, "", "extend_constant"], [1066, 0, 1, "", "fill_nan"], [1067, 0, 1, "", "fill_null"], [1068, 0, 1, "", "filter"], [1069, 0, 1, "", "first"], [1070, 2, 1, "", "flags"], [1071, 0, 1, "", "floor"], [1072, 0, 1, "", "gather"], [1073, 0, 1, "", "gather_every"], [1074, 0, 1, "", "ge"], [1075, 0, 1, "", "get_chunks"], [1076, 0, 1, "", "gt"], [1077, 0, 1, "", "has_nulls"], [1078, 0, 1, "", "has_validity"], [1079, 0, 1, "", "hash"], [1080, 0, 1, "", "head"], [1081, 0, 1, "", "hist"], [1082, 0, 1, "", "implode"], [1083, 0, 1, "", "interpolate"], [1084, 0, 1, "", "interpolate_by"], [1085, 0, 1, "", "is_between"], [1086, 0, 1, "", "is_duplicated"], [1087, 0, 1, "", "is_empty"], [1088, 0, 1, "", "is_finite"], [1089, 0, 1, "", "is_first_distinct"], [1090, 0, 1, "", "is_in"], [1091, 0, 1, "", "is_infinite"], [1092, 0, 1, "", "is_last_distinct"], [1093, 0, 1, "", "is_nan"], [1094, 0, 1, "", "is_not_nan"], [1095, 0, 1, "", "is_not_null"], [1096, 0, 1, "", "is_null"], [1097, 0, 1, "", "is_sorted"], [1098, 0, 1, "", "is_unique"], [1099, 0, 1, "", "item"], [1100, 0, 1, "", "kurtosis"], [1101, 0, 1, "", "last"], [1102, 0, 1, "", "le"], [1103, 0, 1, "", "len"], [1104, 0, 1, "", "limit"], [1145, 0, 1, "", "log"], [1146, 0, 1, "", "log10"], [1147, 0, 1, "", "log1p"], [1148, 0, 1, "", "lower_bound"], [1149, 0, 1, "", "lt"], [1150, 0, 1, "", "map_elements"], [1151, 0, 1, "", "max"], [1152, 0, 1, "", "mean"], [1153, 0, 1, "", "median"], [1154, 0, 1, "", "min"], [1155, 0, 1, "", "mode"], [1156, 0, 1, "", "n_chunks"], [1157, 0, 1, "", "n_unique"], [1158, 2, 1, "", "name"], [1159, 0, 1, "", "nan_max"], [1160, 0, 1, "", "nan_min"], [1161, 0, 1, "", "ne"], [1162, 0, 1, "", "ne_missing"], [1163, 0, 1, "", "new_from_index"], [1164, 0, 1, "", "not_"], [1165, 0, 1, "", "null_count"], [1166, 0, 1, "", "pct_change"], [1167, 0, 1, "", "peak_max"], [1168, 0, 1, "", "peak_min"], [1300, 2, 1, "", "plot"], [1169, 0, 1, "", "pow"], [1170, 0, 1, "", "product"], [1171, 0, 1, "", "qcut"], [1172, 0, 1, "", "quantile"], [1173, 0, 1, "", "rank"], [1174, 0, 1, "", "rechunk"], [1175, 0, 1, "", "reinterpret"], [1176, 0, 1, "", "rename"], [1177, 0, 1, "", "replace"], [1178, 0, 1, "", "replace_strict"], [1179, 0, 1, "", "reshape"], [1180, 0, 1, "", "reverse"], [1181, 0, 1, "", "rle"], [1182, 0, 1, "", "rle_id"], [1183, 0, 1, "", "rolling_map"], [1184, 0, 1, "", "rolling_max"], [1185, 0, 1, "", "rolling_mean"], [1186, 0, 1, "", "rolling_median"], [1187, 0, 1, "", "rolling_min"], [1188, 0, 1, "", "rolling_quantile"], [1189, 0, 1, "", "rolling_skew"], [1190, 0, 1, "", "rolling_std"], [1191, 0, 1, "", "rolling_sum"], [1192, 0, 1, "", "rolling_var"], [1193, 0, 1, "", "round"], [1194, 0, 1, "", "round_sig_figs"], [1195, 0, 1, "", "sample"], [1196, 0, 1, "", "scatter"], [1197, 0, 1, "", "search_sorted"], [1198, 0, 1, "", "set"], [1199, 0, 1, "", "set_sorted"], [1200, 2, 1, "", "shape"], [1201, 0, 1, "", "shift"], [1202, 0, 1, "", "shrink_dtype"], [1203, 0, 1, "", "shrink_to_fit"], [1204, 0, 1, "", "shuffle"], [1205, 0, 1, "", "sign"], [1206, 0, 1, "", "sin"], [1207, 0, 1, "", "sinh"], [1208, 0, 1, "", "skew"], [1209, 0, 1, "", "slice"], [1210, 0, 1, "", "sort"], [1211, 0, 1, "", "sqrt"], [1212, 0, 1, "", "std"], [1266, 0, 1, "", "sum"], [1267, 0, 1, "", "tail"], [1268, 0, 1, "", "tan"], [1269, 0, 1, "", "tanh"], [1270, 0, 1, "", "to_arrow"], [1271, 0, 1, "", "to_dummies"], [1272, 0, 1, "", "to_frame"], [1273, 0, 1, "", "to_init_repr"], [1274, 0, 1, "", "to_jax"], [1275, 0, 1, "", "to_list"], [1276, 0, 1, "", "to_numpy"], [1277, 0, 1, "", "to_pandas"], [1278, 0, 1, "", "to_physical"], [1279, 0, 1, "", "to_torch"], [1280, 0, 1, "", "top_k"], [1281, 0, 1, "", "unique"], [1282, 0, 1, "", "unique_counts"], [1283, 0, 1, "", "upper_bound"], [1284, 0, 1, "", "value_counts"], [1285, 0, 1, "", "var"], [1286, 0, 1, "", "zip_with"]], "polars.Series.arr": [[937, 0, 1, "", "all"], [938, 0, 1, "", "any"], [939, 0, 1, "", "arg_max"], [940, 0, 1, "", "arg_min"], [941, 0, 1, "", "contains"], [942, 0, 1, "", "count_matches"], [943, 0, 1, "", "explode"], [944, 0, 1, "", "first"], [945, 0, 1, "", "get"], [946, 0, 1, "", "join"], [947, 0, 1, "", "last"], [948, 0, 1, "", "max"], [949, 0, 1, "", "median"], [950, 0, 1, "", "min"], [951, 0, 1, "", "n_unique"], [952, 0, 1, "", "reverse"], [953, 0, 1, "", "shift"], [954, 0, 1, "", "sort"], [955, 0, 1, "", "std"], [956, 0, 1, "", "sum"], [957, 0, 1, "", "to_list"], [958, 0, 1, "", "to_struct"], [959, 0, 1, "", "unique"], [960, 0, 1, "", "var"]], "polars.Series.bin": [[961, 0, 1, "", "contains"], [962, 0, 1, "", "decode"], [963, 0, 1, "", "encode"], [964, 0, 1, "", "ends_with"], [965, 0, 1, "", "size"], [966, 0, 1, "", "starts_with"]], "polars.Series.cat": [[978, 0, 1, "", "get_categories"], [979, 0, 1, "", "is_local"], [980, 0, 1, "", "to_local"], [981, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1004, 0, 1, "", "add_business_days"], [1005, 0, 1, "", "base_utc_offset"], [1006, 0, 1, "", "cast_time_unit"], [1007, 0, 1, "", "century"], [1008, 0, 1, "", "combine"], [1009, 0, 1, "", "convert_time_zone"], [1010, 0, 1, "", "date"], [1011, 0, 1, "", "datetime"], [1012, 0, 1, "", "day"], [1013, 0, 1, "", "dst_offset"], [1014, 0, 1, "", "epoch"], [1015, 0, 1, "", "hour"], [1016, 0, 1, "", "is_leap_year"], [1017, 0, 1, "", "iso_year"], [1018, 0, 1, "", "max"], [1019, 0, 1, "", "mean"], [1020, 0, 1, "", "median"], [1021, 0, 1, "", "microsecond"], [1022, 0, 1, "", "millennium"], [1023, 0, 1, "", "millisecond"], [1024, 0, 1, "", "min"], [1025, 0, 1, "", "minute"], [1026, 0, 1, "", "month"], [1027, 0, 1, "", "month_end"], [1028, 0, 1, "", "month_start"], [1029, 0, 1, "", "nanosecond"], [1030, 0, 1, "", "offset_by"], [1031, 0, 1, "", "ordinal_day"], [1032, 0, 1, "", "quarter"], [1033, 0, 1, "", "replace_time_zone"], [1034, 0, 1, "", "round"], [1035, 0, 1, "", "second"], [1036, 0, 1, "", "strftime"], [1037, 0, 1, "", "time"], [1038, 0, 1, "", "timestamp"], [1039, 0, 1, "", "to_string"], [1040, 0, 1, "", "total_days"], [1041, 0, 1, "", "total_hours"], [1042, 0, 1, "", "total_microseconds"], [1043, 0, 1, "", "total_milliseconds"], [1044, 0, 1, "", "total_minutes"], [1045, 0, 1, "", "total_nanoseconds"], [1046, 0, 1, "", "total_seconds"], [1047, 0, 1, "", "truncate"], [1048, 0, 1, "", "week"], [1049, 0, 1, "", "weekday"], [1050, 0, 1, "", "with_time_unit"], [1051, 0, 1, "", "year"]], "polars.Series.list": [[1105, 0, 1, "", "all"], [1106, 0, 1, "", "any"], [1107, 0, 1, "", "arg_max"], [1108, 0, 1, "", "arg_min"], [1109, 0, 1, "", "concat"], [1110, 0, 1, "", "contains"], [1111, 0, 1, "", "count_matches"], [1112, 0, 1, "", "diff"], [1113, 0, 1, "", "drop_nulls"], [1114, 0, 1, "", "eval"], [1115, 0, 1, "", "explode"], [1116, 0, 1, "", "first"], [1117, 0, 1, "", "gather"], [1118, 0, 1, "", "gather_every"], [1119, 0, 1, "", "get"], [1120, 0, 1, "", "head"], [1121, 0, 1, "", "join"], [1122, 0, 1, "", "last"], [1123, 0, 1, "", "len"], [1124, 0, 1, "", "max"], [1125, 0, 1, "", "mean"], [1126, 0, 1, "", "median"], [1127, 0, 1, "", "min"], [1128, 0, 1, "", "n_unique"], [1129, 0, 1, "", "reverse"], [1130, 0, 1, "", "sample"], [1131, 0, 1, "", "set_difference"], [1132, 0, 1, "", "set_intersection"], [1133, 0, 1, "", "set_symmetric_difference"], [1134, 0, 1, "", "set_union"], [1135, 0, 1, "", "shift"], [1136, 0, 1, "", "slice"], [1137, 0, 1, "", "sort"], [1138, 0, 1, "", "std"], [1139, 0, 1, "", "sum"], [1140, 0, 1, "", "tail"], [1141, 0, 1, "", "to_array"], [1142, 0, 1, "", "to_struct"], [1143, 0, 1, "", "unique"], [1144, 0, 1, "", "var"]], "polars.Series.str": [[1213, 0, 1, "", "concat"], [1214, 0, 1, "", "contains"], [1215, 0, 1, "", "contains_any"], [1216, 0, 1, "", "count_matches"], [1217, 0, 1, "", "decode"], [1218, 0, 1, "", "encode"], [1219, 0, 1, "", "ends_with"], [1220, 0, 1, "", "escape_regex"], [1221, 0, 1, "", "explode"], [1222, 0, 1, "", "extract"], [1223, 0, 1, "", "extract_all"], [1224, 0, 1, "", "extract_groups"], [1225, 0, 1, "", "extract_many"], [1226, 0, 1, "", "find"], [1227, 0, 1, "", "head"], [1228, 0, 1, "", "join"], [1229, 0, 1, "", "json_decode"], [1230, 0, 1, "", "json_path_match"], [1231, 0, 1, "", "len_bytes"], [1232, 0, 1, "", "len_chars"], [1233, 0, 1, "", "pad_end"], [1234, 0, 1, "", "pad_start"], [1235, 0, 1, "", "replace"], [1236, 0, 1, "", "replace_all"], [1237, 0, 1, "", "replace_many"], [1238, 0, 1, "", "reverse"], [1239, 0, 1, "", "slice"], [1240, 0, 1, "", "split"], [1241, 0, 1, "", "split_exact"], [1242, 0, 1, "", "splitn"], [1243, 0, 1, "", "starts_with"], [1244, 0, 1, "", "strip_chars"], [1245, 0, 1, "", "strip_chars_end"], [1246, 0, 1, "", "strip_chars_start"], [1247, 0, 1, "", "strip_prefix"], [1248, 0, 1, "", "strip_suffix"], [1249, 0, 1, "", "strptime"], [1250, 0, 1, "", "tail"], [1251, 0, 1, "", "to_date"], [1252, 0, 1, "", "to_datetime"], [1253, 0, 1, "", "to_decimal"], [1254, 0, 1, "", "to_integer"], [1255, 0, 1, "", "to_lowercase"], [1256, 0, 1, "", "to_time"], [1257, 0, 1, "", "to_titlecase"], [1258, 0, 1, "", "to_uppercase"], [1259, 0, 1, "", "zfill"]], "polars.Series.struct": [[1260, 0, 1, "", "field"], [1261, 3, 1, "", "fields"], [1262, 0, 1, "", "json_encode"], [1263, 0, 1, "", "rename_fields"], [1264, 3, 1, "", "schema"], [1265, 0, 1, "", "unnest"]], "polars.StringCache": [[49, 0, 1, "", "__init__"]], "polars.api": [[51, 4, 1, "", "register_dataframe_namespace"], [52, 4, 1, "", "register_expr_namespace"], [53, 4, 1, "", "register_lazyframe_namespace"], [54, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[295, 0, 1, "", "__iter__"], [296, 0, 1, "", "agg"], [297, 0, 1, "", "all"], [298, 0, 1, "", "count"], [299, 0, 1, "", "first"], [300, 0, 1, "", "head"], [301, 0, 1, "", "last"], [302, 0, 1, "", "len"], [303, 0, 1, "", "map_groups"], [304, 0, 1, "", "max"], [305, 0, 1, "", "mean"], [306, 0, 1, "", "median"], [307, 0, 1, "", "min"], [308, 0, 1, "", "n_unique"], [309, 0, 1, "", "quantile"], [310, 0, 1, "", "sum"], [311, 0, 1, "", "tail"]], "polars.datatypes": [[59, 1, 1, "", "Array"], [60, 1, 1, "", "Binary"], [61, 1, 1, "", "Boolean"], [62, 1, 1, "", "Categorical"], [63, 1, 1, "", "DataType"], [64, 1, 1, "", "Date"], [65, 1, 1, "", "Datetime"], [66, 1, 1, "", "Decimal"], [67, 1, 1, "", "Duration"], [68, 1, 1, "", "Enum"], [69, 1, 1, "", "Float32"], [70, 1, 1, "", "Float64"], [71, 1, 1, "", "Int16"], [72, 1, 1, "", "Int32"], [73, 1, 1, "", "Int64"], [74, 1, 1, "", "Int8"], [75, 1, 1, "", "List"], [76, 1, 1, "", "Null"], [77, 1, 1, "", "Object"], [78, 1, 1, "", "String"], [79, 1, 1, "", "Struct"], [80, 1, 1, "", "Time"], [81, 1, 1, "", "UInt16"], [82, 1, 1, "", "UInt32"], [83, 1, 1, "", "UInt64"], [84, 1, 1, "", "UInt8"], [85, 1, 1, "", "Unknown"], [86, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[59, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[60, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[61, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[62, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[66, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[71, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[74, 0, 1, "", "__init__"]], "polars.datatypes.List": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[77, 0, 1, "", "__init__"]], "polars.datatypes.String": [[78, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[79, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[80, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[81, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[82, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[83, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[84, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[85, 0, 1, "", "__init__"]], "polars.exceptions": [[90, 5, 1, "", "CategoricalRemappingWarning"], [91, 5, 1, "", "ChronoFormatWarning"], [92, 5, 1, "", "ColumnNotFoundError"], [93, 5, 1, "", "ComputeError"], [94, 5, 1, "", "CustomUFuncWarning"], [95, 5, 1, "", "DataOrientationWarning"], [96, 5, 1, "", "DuplicateError"], [97, 5, 1, "", "InvalidOperationError"], [98, 5, 1, "", "MapWithoutReturnDtypeWarning"], [99, 5, 1, "", "ModuleUpgradeRequiredError"], [100, 5, 1, "", "NoDataError"], [101, 5, 1, "", "NoRowsReturnedError"], [102, 5, 1, "", "OutOfBoundsError"], [103, 5, 1, "", "PanicException"], [104, 5, 1, "", "ParameterCollisionError"], [105, 5, 1, "", "PerformanceWarning"], [106, 5, 1, "", "PolarsError"], [107, 5, 1, "", "PolarsInefficientMapWarning"], [108, 5, 1, "", "PolarsWarning"], [109, 5, 1, "", "RowsError"], [110, 5, 1, "", "SQLInterfaceError"], [111, 5, 1, "", "SQLSyntaxError"], [112, 5, 1, "", "SchemaError"], [113, 5, 1, "", "SchemaFieldNotFoundError"], [114, 5, 1, "", "ShapeError"], [115, 5, 1, "", "StringCacheMismatchError"], [116, 5, 1, "", "StructFieldNotFoundError"], [117, 5, 1, "", "TooManyRowsReturnedError"], [118, 5, 1, "", "UnstableWarning"], [119, 5, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[129, 0, 1, "", "next_batches"]], "polars.lazyframe.engine_config": [[884, 1, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[884, 0, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[885, 0, 1, "", "agg"], [886, 0, 1, "", "all"], [887, 0, 1, "", "count"], [888, 0, 1, "", "first"], [889, 0, 1, "", "head"], [890, 0, 1, "", "last"], [891, 0, 1, "", "len"], [892, 0, 1, "", "map_groups"], [893, 0, 1, "", "max"], [894, 0, 1, "", "mean"], [895, 0, 1, "", "median"], [896, 0, 1, "", "min"], [897, 0, 1, "", "n_unique"], [898, 0, 1, "", "quantile"], [899, 0, 1, "", "sum"], [900, 0, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[901, 0, 1, "", "cancel"], [902, 0, 1, "", "fetch"], [903, 0, 1, "", "fetch_blocking"]], "polars.plugins": [[913, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[915, 4, 1, "", "all"], [915, 4, 1, "", "alpha"], [915, 4, 1, "", "alphanumeric"], [915, 4, 1, "", "binary"], [915, 4, 1, "", "boolean"], [915, 4, 1, "", "by_dtype"], [915, 4, 1, "", "by_index"], [915, 4, 1, "", "by_name"], [915, 4, 1, "", "categorical"], [915, 4, 1, "", "contains"], [915, 4, 1, "", "date"], [915, 4, 1, "", "datetime"], [915, 4, 1, "", "decimal"], [915, 4, 1, "", "digit"], [915, 4, 1, "", "duration"], [915, 4, 1, "", "ends_with"], [915, 4, 1, "", "exclude"], [915, 4, 1, "", "expand_selector"], [915, 4, 1, "", "first"], [915, 4, 1, "", "float"], [915, 4, 1, "", "integer"], [915, 4, 1, "", "is_selector"], [915, 4, 1, "", "last"], [915, 4, 1, "", "matches"], [915, 4, 1, "", "numeric"], [915, 4, 1, "", "signed_integer"], [915, 4, 1, "", "starts_with"], [915, 4, 1, "", "string"], [915, 4, 1, "", "temporal"], [915, 4, 1, "", "time"], [915, 4, 1, "", "unsigned_integer"]], "polars.testing": [[156, 4, 1, "", "assert_frame_equal"], [157, 4, 1, "", "assert_frame_not_equal"], [158, 4, 1, "", "assert_series_equal"], [159, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[160, 1, 1, "", "column"], [161, 4, 1, "", "columns"], [162, 4, 1, "", "create_list_strategy"], [163, 4, 1, "", "dataframes"], [164, 4, 1, "", "dtypes"], [165, 4, 1, "", "lists"], [166, 4, 1, "", "load_profile"], [167, 4, 1, "", "series"], [168, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[160, 0, 1, "", "__init__"]]}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "terms": {"": [1, 11, 36, 37, 38, 39, 44, 45, 54, 59, 79, 89, 91, 97, 120, 127, 133, 134, 135, 136, 138, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 167, 179, 180, 191, 194, 199, 202, 207, 208, 213, 219, 222, 223, 233, 240, 242, 247, 249, 252, 255, 256, 263, 272, 275, 280, 282, 283, 284, 285, 286, 291, 292, 317, 354, 386, 387, 414, 419, 437, 440, 460, 466, 470, 498, 519, 548, 549, 561, 570, 575, 582, 583, 590, 591, 602, 609, 643, 647, 655, 656, 657, 659, 660, 668, 669, 672, 673, 675, 682, 683, 684, 685, 689, 693, 695, 697, 705, 714, 715, 716, 717, 722, 728, 731, 734, 735, 744, 745, 747, 748, 754, 757, 758, 759, 760, 762, 764, 765, 767, 774, 776, 778, 779, 780, 786, 792, 796, 812, 814, 825, 834, 835, 840, 849, 860, 861, 867, 872, 873, 874, 875, 876, 879, 880, 892, 909, 914, 915, 919, 920, 921, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1012, 1013, 1014, 1016, 1018, 1019, 1020, 1022, 1023, 1024, 1027, 1028, 1031, 1034, 1035, 1036, 1039, 1047, 1049, 1050, 1051, 1052, 1057, 1058, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1075, 1077, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1295, 1300, 1304, 1308, 1311, 1318, 1319], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 37, 38, 39, 44, 48, 50, 51, 52, 54, 58, 66, 75, 121, 130, 133, 134, 135, 136, 138, 139, 141, 142, 143, 144, 145, 147, 150, 151, 152, 153, 155, 160, 161, 162, 163, 164, 165, 167, 170, 176, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 192, 193, 197, 198, 199, 201, 202, 205, 206, 207, 208, 209, 213, 214, 218, 220, 221, 222, 225, 227, 229, 230, 231, 232, 233, 236, 237, 238, 239, 242, 243, 244, 247, 249, 251, 252, 253, 254, 255, 262, 263, 264, 265, 267, 272, 273, 274, 275, 276, 277, 279, 281, 285, 287, 288, 291, 293, 294, 296, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 317, 320, 321, 325, 327, 328, 330, 334, 335, 336, 337, 338, 339, 342, 343, 344, 347, 348, 350, 353, 363, 366, 368, 374, 387, 389, 390, 392, 393, 394, 401, 402, 403, 407, 408, 409, 415, 416, 420, 423, 425, 426, 430, 436, 438, 443, 444, 446, 447, 451, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 469, 470, 472, 474, 475, 477, 479, 481, 484, 485, 488, 491, 493, 494, 495, 496, 498, 500, 505, 506, 509, 512, 515, 516, 517, 523, 524, 536, 540, 542, 543, 544, 545, 547, 548, 550, 551, 552, 556, 561, 564, 567, 568, 569, 571, 573, 582, 583, 584, 585, 586, 588, 589, 591, 594, 595, 597, 598, 599, 600, 604, 605, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 637, 638, 639, 640, 644, 645, 646, 649, 654, 655, 656, 659, 697, 698, 699, 701, 702, 703, 706, 711, 712, 714, 719, 720, 721, 722, 723, 724, 725, 726, 728, 730, 732, 739, 743, 746, 752, 753, 755, 758, 761, 762, 763, 767, 769, 770, 775, 782, 783, 784, 785, 786, 787, 792, 796, 811, 814, 815, 816, 819, 821, 822, 824, 826, 827, 829, 830, 831, 833, 834, 835, 838, 839, 843, 845, 848, 849, 852, 854, 855, 859, 860, 865, 867, 868, 869, 877, 879, 881, 882, 883, 885, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 909, 915, 919, 926, 927, 928, 929, 930, 931, 932, 934, 936, 939, 945, 955, 958, 960, 965, 977, 980, 982, 983, 985, 988, 989, 990, 997, 998, 999, 1001, 1002, 1003, 1004, 1011, 1015, 1019, 1020, 1021, 1023, 1025, 1029, 1035, 1042, 1043, 1045, 1046, 1050, 1053, 1058, 1059, 1060, 1061, 1066, 1071, 1073, 1078, 1079, 1081, 1083, 1084, 1088, 1091, 1093, 1094, 1095, 1096, 1099, 1100, 1107, 1108, 1111, 1114, 1117, 1118, 1119, 1125, 1126, 1138, 1142, 1144, 1145, 1146, 1147, 1148, 1152, 1153, 1159, 1160, 1166, 1169, 1171, 1172, 1173, 1177, 1178, 1182, 1183, 1185, 1186, 1188, 1189, 1190, 1192, 1193, 1194, 1195, 1197, 1205, 1206, 1207, 1208, 1211, 1212, 1213, 1216, 1221, 1222, 1223, 1226, 1230, 1235, 1268, 1269, 1271, 1274, 1276, 1277, 1278, 1279, 1283, 1285, 1295, 1300, 1304, 1310, 1312, 1313, 1314, 1317, 1318, 1320, 1321, 1323, 1325, 1326], "00": [27, 39, 65, 180, 187, 208, 287, 317, 410, 411, 414, 418, 428, 429, 431, 434, 435, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 613, 615, 617, 619, 621, 624, 626, 628, 682, 685, 689, 739, 740, 741, 742, 782, 783, 784, 796, 814, 822, 835, 909, 915, 1005, 1006, 1009, 1010, 1011, 1013, 1014, 1015, 1020, 1021, 1025, 1027, 1028, 1029, 1030, 1033, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1235, 1249, 1252, 1256, 1318], "000": [9, 10, 27, 39, 317, 1235, 1326], "0000": [279, 317, 1279, 1295, 1326], "000000": [371, 372, 650, 962, 963, 1217], "00000001": [11, 713, 796], "00000010": [713, 796], "00000011": [713, 796], "00000100": [713, 796], "00001000": [713, 796], "00001010": [713, 796], "00001011": [713, 796], "0000e": 11, "0000ff": [371, 372, 650, 962, 963, 1217], "0005": 915, "00050": 915, "001": [52, 692, 742, 1042, 1043, 1045, 1259], "002": [742, 1042, 1043, 1045], "005": [1053, 1295], "00prefix": 915, "00z": [682, 685, 1249, 1252], "01": [28, 50, 64, 65, 163, 180, 187, 206, 208, 223, 249, 287, 317, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 682, 684, 685, 689, 724, 736, 737, 738, 739, 740, 741, 742, 796, 814, 822, 835, 840, 858, 909, 915, 1004, 1006, 1008, 1009, 1010, 1011, 1014, 1015, 1020, 1021, 1025, 1027, 1028, 1029, 1030, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1249, 1251, 1252, 1256, 1318, 1321], "010": [9, 687, 1254], "01000": 28, "01000010": [713, 796], "01000110": [713, 796], "012": [630, 796, 1194, 1295], "0123": [692, 1259], "01234": [630, 796, 1194, 1295], "015625": [1169, 1295], "02": [50, 180, 187, 206, 208, 249, 287, 317, 409, 411, 413, 419, 428, 429, 431, 434, 439, 442, 445, 447, 451, 610, 613, 615, 617, 619, 621, 624, 626, 628, 629, 682, 684, 685, 689, 724, 736, 737, 738, 739, 740, 741, 742, 796, 814, 822, 835, 858, 909, 915, 958, 1006, 1008, 1010, 1011, 1014, 1015, 1020, 1021, 1025, 1027, 1028, 1029, 1033, 1034, 1037, 1038, 1041, 1044, 1046, 1047, 1142, 1249, 1251, 1252, 1256, 1318, 1319], "03": [50, 127, 133, 180, 208, 223, 249, 287, 317, 411, 413, 414, 419, 428, 429, 431, 434, 435, 437, 439, 440, 441, 442, 445, 447, 448, 451, 457, 470, 610, 613, 615, 617, 619, 621, 624, 626, 628, 684, 689, 736, 737, 738, 739, 740, 741, 742, 796, 814, 835, 840, 858, 909, 915, 1006, 1008, 1009, 1014, 1015, 1020, 1021, 1027, 1028, 1029, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1044, 1046, 1251, 1256], "037037": [1169, 1295], "04": [153, 180, 187, 208, 287, 317, 413, 414, 428, 429, 434, 435, 437, 440, 441, 442, 445, 447, 451, 613, 615, 617, 619, 621, 624, 626, 628, 682, 724, 736, 739, 740, 742, 796, 814, 822, 835, 909, 915, 1009, 1021, 1025, 1027, 1028, 1029, 1033, 1036, 1039, 1040, 1041, 1044, 1046, 1050, 1249, 1318], "047198": 1320, "05": [16, 153, 156, 157, 158, 159, 163, 180, 187, 287, 317, 409, 412, 413, 414, 415, 416, 420, 423, 424, 425, 426, 428, 429, 430, 434, 436, 437, 438, 440, 441, 724, 736, 737, 739, 740, 814, 822, 909, 915, 1008, 1009, 1010, 1011, 1033, 1034, 1036, 1037, 1039, 1040, 1047, 1318, 1319, 1321], "050545": 127, "0522623626787952": [1100, 1295], "0545": [1010, 1011, 1037], "06": [163, 180, 287, 317, 409, 413, 427, 433, 434, 435, 436, 448, 449, 736, 739, 814, 909, 915, 1004, 1033, 1034, 1047], "060": [415, 416, 420, 423, 425, 426, 430, 436, 438], "0601749420166": [194, 317], "06293300616044681": [1053, 1295], "07": [16, 133, 163, 187, 317, 409, 412, 413, 424, 434, 435, 448, 682, 736, 737, 739, 740, 748, 822, 909, 915, 1004, 1008, 1033, 1249, 1318, 1321], "071068": [187, 317, 822, 909], "08": [133, 156, 157, 158, 159, 187, 223, 249, 264, 317, 409, 413, 428, 429, 435, 610, 682, 740, 742, 796, 822, 840, 858, 909, 915, 1004, 1034, 1047, 1249, 1318, 1319], "085537": [1062, 1295], "09": [50, 133, 187, 249, 317, 409, 413, 428, 429, 590, 610, 686, 736, 737, 739, 784, 796, 822, 858, 909, 915, 1004, 1253], "090909": [591, 796], "094395": 1320, "098612": [545, 796, 1145, 1147, 1295, 1317], "0999": [412, 424], "0_": [39, 317], "0m": [418, 1013], "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 50, 51, 52, 53, 54, 58, 59, 75, 79, 92, 95, 96, 97, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133, 134, 137, 138, 139, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 163, 167, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 652, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 668, 669, 670, 674, 675, 676, 677, 678, 679, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 792, 796, 811, 812, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 909, 915, 919, 920, 921, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 965, 976, 977, 980, 982, 983, 984, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1075, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1103, 1104, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1222, 1224, 1225, 1226, 1228, 1229, 1230, 1231, 1232, 1235, 1236, 1237, 1241, 1242, 1259, 1260, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1295, 1300, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1323, 1324, 1325, 1326], "10": [13, 16, 17, 27, 34, 36, 38, 39, 40, 41, 44, 48, 50, 58, 127, 133, 134, 136, 147, 155, 182, 187, 196, 205, 206, 208, 210, 212, 213, 214, 219, 223, 226, 237, 241, 243, 247, 249, 255, 264, 268, 291, 296, 299, 301, 304, 305, 306, 307, 308, 309, 310, 317, 328, 332, 340, 341, 342, 344, 391, 397, 400, 405, 409, 410, 412, 413, 415, 416, 418, 420, 423, 424, 425, 426, 428, 429, 430, 434, 435, 436, 438, 448, 451, 457, 478, 479, 480, 484, 490, 502, 510, 516, 518, 524, 534, 536, 538, 542, 544, 560, 562, 573, 588, 590, 591, 594, 604, 605, 610, 641, 687, 697, 700, 713, 724, 725, 732, 737, 739, 740, 743, 746, 748, 750, 756, 757, 781, 784, 796, 817, 818, 822, 835, 836, 838, 840, 844, 853, 854, 858, 860, 870, 871, 879, 885, 888, 890, 893, 894, 895, 896, 897, 898, 899, 909, 915, 986, 1000, 1004, 1005, 1007, 1008, 1013, 1022, 1033, 1047, 1050, 1053, 1059, 1080, 1090, 1104, 1112, 1120, 1126, 1136, 1138, 1140, 1144, 1146, 1150, 1166, 1178, 1196, 1198, 1254, 1267, 1274, 1276, 1279, 1295, 1304, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1321, 1326], "100": [10, 17, 27, 39, 123, 126, 130, 133, 134, 135, 138, 142, 143, 144, 147, 151, 224, 242, 260, 317, 604, 605, 634, 648, 658, 662, 670, 686, 741, 796, 841, 864, 909, 915, 1055, 1146, 1162, 1177, 1178, 1184, 1185, 1187, 1201, 1215, 1229, 1237, 1253, 1295, 1315, 1326], "1000": [135, 194, 273, 294, 317, 333, 796, 883, 909, 1042, 1146, 1273, 1295, 1326], "10000": [133, 221, 317], "100000": [10, 27], "1000000": [11, 1045], "1001": [294, 317, 883, 909], "1002": [294, 317, 883, 909], "10047419486152048166": [209, 317], "1005": [333, 796], "100_000": [845, 909], "101": [9, 27, 224, 317, 413, 687, 841, 909, 915, 1254, 1326], "101000": 413, "10101": [27, 1321], "1010101": 9, "101514": [187, 317, 822, 909], "102": [224, 317, 841, 909], "1024": [36, 44, 45, 48, 133, 134, 135, 143, 151, 317, 374, 909, 965], "1040361802642726": [1100, 1295], "107149": 1320, "10734580197236529959": [1079, 1295], "1073741824": [635, 796], "10783150408545073287": [209, 317], "107_930_000": 1304, "10_000": [39, 317], "10i": [208, 317, 835, 909], "10m": [435, 448, 1034, 1047], "11": [10, 16, 44, 48, 155, 163, 178, 187, 223, 249, 317, 328, 428, 429, 431, 435, 448, 472, 484, 516, 567, 591, 600, 610, 611, 625, 641, 713, 779, 784, 792, 796, 811, 817, 818, 822, 836, 840, 844, 854, 858, 871, 909, 915, 1030, 1034, 1047, 1150, 1183, 1295, 1313], "110": [670, 687, 1254], "1101441246220388612": [479, 796], "111": [10, 1315], "11111": 1035, "111110": 1035, "11111001": [713, 796], "11111010": [713, 796], "11111111": 10, "112": [635, 796, 1326], "11330": 162, "1152921504606846976": [1175, 1295], "116": 162, "11638928888656214026": [479, 796], "118034": [869, 909], "11aa": 1318, "11aabb": 1318, "11h": [410, 1005], "12": [26, 39, 50, 127, 133, 155, 163, 187, 208, 219, 223, 224, 249, 264, 287, 317, 328, 399, 410, 412, 413, 417, 424, 427, 428, 429, 431, 432, 433, 435, 448, 449, 450, 457, 484, 516, 548, 564, 591, 599, 610, 625, 635, 649, 668, 686, 733, 736, 739, 740, 741, 757, 782, 783, 784, 796, 822, 835, 836, 840, 841, 844, 858, 865, 871, 909, 915, 1005, 1007, 1008, 1019, 1020, 1022, 1026, 1034, 1047, 1059, 1150, 1193, 1216, 1236, 1253, 1295, 1317, 1318, 1319, 1321, 1323, 1326], "120": [224, 317, 742, 841, 909, 1320], "1200": [630, 796], "120134": [686, 1253], "121": 1326, "123": [9, 557, 649, 656, 669, 692, 786, 915, 1216, 1223, 1259, 1272, 1295], "123000": 915, "1232e": [988, 990, 1295], "1234": [27, 630, 796], "12345": [748, 983, 1071, 1193, 1295], "1234500": 915, "123456": [9, 915], "1234567": 27, "123456780": 127, "12346": 748, "123465": 915, "123a123": 669, "123abc": [668, 1235, 1236], "125": [1, 39, 54, 317, 326, 595, 775, 796, 868, 909, 1166, 1169, 1295], "127": [1283, 1295, 1314], "128": [52, 66, 1166, 1295], "129": [635, 796], "13": [181, 182, 187, 197, 198, 205, 213, 224, 225, 237, 249, 291, 299, 301, 304, 305, 306, 307, 308, 309, 310, 317, 328, 409, 415, 416, 420, 423, 425, 426, 430, 436, 438, 560, 562, 610, 686, 726, 732, 735, 739, 746, 780, 782, 785, 796, 815, 816, 822, 829, 830, 841, 843, 858, 879, 888, 890, 893, 894, 895, 896, 897, 898, 899, 909, 1004, 1034, 1047, 1048, 1150, 1253, 1295, 1314], "130": [130, 224, 317, 841, 909], "13382926553367784577": [479, 796], "134821952": 1304, "134_821_952": 1304, "135": [721, 1320], "13614470193936745724": [479, 796], "13756996518000038261": [1079, 1295], "13h": [410, 1005], "14": [38, 155, 187, 224, 227, 299, 301, 304, 305, 306, 307, 308, 309, 310, 317, 410, 415, 416, 420, 423, 425, 426, 430, 436, 438, 484, 557, 600, 739, 782, 783, 796, 822, 841, 888, 890, 893, 894, 895, 896, 897, 898, 899, 909, 915, 1005, 1034], "140": [224, 317, 841, 909], "141592653589793": 10, "141593": [599, 796, 926, 1295, 1317, 1320], "142857": [1166, 1295], "143": [686, 1253, 1326], "1433": [37, 317], "1436e16": 163, "1438741209321515184": [209, 317], "1440": [445, 1044], "1443e235": 1326, "149": 1326, "14d": 915, "15": [10, 39, 155, 187, 208, 213, 224, 227, 249, 317, 401, 405, 429, 435, 448, 457, 594, 610, 625, 733, 739, 782, 783, 796, 822, 835, 841, 858, 909, 915, 997, 1000, 1034, 1047, 1059, 1295, 1314, 1318], "150": [224, 317, 841, 909, 1185, 1295], "1500": [155, 166], "15000": [221, 317], "153061": [498, 796], "15836": 163, "15_000": [221, 317], "16": [1, 39, 52, 71, 81, 155, 169, 187, 208, 224, 249, 291, 317, 397, 400, 484, 564, 571, 590, 595, 610, 687, 697, 732, 742, 743, 746, 796, 822, 835, 841, 858, 865, 879, 909, 915, 1034, 1047, 1166, 1206, 1254, 1268, 1295, 1314, 1317, 1318, 1323], "160": [224, 317, 841, 909], "165": [1034, 1047], "1656e15": [990, 1295], "166667": [1166, 1295], "1666683077": 748, "1666683099": 748, "167": 50, "16996": 1326, "16h": 915, "17": [155, 163, 194, 223, 296, 317, 457, 590, 611, 629, 748, 783, 796, 840, 885, 909, 988, 990, 1034, 1059, 1183, 1295, 1326], "170": [224, 317, 841, 909], "17293822569102704640": [1175, 1295], "174": 1326, "175201": [639, 796, 1207, 1295], "1755e": [160, 163], "1764": 54, "17888890": [194, 317], "179": 1326, "17_500": [221, 317], "18": [37, 127, 187, 234, 249, 317, 400, 435, 448, 451, 484, 573, 590, 610, 697, 796, 822, 850, 854, 858, 909, 915, 1050, 1312, 1323], "180": [403, 599, 796, 1320], "1844": 163, "18446744073709551614": [1175, 1295], "185_000_000": 1304, "186": 1326, "1875": [627, 796, 877, 909], "1897": [412, 424, 1007, 1022], "18d": 915, "19": [138, 163, 223, 249, 317, 412, 435, 610, 615, 617, 619, 621, 686, 796, 840, 858, 909, 1007, 1034, 1047, 1253], "1920": 1318, "196": 1319, "1964": [854, 909], "1969": [1318, 1319], "1970": [64, 65, 153, 1304], "1972": 1304, "1976": [422, 452], "1977": [422, 452], "1978": [415, 416, 420, 422, 423, 425, 426, 430, 436, 438, 452, 1319], "1979": [422, 452], "1985": [737, 740], "1990": [133, 1304], "1993": 1304, "1994": 1304, "1995": 133, "1998": [431, 1030], "1999": [264, 317, 431, 915, 1030, 1321], "199992": [845, 909], "199994": [845, 909], "199996": [845, 909], "199998": [845, 909], "1_000_000": [194, 317, 1057, 1295], "1_234_500": 915, "1d": [208, 223, 249, 287, 317, 411, 431, 435, 442, 445, 448, 451, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 737, 738, 740, 741, 742, 756, 783, 784, 796, 835, 840, 858, 909, 915, 1006, 1014, 1020, 1030, 1034, 1038, 1041, 1044, 1047, 1059, 1295], "1e": [11, 156, 157, 158, 159], "1e6": 11, "1h": [208, 223, 249, 287, 317, 418, 431, 435, 448, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 740, 741, 783, 784, 796, 835, 840, 858, 909, 1013, 1015, 1030, 1034, 1047, 1059, 1295], "1i": [208, 249, 287, 317, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 796, 835, 858, 909, 1059, 1295], "1m": [208, 223, 249, 287, 317, 431, 435, 447, 448, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 740, 741, 783, 784, 796, 835, 840, 858, 909, 1030, 1034, 1042, 1043, 1045, 1046, 1047, 1059, 1295], "1mo": [208, 223, 249, 287, 317, 414, 428, 429, 431, 434, 435, 441, 448, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 737, 738, 740, 741, 783, 784, 796, 835, 840, 858, 909, 1009, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1040, 1047, 1048, 1059, 1295], "1n": [208, 223, 249, 287, 317, 431, 435, 448, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 740, 741, 783, 784, 796, 835, 840, 858, 909, 1030, 1034, 1047, 1059, 1295], "1q": [208, 223, 249, 287, 317, 431, 435, 448, 610, 613, 615, 617, 619, 621, 624, 626, 628, 737, 738, 740, 741, 783, 784, 796, 835, 840, 858, 909, 1030, 1034, 1047], "1st_col": 915, "1u": [208, 223, 249, 287, 317, 431, 435, 448, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 740, 741, 783, 784, 796, 835, 840, 858, 909, 1030, 1034, 1047, 1059, 1295], "1w": [208, 223, 249, 287, 317, 431, 435, 448, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 737, 738, 740, 741, 783, 784, 796, 835, 840, 858, 909, 1030, 1034, 1047, 1059, 1295], "1w2d": [737, 738], "1y": [208, 223, 249, 287, 317, 431, 435, 448, 610, 613, 615, 617, 619, 621, 624, 626, 628, 737, 738, 740, 741, 783, 784, 796, 835, 840, 858, 909, 1030, 1034, 1047], "1y2mo": [431, 1030], "1zy3": [649, 1216], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 38, 39, 40, 41, 42, 43, 44, 50, 51, 52, 53, 54, 58, 59, 75, 79, 92, 95, 97, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133, 136, 142, 143, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 320, 321, 325, 326, 327, 328, 330, 332, 333, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 374, 385, 386, 387, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 409, 410, 412, 413, 414, 415, 416, 417, 418, 421, 424, 427, 428, 429, 431, 432, 433, 434, 435, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 564, 565, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 642, 643, 644, 646, 648, 649, 650, 651, 652, 653, 655, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 766, 767, 770, 774, 775, 776, 777, 778, 779, 781, 784, 785, 786, 792, 796, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 909, 914, 915, 919, 920, 921, 924, 927, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 965, 976, 980, 982, 983, 984, 985, 987, 988, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1008, 1010, 1011, 1013, 1015, 1018, 1019, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1032, 1033, 1034, 1037, 1047, 1049, 1050, 1051, 1052, 1053, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1075, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1103, 1104, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1216, 1222, 1224, 1226, 1227, 1229, 1230, 1232, 1235, 1236, 1241, 1242, 1244, 1245, 1246, 1249, 1250, 1252, 1253, 1254, 1255, 1258, 1260, 1262, 1263, 1265, 1266, 1267, 1268, 1270, 1271, 1272, 1273, 1275, 1276, 1277, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1295, 1300, 1304, 1305, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1323, 1324, 1325, 1326], "20": [37, 38, 39, 133, 138, 155, 160, 161, 162, 163, 167, 170, 178, 187, 196, 212, 213, 234, 241, 243, 247, 264, 274, 275, 279, 293, 298, 317, 340, 341, 342, 405, 412, 415, 416, 420, 423, 424, 425, 426, 430, 435, 436, 438, 448, 451, 472, 479, 484, 548, 556, 567, 594, 613, 615, 617, 619, 621, 624, 626, 628, 654, 697, 712, 739, 748, 756, 775, 783, 796, 811, 822, 827, 850, 853, 868, 882, 887, 909, 915, 1000, 1007, 1011, 1022, 1034, 1047, 1050, 1062, 1078, 1177, 1221, 1274, 1276, 1279, 1295, 1311, 1312, 1315, 1321], "200": [443, 444, 446, 604, 605, 796, 915, 1055, 1162, 1177, 1178, 1184, 1185, 1187, 1295, 1315], "2000": [412, 421, 424, 428, 429, 431, 915, 1007, 1016, 1022, 1027, 1028, 1030, 1035, 1304, 1318], "200000": [443, 845, 909], "200000000": 446, "2001": [16, 411, 412, 417, 419, 421, 424, 427, 431, 432, 433, 435, 439, 448, 449, 450, 451, 613, 615, 617, 619, 621, 624, 626, 628, 682, 796, 915, 1006, 1007, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1034, 1038, 1047, 1048, 1049, 1050, 1051, 1249], "2002": [133, 421, 431, 1016, 1030, 1051], "2003": [431, 748, 1030], "2004": [431, 1030], "2005": [431, 1030], "2006": [431, 1030], "2008": 1304, "200m": [443, 444, 446], "2010": [264, 317, 915], "2011": [410, 1005], "2012": [410, 1005, 1321], "2016": [223, 317, 840, 909], "2017": [223, 317, 840, 909], "2018": [223, 317, 434, 840, 909, 1033], "2019": [223, 317, 840, 909], "202": 1319, "2020": [137, 148, 180, 187, 206, 223, 249, 317, 320, 409, 414, 418, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 457, 610, 682, 684, 685, 724, 796, 814, 822, 840, 858, 909, 915, 1004, 1009, 1013, 1033, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1059, 1249, 1251, 1252, 1295, 1319], "2021": [137, 148, 180, 187, 206, 208, 287, 317, 682, 756, 814, 822, 835, 909, 915, 1010, 1011, 1017, 1037, 1249, 1318], "2022": [50, 180, 187, 206, 317, 413, 435, 448, 682, 737, 738, 740, 741, 742, 748, 814, 822, 909, 915, 1008, 1017, 1034, 1047, 1249], "2023": [16, 39, 127, 155, 221, 317, 413, 742, 756, 915, 1008], "2024": [155, 409, 415, 416, 420, 423, 425, 426, 430, 436, 438, 590, 724, 736, 737, 739, 740, 742, 796, 915, 1004, 1318, 1321], "2025": [409, 724, 915, 1004], "2026": 1319, "2030": 1318, "2031": 915, "2047317070637311557": [209, 317], "2055938745": 127, "2065": [415, 416, 420, 423, 425, 426, 430, 436, 438], "2068": 163, "207": 1319, "2077": [264, 317, 915, 1318, 1319], "2095": 163, "20_000": [39, 317], "20word": 136, "21": [155, 187, 234, 266, 317, 412, 613, 615, 617, 619, 621, 624, 626, 628, 739, 748, 796, 822, 850, 909, 915, 1007, 1312], "213": 1326, "2147483647": 1326, "2147483648": [1148, 1295], "21d": 915, "22": [44, 48, 155, 163, 317, 417, 432, 435, 448, 450, 451, 611, 613, 615, 617, 619, 621, 624, 626, 628, 682, 739, 792, 796, 909, 915, 1034, 1047, 1050, 1183, 1249, 1295, 1318, 1319, 1326], "221": 1326, "2246e": [1206, 1268, 1295], "225": [435, 448, 1320], "22_000_000": 1304, "23": [10, 163, 187, 208, 249, 279, 317, 413, 417, 420, 432, 435, 450, 610, 613, 615, 617, 619, 621, 624, 626, 628, 739, 742, 782, 783, 784, 796, 822, 835, 858, 868, 909, 915, 1008, 1015, 1279, 1295, 1325, 1326], "230498": 11, "230498095872587": 11, "2304980958725870923": 11, "232338648": 1304, "2337": [39, 317], "234": 27, "2345": 915, "23456789": 10, "235": 1326, "23h": 915, "24": [52, 155, 208, 223, 227, 249, 264, 287, 317, 399, 401, 417, 431, 432, 435, 442, 448, 450, 571, 610, 613, 615, 617, 619, 621, 624, 626, 628, 737, 738, 740, 741, 742, 783, 784, 796, 835, 840, 858, 909, 997, 1030, 1034, 1041, 1047, 1099, 1295, 1318, 1325], "24030": 162, "249": [713, 796], "25": [1, 27, 39, 54, 127, 187, 208, 223, 249, 274, 279, 287, 291, 317, 374, 405, 417, 418, 432, 435, 448, 450, 457, 595, 597, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 706, 739, 740, 741, 742, 748, 758, 783, 784, 796, 822, 835, 840, 847, 858, 877, 879, 909, 915, 965, 999, 1000, 1013, 1034, 1047, 1053, 1059, 1081, 1166, 1171, 1235, 1295, 1312, 1317, 1323, 1324], "250": [713, 796, 1185, 1295, 1315, 1326], "2500": [221, 279, 317], "254508": [457, 796, 1059, 1295], "255": 1326, "256": [227, 317, 374, 965, 1166, 1295, 1317], "2560": 965, "259921": [389, 796, 982, 1295, 1317], "25_000_000": 1304, "26": [37, 39, 155, 160, 161, 162, 163, 167, 187, 317, 418, 449, 822, 909, 1013], "266667": [187, 317, 822, 909], "27": [1, 54, 274, 310, 317, 400, 427, 433, 449, 697, 796, 899, 915, 1169, 1274, 1295, 1325, 1326], "270": 1320, "28": [270, 275, 317, 326, 434, 451, 796, 1033, 1050, 1276, 1295, 1318, 1320, 1325, 1326], "283185": [599, 796], "2846": 317, "285714": [485, 796, 1084, 1295], "289962": 1320, "28_341_469": 1304, "29": [16, 155, 410, 428, 1005, 1027], "29096": 1326, "290994": [869, 909], "292432": [927, 1295], "292893": [457, 796, 1059, 1295], "2_color_scal": [39, 317], "2d": [249, 274, 275, 317, 431, 610, 756, 796, 858, 909, 1005, 1012], "2h": [613, 615, 617, 619, 621, 624, 626, 628, 796], "2i": [208, 317, 835, 909], "2m": [915, 1025], "2x": 162, "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 34, 36, 38, 39, 40, 41, 42, 43, 44, 50, 51, 52, 53, 54, 58, 59, 75, 92, 95, 97, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133, 136, 138, 142, 143, 144, 147, 153, 155, 156, 157, 158, 159, 162, 163, 164, 165, 167, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 320, 321, 326, 327, 328, 329, 331, 342, 343, 344, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 385, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 411, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 448, 449, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 549, 569, 570, 571, 572, 573, 574, 576, 578, 580, 581, 584, 587, 588, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 642, 643, 644, 647, 648, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 684, 689, 690, 693, 694, 695, 696, 697, 698, 700, 704, 705, 708, 709, 710, 712, 713, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 796, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 885, 886, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 909, 914, 915, 920, 921, 924, 926, 928, 929, 930, 932, 933, 934, 935, 936, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 976, 977, 978, 980, 982, 983, 984, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1009, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1024, 1025, 1026, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1045, 1047, 1049, 1050, 1052, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1075, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1103, 1104, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1215, 1217, 1218, 1219, 1222, 1223, 1224, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1243, 1250, 1251, 1256, 1257, 1260, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1275, 1276, 1277, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1295, 1300, 1304, 1305, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1323, 1324, 1325, 1326], "30": [39, 187, 196, 208, 212, 241, 247, 270, 291, 317, 340, 341, 342, 405, 413, 415, 416, 420, 423, 425, 426, 427, 428, 430, 433, 434, 435, 436, 438, 441, 448, 449, 479, 556, 635, 739, 756, 782, 783, 796, 822, 827, 835, 853, 879, 909, 915, 1000, 1008, 1027, 1033, 1034, 1040, 1047, 1078, 1295, 1311, 1312, 1315, 1317, 1318, 1320, 1321, 1324, 1326], "300": [270, 317, 478, 588, 605, 796, 915, 1178, 1184, 1185, 1187, 1295, 1315], "3000": 915, "3002": [412, 424, 1007, 1022], "30103": [544, 796, 1317], "3022416320763508302": [1079, 1295], "30_000": [39, 317], "30m": [208, 317, 435, 448, 835, 909, 1034, 1047], "31": [54, 187, 264, 317, 412, 413, 417, 424, 428, 431, 441, 654, 682, 736, 739, 748, 756, 775, 822, 909, 915, 1005, 1007, 1008, 1012, 1022, 1027, 1040, 1177, 1221, 1249, 1295, 1319, 1321, 1326], "32": [52, 64, 69, 72, 82, 218, 223, 249, 317, 571, 610, 635, 796, 840, 858, 909, 1001, 1031, 1166, 1188, 1295, 1312, 1318], "321": [27, 1326], "3212": [686, 1253], "321cba": 1318, "3265500": 915, "32971": [451, 1050], "32974": [451, 1050], "32976": [451, 1050], "32bit": [274, 317], "33": [187, 234, 317, 629, 796, 822, 850, 909, 1188, 1295, 1319], "333": [16, 630, 796, 1055, 1162, 1194, 1295], "33333": 1321, "333333": [214, 317, 573, 838, 909, 1166, 1192, 1295, 1312], "34": [187, 317, 668, 682, 822, 909, 1236, 1249], "3420": [686, 1253], "343622": [640, 796], "345": [664, 665, 1231, 1232], "3450": [1194, 1295], "3456": 915, "34776706224699483": [1208, 1295], "35": [39, 317, 405, 739, 796, 1000, 1295], "350": [478, 588, 796, 1185, 1295], "3500": [1194, 1295], "356": [417, 432, 450], "356194": [720, 721, 1320], "357": [417, 432, 450], "358": [417, 432, 450], "359": [417, 432, 450], "36": [187, 317, 822, 909, 1323], "360": [403, 599, 796, 1320], "361": 1326, "363961": [536, 1138], "366": [432, 1031], "37": [12, 915], "370h": [457, 796, 1059, 1295], "37338": 1326, "38": [39, 127, 160, 163, 317], "38180177416060584": [622, 796, 1189, 1295], "381802": [622, 796, 1189, 1295], "386294": [545, 796, 1147, 1295, 1317], "389056": [461, 796, 1062, 1295, 1317], "39": [626, 748, 796], "39m": 915, "3_color_scal": [39, 317], "3d12h4m25": [208, 223, 249, 287, 317, 435, 448, 457, 610, 740, 741, 783, 784, 796, 835, 840, 858, 909, 1034, 1047, 1059, 1295], "3f": [136, 682, 685, 1249, 1252], "3i": [208, 249, 317, 835, 909], "3rd": [1227, 1250], "3xy": [649, 1216], "4": [1, 8, 13, 17, 25, 34, 36, 38, 39, 40, 41, 44, 50, 51, 52, 53, 54, 58, 59, 75, 95, 120, 121, 122, 123, 124, 125, 126, 127, 130, 147, 155, 167, 176, 177, 178, 179, 180, 181, 182, 186, 188, 191, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 234, 236, 237, 238, 240, 241, 242, 243, 249, 251, 252, 259, 260, 263, 267, 268, 269, 270, 271, 272, 275, 278, 280, 281, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 296, 297, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 320, 321, 325, 326, 327, 328, 330, 332, 344, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 369, 374, 385, 386, 387, 389, 390, 391, 395, 396, 399, 400, 401, 403, 406, 413, 416, 417, 424, 432, 433, 434, 435, 436, 437, 440, 442, 445, 447, 448, 450, 454, 455, 457, 461, 462, 464, 465, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 495, 496, 500, 501, 502, 509, 510, 511, 512, 513, 515, 516, 518, 526, 528, 529, 530, 531, 532, 533, 534, 538, 539, 544, 547, 548, 549, 569, 571, 573, 574, 576, 578, 580, 581, 584, 585, 586, 589, 590, 592, 593, 594, 595, 598, 600, 604, 605, 606, 607, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 634, 637, 641, 642, 643, 644, 647, 649, 653, 656, 659, 660, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 680, 681, 682, 683, 687, 692, 693, 695, 696, 697, 698, 700, 703, 704, 705, 706, 712, 713, 715, 717, 718, 720, 721, 722, 723, 725, 726, 727, 728, 730, 732, 733, 734, 735, 736, 739, 740, 741, 743, 745, 746, 750, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 792, 796, 811, 812, 814, 815, 816, 817, 818, 821, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 853, 854, 855, 858, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 882, 883, 885, 886, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 909, 914, 915, 919, 924, 927, 934, 941, 943, 944, 945, 947, 948, 949, 950, 951, 953, 955, 956, 957, 958, 959, 960, 965, 976, 983, 984, 986, 992, 997, 999, 1001, 1011, 1015, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1034, 1036, 1039, 1041, 1044, 1046, 1047, 1048, 1049, 1056, 1059, 1063, 1064, 1066, 1067, 1072, 1073, 1075, 1080, 1081, 1083, 1084, 1085, 1086, 1090, 1093, 1094, 1095, 1096, 1098, 1104, 1111, 1112, 1113, 1114, 1115, 1120, 1124, 1127, 1128, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1140, 1141, 1156, 1159, 1160, 1163, 1166, 1167, 1168, 1169, 1173, 1174, 1177, 1178, 1179, 1182, 1186, 1188, 1189, 1190, 1191, 1192, 1195, 1197, 1201, 1202, 1205, 1208, 1209, 1210, 1214, 1216, 1220, 1223, 1226, 1227, 1231, 1232, 1233, 1234, 1239, 1241, 1242, 1247, 1248, 1249, 1250, 1254, 1259, 1260, 1263, 1265, 1267, 1273, 1276, 1278, 1280, 1286, 1295, 1300, 1304, 1305, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1323, 1324, 1325, 1326], "40": [39, 187, 196, 223, 241, 317, 435, 448, 479, 542, 686, 697, 796, 822, 840, 853, 909, 915, 1017, 1047, 1144, 1253, 1311, 1312, 1315, 1318], "400": [286, 317, 443, 444, 446, 876, 909, 1184, 1185, 1187, 1295, 1315], "4000000": [1057, 1295], "404": [224, 317, 655, 657, 841, 909, 1222, 1224], "4096": 1317, "41": [187, 317, 626, 796, 822, 909, 1312, 1326], "412277": 163, "414214": [644, 796, 1211, 1295, 1317], "4160": 54, "416147": 1320, "4164": [223, 317, 840, 909], "42": [54, 187, 209, 234, 249, 317, 610, 796, 822, 850, 858, 909, 1079, 1295, 1311, 1325], "424778": [599, 796], "428571": [456, 796, 1058, 1295], "429101": 1312, "4294967296": [44, 317], "43": [187, 249, 317, 400, 610, 626, 796, 822, 858, 909], "4321": 915, "433013": [623, 796, 869, 909], "44": [10, 234, 317, 406, 796, 850, 909], "4411": [223, 317, 840, 909], "44225": [982, 1295], "444": 10, "44444444444": 10, "45": [39, 187, 249, 317, 413, 435, 448, 610, 626, 649, 656, 694, 721, 739, 756, 782, 783, 796, 822, 858, 909, 915, 1008, 1034, 1047, 1216, 1223, 1262, 1317, 1318, 1320, 1324, 1326], "450": [1185, 1295], "4500000": 915, "456": [9, 10, 413, 915, 1008, 1272, 1295], "456000": [413, 1008], "456001\u00b5": 915, "4566": [223, 317, 840, 909], "456789": [915, 1035], "456789\u00b5": 915, "456m": 915, "457658": 1320, "459148": [453, 796], "46": 915, "4696": [223, 317, 840, 909], "47": [50, 187, 317, 626, 796, 822, 909, 915, 1312], "470": [854, 909], "47033": [622, 796, 1189, 1295], "47033046033698594": [622, 796, 1189, 1295], "475": [854, 909], "48": [12, 163, 249, 317, 610, 697, 796, 858, 909, 915], "4827": [223, 317, 840, 909], "485": 1326, "49": [187, 317, 822, 909, 915], "492474": [457, 796, 1059, 1295], "498": [224, 317, 841, 909], "4_500_000": 915, "4ab4a": 1318, "4d": [457, 796, 1059, 1295], "4f6228": [39, 317], "4f71": [39, 317], "4x": [220, 317], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 34, 36, 38, 40, 41, 44, 50, 51, 53, 54, 58, 95, 120, 123, 124, 125, 126, 127, 129, 134, 155, 156, 158, 161, 163, 167, 177, 180, 181, 182, 187, 188, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 210, 211, 213, 214, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 236, 237, 238, 240, 242, 243, 244, 249, 252, 259, 260, 263, 264, 267, 268, 269, 270, 271, 272, 274, 275, 278, 279, 281, 284, 285, 286, 287, 290, 291, 293, 294, 296, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 317, 320, 321, 326, 327, 330, 345, 346, 351, 352, 353, 355, 357, 361, 366, 368, 374, 385, 386, 387, 390, 391, 401, 402, 403, 405, 406, 409, 412, 413, 414, 415, 416, 420, 423, 424, 425, 426, 430, 434, 436, 437, 438, 440, 441, 447, 451, 455, 457, 459, 460, 463, 465, 469, 470, 474, 475, 477, 480, 482, 484, 486, 489, 492, 493, 494, 495, 496, 500, 502, 509, 512, 513, 515, 516, 518, 521, 523, 524, 528, 529, 530, 531, 532, 533, 537, 538, 542, 548, 569, 571, 573, 585, 589, 590, 591, 592, 593, 594, 595, 597, 598, 600, 604, 605, 606, 607, 609, 610, 611, 612, 614, 615, 616, 617, 618, 620, 623, 625, 626, 627, 628, 629, 632, 643, 649, 659, 660, 663, 664, 665, 683, 687, 698, 700, 704, 705, 706, 718, 720, 721, 723, 724, 725, 726, 728, 730, 732, 733, 734, 735, 736, 737, 739, 742, 743, 744, 745, 746, 750, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 775, 777, 779, 780, 781, 785, 792, 796, 814, 815, 816, 817, 818, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 847, 848, 854, 858, 864, 865, 866, 867, 868, 869, 870, 871, 875, 876, 878, 879, 882, 883, 885, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 909, 915, 924, 927, 931, 934, 937, 938, 941, 943, 944, 945, 947, 949, 953, 958, 959, 960, 965, 976, 984, 986, 993, 997, 998, 999, 1000, 1001, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1022, 1033, 1035, 1036, 1037, 1039, 1040, 1046, 1048, 1049, 1050, 1056, 1059, 1061, 1063, 1064, 1065, 1075, 1080, 1081, 1083, 1085, 1089, 1092, 1104, 1111, 1114, 1115, 1120, 1123, 1126, 1130, 1131, 1132, 1133, 1134, 1135, 1139, 1140, 1144, 1148, 1156, 1163, 1166, 1167, 1168, 1171, 1172, 1173, 1174, 1178, 1179, 1182, 1183, 1184, 1185, 1187, 1188, 1191, 1195, 1197, 1202, 1208, 1211, 1216, 1226, 1227, 1230, 1231, 1250, 1254, 1267, 1274, 1276, 1279, 1280, 1283, 1286, 1295, 1300, 1305, 1308, 1310, 1312, 1313, 1314, 1317, 1318, 1319, 1320, 1323, 1325, 1326], "50": [12, 27, 39, 187, 196, 206, 317, 391, 435, 448, 737, 738, 796, 822, 909, 915, 986, 999, 1047, 1235, 1295, 1311, 1312], "500": [39, 286, 317, 415, 416, 420, 423, 425, 426, 430, 436, 438, 876, 909, 1021, 1023, 1029, 1184, 1185, 1187, 1295], "5000": [279, 317, 1279, 1295], "50000": 134, "500000": [423, 1021], "500000000": [430, 1029], "5000555": 915, "500_000": [415, 416, 420, 423, 425, 426, 430, 436, 438], "500m": [1021, 1023, 1029], "51": 915, "512": [44, 135, 220, 317, 374, 595, 796, 965, 1166, 1295], "51966": [687, 1254], "52": [291, 317, 449, 629, 796, 879, 909], "523599": 1320, "527525": [1190, 1295], "53": [449, 1048, 1323], "533316061": 1304, "533_316_061": 1304, "54": [461, 796, 1100, 1295, 1317, 1326], "540": [403, 599, 796], "540302": 1320, "543": 9, "543081": [393, 796, 989, 1295], "5432": 135, "54321": 9, "544": 1326, "544705": 728, "549306": [931, 1295], "55": [39, 52, 317, 1314, 1318, 1319], "5555": 915, "55550": 915, "56": [127, 668, 701, 796, 1236], "566371": [599, 796], "567": 27, "56789": [983, 1071, 1193, 1295], "57": [626, 796, 1193, 1295, 1320, 1326], "570796": [334, 336, 796, 926, 928, 1295, 1320], "575050513": [160, 163], "58": [242, 317], "581139": [999, 1295], "584963": [543, 796], "587401": [389, 796, 1317], "59": [127, 187, 317, 413, 426, 436, 470, 739, 782, 783, 784, 796, 822, 909, 915, 1008, 1025, 1035], "59815": [461, 796, 1317], "5_000_555": 915, "5th": [39, 317], "6": [1, 8, 13, 34, 36, 38, 39, 40, 41, 42, 43, 44, 49, 51, 53, 58, 87, 88, 95, 120, 123, 124, 125, 126, 138, 142, 143, 155, 177, 180, 183, 184, 188, 189, 190, 191, 192, 193, 195, 196, 199, 202, 203, 204, 205, 206, 208, 210, 212, 213, 214, 216, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 232, 235, 236, 239, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 260, 262, 263, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 281, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 300, 310, 311, 317, 320, 321, 326, 330, 351, 352, 353, 355, 361, 369, 386, 387, 399, 400, 406, 409, 413, 417, 427, 431, 432, 433, 443, 444, 446, 449, 450, 453, 455, 464, 465, 470, 471, 474, 480, 482, 484, 502, 503, 504, 513, 516, 529, 530, 531, 532, 536, 548, 549, 585, 589, 596, 599, 600, 601, 606, 608, 610, 612, 614, 616, 618, 620, 623, 625, 626, 627, 632, 637, 643, 649, 654, 664, 665, 687, 698, 700, 705, 713, 715, 717, 724, 732, 733, 734, 736, 739, 743, 746, 752, 757, 758, 762, 775, 779, 792, 796, 814, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 831, 832, 833, 835, 836, 838, 839, 840, 842, 844, 845, 852, 854, 856, 858, 859, 860, 862, 864, 865, 866, 867, 868, 871, 874, 875, 878, 879, 882, 883, 889, 899, 900, 909, 915, 941, 943, 944, 945, 947, 953, 984, 988, 990, 995, 996, 1001, 1004, 1030, 1049, 1056, 1063, 1075, 1081, 1105, 1106, 1115, 1118, 1131, 1132, 1133, 1134, 1138, 1156, 1170, 1173, 1174, 1179, 1181, 1186, 1188, 1190, 1192, 1197, 1202, 1205, 1216, 1221, 1231, 1254, 1266, 1276, 1295, 1300, 1305, 1308, 1310, 1312, 1313, 1317, 1323, 1324, 1326], "60": [39, 130, 196, 242, 317, 420, 425, 426, 436, 447, 470, 626, 682, 796, 1031, 1035, 1046, 1175, 1249, 1295, 1320], "600": [286, 317, 443, 444, 446, 876, 909, 915], "60000": 423, "600000": 915, "60000000": 430, "60206": [544, 796, 1317], "605551": 777, "605551275463989": 777, "609438": 1317, "60_000": [415, 416, 420, 423, 425, 426, 430, 436, 438], "61": [242, 317], "625": [620, 796], "626172": [651, 1218], "63": [626, 796], "63204": 1326, "6331e16": [1268, 1295, 1320], "636253": 1320, "64": [1, 52, 54, 65, 67, 70, 73, 80, 83, 154, 176, 279, 317, 394, 571, 595, 796, 1166, 1169, 1295, 1317], "64030": [687, 1254], "642093": 1320, "647961": 163, "64bit": [155, 602, 796, 1175, 1295], "65": [1053, 1295], "650": [478, 588, 796], "65280": [687, 1254], "654": [27, 775, 868, 909], "65432": 1321, "654321": 557, "65536": 1317, "66": [223, 286, 317, 626, 713, 796, 840, 876, 909, 1100, 1188, 1295], "663053": 127, "666": 915, "666000": 915, "666667": [187, 214, 288, 305, 317, 456, 761, 796, 822, 838, 877, 894, 909, 1058, 1295], "666f6f": [651, 1218], "676": [224, 317, 841, 909], "678": [649, 656, 1216, 1223], "6789": [28, 915], "67890": 28, "686241": 1312, "69": [626, 796, 1100, 1295], "693147": [545, 796, 1145, 1147, 1295, 1317], "6_000_000": 1304, "7": [1, 16, 27, 34, 36, 38, 39, 40, 41, 42, 43, 44, 51, 53, 58, 142, 143, 155, 170, 177, 180, 183, 184, 185, 187, 189, 190, 192, 193, 195, 199, 202, 204, 208, 210, 212, 214, 222, 226, 228, 230, 232, 234, 235, 239, 242, 244, 246, 247, 249, 250, 252, 253, 254, 255, 257, 260, 262, 265, 266, 267, 268, 273, 275, 276, 277, 285, 287, 288, 289, 317, 320, 321, 326, 330, 352, 353, 355, 364, 400, 412, 413, 417, 424, 432, 434, 435, 448, 450, 461, 474, 480, 484, 485, 502, 516, 529, 530, 531, 532, 589, 590, 600, 606, 610, 625, 626, 643, 659, 686, 700, 724, 732, 733, 736, 739, 740, 746, 751, 757, 758, 775, 779, 796, 814, 819, 820, 822, 824, 826, 828, 831, 833, 835, 836, 838, 839, 844, 850, 852, 855, 856, 858, 859, 860, 864, 868, 871, 909, 915, 931, 944, 945, 947, 956, 1007, 1008, 1012, 1017, 1022, 1033, 1034, 1047, 1049, 1062, 1084, 1099, 1118, 1131, 1132, 1133, 1134, 1178, 1179, 1191, 1197, 1226, 1253, 1295, 1300, 1305, 1310, 1312, 1313, 1314, 1317, 1319, 1323, 1326], "70": [187, 317, 713, 740, 796, 822, 909, 1100, 1295, 1312], "700": [286, 317, 876, 909], "702963": [39, 317], "7051579356916758811": 149, "707107": [363, 458, 623, 624, 720, 796, 955, 1060, 1295, 1320], "712389": 1320, "714": 1326, "714286": [485, 796, 1084, 1295], "718281828459045": [10, 453, 543, 796, 1053, 1145, 1295], "718282": [461, 796, 1062, 1295, 1317], "720": [403, 599, 796], "7264": 1326, "732051": [1211, 1295], "7415e16": 163, "742": [224, 317, 841, 909], "75": [39, 187, 317, 330, 589, 597, 612, 614, 616, 618, 623, 625, 627, 758, 796, 822, 909, 915, 999, 1081, 1100, 1171, 1235, 1295, 1312, 1320, 1326], "7500": [221, 317], "7508": 1326, "754": [706, 796], "754888": [453, 796], "761594": [702, 796, 1269, 1295], "7654": 915, "765431": 1035, "7654321": 27, "76933c": [39, 317], "78": [9, 668, 1236], "780": 9, "784": [223, 317, 840, 909], "785398": [338, 720, 721, 796, 930, 1295, 1320], "789": [10, 915], "79": [1100, 1295], "7d": 915, "8": [1, 11, 34, 36, 38, 40, 41, 42, 43, 44, 45, 50, 51, 53, 54, 58, 74, 78, 84, 142, 143, 155, 177, 180, 183, 184, 185, 187, 189, 190, 191, 192, 193, 195, 199, 202, 204, 206, 210, 212, 219, 222, 223, 224, 226, 227, 228, 230, 232, 235, 244, 246, 247, 249, 250, 252, 253, 254, 255, 257, 260, 262, 264, 265, 266, 268, 273, 275, 276, 277, 285, 288, 289, 291, 317, 330, 332, 344, 352, 353, 355, 397, 400, 401, 413, 474, 481, 484, 485, 510, 512, 516, 529, 530, 531, 532, 571, 589, 590, 595, 606, 607, 611, 635, 641, 643, 666, 667, 682, 713, 718, 724, 728, 730, 733, 735, 743, 745, 750, 751, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 777, 780, 781, 785, 796, 814, 819, 820, 822, 824, 825, 826, 828, 831, 833, 836, 839, 840, 841, 844, 845, 854, 856, 859, 860, 864, 868, 871, 879, 909, 915, 944, 945, 947, 990, 997, 1017, 1081, 1084, 1099, 1112, 1114, 1118, 1131, 1132, 1133, 1134, 1166, 1169, 1179, 1182, 1183, 1186, 1188, 1190, 1192, 1233, 1234, 1249, 1295, 1304, 1305, 1310, 1312, 1313, 1314, 1317, 1318, 1319, 1323, 1326], "80": [39, 317], "800": [443, 444, 446], "8000": 135, "803065983": 127, "81": 1317, "814697265625": [1057, 1295], "816497": [265, 317], "8192": 133, "82": [223, 317, 840, 909], "8257e14": 1326, "83": [223, 317, 840, 909], "833": [223, 317, 840, 909], "833333": [305, 894], "848062": 1320, "848808": 163, "85": [39, 317, 1100, 1295, 1326], "850": [478, 588, 796], "8568409950394724": [1053, 1295], "8589934592": [635, 796], "86": 1326, "8601": 1318, "87": 1326, "876": 9, "88": [187, 317, 822, 909], "881374": [337, 796, 929, 1295], "888": [775, 868, 909], "8_000_000": 1304, "8a": [962, 963], "8nin": 1326, "9": [1, 9, 34, 36, 38, 39, 40, 41, 44, 50, 58, 177, 185, 187, 199, 201, 210, 214, 224, 226, 227, 242, 249, 251, 252, 255, 267, 268, 285, 289, 291, 310, 317, 326, 330, 332, 344, 352, 353, 355, 360, 362, 397, 400, 403, 413, 466, 474, 484, 490, 510, 516, 527, 535, 573, 589, 590, 599, 606, 610, 611, 622, 625, 626, 637, 641, 656, 686, 694, 697, 726, 732, 733, 736, 739, 751, 784, 796, 822, 831, 836, 838, 841, 844, 858, 860, 871, 879, 899, 909, 915, 939, 940, 944, 945, 947, 952, 954, 999, 1012, 1021, 1023, 1029, 1034, 1047, 1048, 1090, 1099, 1112, 1118, 1129, 1137, 1179, 1183, 1189, 1191, 1193, 1205, 1223, 1253, 1262, 1295, 1304, 1305, 1310, 1313, 1314, 1323], "90": [187, 224, 317, 686, 822, 841, 909, 1253, 1312, 1320], "901234": [983, 1071, 1193, 1295], "909": [223, 317, 840, 909], "910": [223, 317, 656, 840, 909, 1223], "910t": [649, 656, 1216, 1223], "914": [223, 317, 840, 909], "9223372036854775807": [709, 796], "9223372036854775808": [546, 796], "927295": 1320, "928571": [459, 796, 1061, 1295], "93": [1100, 1295], "94": [327, 796], "9477376373212048": [1100, 1295], "95": [17, 327, 796, 915], "95b3d7": [39, 317], "96": [17, 187, 317, 327, 796, 822, 909, 1100, 1295], "961": 54, "963624": [458, 796, 1060, 1295], "964028": [242, 317], "96_067_179": 1304, "97": [17, 213, 317, 327, 796, 1100, 1295], "9774092659964970114": [479, 796], "978307200": [419, 1014], "978307200000": 439, "978307200000000": [419, 439, 1014, 1038], "978307200000000000": 1038, "978393600": [419, 1014], "978393600000": 439, "978393600000000": [419, 439, 1014, 1038], "978393600000000000": 1038, "978480000": [419, 1014], "978480000000": 439, "978480000000000": [419, 439, 1014, 1038], "978480000000000000": 1038, "98": [17, 213, 242, 317, 385, 473, 476, 642, 686, 704, 796, 1253], "987": [27, 557], "987000": 915, "9876": 9, "987654": [27, 915], "987654321": 10, "9876543210": 127, "987m": 915, "988": 10, "99": [17, 39, 197, 198, 213, 216, 242, 286, 317, 327, 385, 463, 465, 473, 476, 642, 704, 786, 796, 829, 830, 876, 909, 1053, 1065, 1295, 1317], "9914e218": 163, "993": [1081, 1295], "998347": [242, 317], "999": [412, 424, 915, 1007, 1022, 1315, 1326], "999000": 915, "999954": [242, 317], "999999": [692, 739, 782, 783, 784, 915, 1259], "999999\u00b5": 915, "9bbb59": [39, 317], "A": [13, 36, 39, 44, 45, 56, 57, 62, 68, 127, 133, 134, 135, 136, 147, 149, 154, 169, 184, 192, 201, 208, 222, 223, 229, 231, 236, 242, 267, 270, 285, 286, 287, 291, 292, 317, 325, 407, 408, 413, 437, 440, 454, 455, 463, 475, 477, 488, 491, 493, 494, 500, 540, 547, 548, 561, 575, 584, 585, 607, 612, 614, 616, 618, 620, 623, 625, 627, 647, 648, 649, 655, 656, 657, 658, 659, 660, 663, 665, 668, 669, 670, 672, 683, 692, 726, 742, 743, 747, 796, 820, 826, 835, 839, 840, 856, 876, 879, 880, 909, 915, 1002, 1003, 1008, 1036, 1039, 1055, 1065, 1162, 1184, 1185, 1187, 1190, 1191, 1192, 1214, 1215, 1216, 1222, 1223, 1224, 1225, 1226, 1227, 1230, 1232, 1235, 1236, 1237, 1239, 1250, 1259, 1295, 1304, 1305, 1308, 1321, 1323], "AND": [714, 715, 775, 915, 1314], "ANDs": [376, 796, 967, 1295], "AS": [264, 317, 775, 776, 868, 909, 1304, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1323, 1325], "And": [690, 1257], "As": [12, 49, 87, 88, 120, 122, 123, 124, 126, 138, 142, 143, 151, 199, 274, 279, 317, 540, 786, 831, 909], "At": [44, 242, 317], "BY": [775, 868, 909, 1304, 1307, 1313, 1322, 1323], "Be": 909, "By": [5, 12, 14, 30, 50, 133, 134, 147, 208, 222, 223, 249, 251, 260, 265, 287, 288, 317, 361, 431, 435, 448, 533, 536, 542, 590, 605, 610, 613, 615, 617, 619, 621, 624, 626, 628, 634, 645, 711, 728, 730, 737, 738, 740, 741, 742, 756, 777, 783, 784, 785, 796, 817, 835, 839, 840, 858, 864, 869, 877, 909, 953, 1030, 1034, 1047, 1135, 1178, 1201, 1212, 1285, 1295], "For": [14, 38, 39, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 191, 196, 222, 223, 242, 249, 274, 303, 317, 428, 429, 456, 458, 459, 470, 540, 549, 561, 602, 640, 647, 655, 656, 657, 659, 660, 683, 732, 742, 746, 747, 792, 796, 825, 840, 858, 892, 909, 913, 1058, 1060, 1061, 1064, 1150, 1175, 1208, 1214, 1222, 1223, 1224, 1226, 1227, 1250, 1274, 1295], "IF": 1316, "If": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 55, 56, 57, 58, 66, 120, 121, 122, 123, 124, 125, 126, 130, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 150, 151, 152, 153, 156, 157, 158, 159, 164, 165, 166, 176, 191, 196, 199, 206, 208, 210, 218, 219, 220, 223, 226, 227, 231, 238, 242, 249, 251, 252, 253, 257, 260, 262, 264, 267, 268, 271, 272, 274, 275, 281, 282, 284, 285, 286, 317, 320, 329, 331, 354, 361, 366, 387, 409, 413, 414, 428, 429, 437, 440, 466, 481, 486, 498, 519, 528, 533, 534, 540, 548, 549, 556, 557, 563, 565, 590, 595, 597, 600, 602, 604, 605, 606, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 634, 636, 640, 641, 646, 656, 657, 659, 660, 661, 662, 672, 673, 674, 675, 677, 678, 679, 682, 683, 684, 685, 689, 692, 710, 714, 716, 719, 723, 724, 727, 728, 732, 737, 738, 740, 741, 742, 745, 746, 752, 753, 754, 756, 758, 768, 771, 772, 773, 778, 783, 784, 786, 787, 796, 817, 818, 825, 827, 831, 835, 839, 840, 845, 849, 856, 858, 862, 864, 866, 868, 873, 875, 876, 884, 892, 902, 909, 913, 915, 922, 923, 946, 953, 958, 977, 986, 1004, 1008, 1009, 1027, 1028, 1036, 1039, 1064, 1080, 1081, 1085, 1099, 1100, 1104, 1121, 1130, 1135, 1136, 1142, 1150, 1169, 1171, 1173, 1175, 1177, 1178, 1179, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1195, 1197, 1199, 1201, 1204, 1208, 1209, 1213, 1223, 1224, 1226, 1227, 1228, 1229, 1235, 1239, 1240, 1241, 1242, 1244, 1245, 1246, 1249, 1250, 1251, 1252, 1256, 1259, 1267, 1270, 1274, 1276, 1284, 1295, 1300, 1304, 1305, 1307, 1315, 1323], "In": [50, 57, 135, 137, 148, 149, 152, 163, 167, 172, 177, 194, 196, 199, 208, 223, 224, 227, 238, 242, 249, 275, 284, 317, 320, 548, 549, 610, 668, 669, 796, 818, 831, 835, 840, 841, 858, 875, 909, 1057, 1064, 1169, 1174, 1236, 1295, 1300], "It": [31, 32, 33, 45, 46, 47, 48, 49, 56, 57, 66, 68, 88, 130, 143, 145, 147, 150, 151, 152, 153, 160, 161, 163, 164, 165, 166, 167, 168, 174, 187, 224, 234, 241, 264, 274, 279, 285, 286, 294, 303, 317, 320, 321, 401, 402, 435, 481, 549, 560, 597, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 772, 773, 792, 796, 813, 817, 818, 822, 827, 841, 845, 850, 868, 876, 883, 892, 909, 917, 981, 997, 998, 1034, 1081, 1171, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1196, 1198, 1274, 1279, 1295, 1300], "Its": [209, 317, 479, 796, 1079, 1295], "NO": 915, "NOT": [123, 219, 258, 317, 540, 559, 633, 796, 863, 909, 1323], "No": 20, "Not": [197, 317, 464, 493, 494, 796, 817, 829, 909, 1066, 1295], "ON": 1323, "OR": [716, 717, 831, 909, 915, 1314], "ORs": [381, 796, 972, 1295], "On": [706, 796, 843, 909], "One": [50, 187, 238, 274, 279, 317, 330, 589, 718, 729, 745, 751, 754, 761, 763, 766, 767, 776, 796, 822, 909, 915, 999, 1295], "Or": [207, 208, 223, 249, 263, 287, 296, 317, 457, 610, 643, 737, 738, 740, 741, 783, 784, 786, 792, 796, 834, 835, 840, 858, 867, 885, 909, 1059, 1295], "That": [139, 845, 909], "The": [20, 37, 38, 39, 44, 48, 49, 50, 55, 56, 59, 64, 65, 67, 68, 75, 79, 80, 88, 89, 91, 120, 122, 123, 124, 126, 133, 134, 135, 136, 138, 142, 143, 144, 145, 147, 149, 150, 151, 152, 153, 156, 157, 158, 159, 163, 164, 165, 167, 169, 179, 187, 188, 190, 191, 192, 195, 196, 199, 206, 207, 208, 209, 214, 220, 223, 224, 227, 234, 240, 242, 249, 250, 251, 252, 255, 256, 257, 264, 274, 275, 280, 283, 287, 291, 292, 294, 295, 296, 303, 317, 328, 369, 370, 371, 372, 385, 386, 402, 404, 407, 408, 409, 417, 427, 431, 432, 435, 437, 448, 449, 460, 463, 466, 470, 471, 479, 511, 515, 548, 549, 563, 590, 597, 600, 603, 604, 605, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 637, 640, 646, 650, 651, 655, 660, 661, 662, 666, 667, 668, 669, 677, 678, 679, 680, 681, 682, 683, 693, 697, 703, 704, 705, 724, 726, 744, 748, 756, 758, 772, 773, 774, 775, 778, 786, 788, 789, 791, 792, 796, 797, 798, 801, 803, 804, 805, 812, 817, 822, 823, 825, 827, 828, 831, 834, 835, 838, 840, 841, 845, 850, 854, 858, 860, 861, 862, 868, 872, 874, 879, 880, 883, 885, 892, 909, 913, 914, 915, 921, 924, 961, 962, 963, 976, 985, 998, 999, 1002, 1003, 1004, 1012, 1026, 1030, 1031, 1034, 1036, 1047, 1048, 1064, 1065, 1068, 1079, 1113, 1117, 1150, 1169, 1171, 1173, 1177, 1178, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1205, 1208, 1213, 1217, 1218, 1227, 1228, 1229, 1233, 1234, 1235, 1236, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1276, 1278, 1280, 1287, 1289, 1291, 1295, 1296, 1301, 1302, 1303, 1304, 1309, 1323, 1324, 1326], "Then": 152, "There": 1323, "These": [1, 32, 39, 129, 135, 136, 172, 281, 317, 448, 795, 796, 913, 1034, 1047], "To": [38, 57, 197, 317, 391, 407, 408, 464, 465, 647, 654, 655, 656, 659, 668, 669, 678, 679, 680, 681, 690, 796, 829, 909, 986, 1002, 1003, 1066, 1214, 1221, 1222, 1223, 1226, 1235, 1236, 1257, 1276, 1295, 1323], "Will": [56, 57, 817, 818, 827, 854, 865, 909, 1295], "With": [142, 218, 260, 317, 361, 533, 634, 796, 817, 864, 909, 953, 1099, 1135, 1201, 1295], "_": [1, 50, 54, 242, 272, 276, 317, 354, 519, 648, 656, 658, 664, 665, 670, 673, 674, 865, 909, 980, 1215, 1223, 1231, 1232, 1237, 1241, 1271, 1295], "__array_ufunc__": 917, "__call__": 792, "__dataframe__": 121, "__enter__": 1323, "__exit__": 1323, "__getattr__": 792, "__getitem__": 693, "__init__": [1, 31, 32, 33, 49, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 160, 884, 1323], "__name__": [221, 317], "_bar_": 747, "_btm_by_a": [386, 796], "_btm_by_b": [386, 796], "_by_ca": [386, 705, 796], "_by_cb": [386, 705, 796], "_df": [1, 51], "_diff": [291, 317, 879, 909], "_eager": [817, 909], "_expr": [1, 52], "_foo": 554, "_geventdataframeresult": [57, 818, 909], "_is_not_nan": [494, 796], "_is_odd": [255, 317, 860, 909], "_isnan": [493, 796], "_isnul": [496, 796], "_kwarg": [817, 909], "_ldf": 1, "_lf": 53, "_lower_boundari": [208, 317, 835, 909], "_mean_squar": [296, 885], "_not_nul": [495, 796], "_o": [664, 665, 1231, 1232], "_revers": [574, 578, 607, 796], "_right": [222, 223, 224, 317, 839, 840, 841, 909], "_suffix": 579, "_sum": [296, 885], "_top_by_a": [705, 796], "_top_by_b": [705, 796], "_train": [881, 909], "_upper_boundari": [208, 317, 835, 909], "_world": 747, "a1": [39, 51, 53, 317], "a101": 1326, "a123": [39, 317], "a2": [39, 51, 53, 317], "a_1": [674, 1241, 1271, 1295], "a_2": [1271, 1295], "a_3": [1271, 1295], "a_a": 776, "a_agg_list": [208, 317, 835, 909], "a_b_doubl": 743, "a_btm_by_a": [386, 796], "a_btm_by_b": [386, 796], "a_by_ca": [386, 705, 796], "a_by_cb": [386, 705, 796], "a_div_2": 1317, "a_div_5": 1317, "a_interpol": [485, 796], "a_is_even": [264, 317, 775, 868, 909], "a_isnul": [496, 796], "a_lag_": 726, "a_log2": 1317, "a_mod_2": 1317, "a_not_nul": [495, 796], "a_revers": [574, 578, 607, 796], "a_rol": 726, "a_suffix": 579, "a_times_2": [549, 796], "a_times_b": [548, 796], "a_top_by_a": [705, 796], "a_top_by_b": [705, 796], "a_txt": 776, "aa": [460, 647, 659, 744, 796, 915, 999, 1214, 1226, 1295, 1318], "aaa": [1, 39, 317, 647, 659, 693, 695, 696, 915, 1214, 1226], "aaaa": [962, 963], "aabcdef": 679, "aad": [962, 963], "aag": 26, "aazz": 1318, "ab": [210, 226, 268, 291, 317, 669, 693, 695, 696, 796, 879, 909, 915, 1080, 1104, 1267, 1295, 1316, 1318], "ab12": 669, "ab12cd34ef": 669, "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 326, 653, 656, 668, 678, 796, 915, 1220, 1223, 1235, 1236], "abc123": 1318, "abc456": [668, 1235, 1236, 1318], "abcabc": 669, "abcd": 1318, "abcdeff": 678, "abf": [137, 148, 149], "abl": [95, 135], "about": [95, 135, 640, 647, 655, 656, 659, 668, 669, 796, 913, 1208, 1214, 1222, 1223, 1226, 1235, 1236, 1295, 1326], "abov": [39, 223, 242, 317, 786, 840, 909], "abs_a": 1317, "absolut": [137, 148, 149, 156, 157, 158, 159, 325, 456, 458, 459, 796, 920, 1058, 1060, 1061, 1295, 1317], "acc": [732, 733, 746, 770], "accent": 915, "accept": [131, 133, 134, 137, 139, 141, 143, 145, 147, 150, 151, 152, 163, 179, 189, 207, 255, 256, 260, 263, 280, 291, 292, 296, 317, 326, 386, 391, 460, 486, 590, 604, 605, 643, 670, 697, 705, 713, 715, 717, 722, 725, 726, 727, 735, 744, 760, 762, 765, 774, 778, 780, 786, 792, 796, 812, 824, 834, 860, 861, 864, 867, 872, 879, 880, 885, 909, 913, 914, 986, 1085, 1169, 1177, 1178, 1201, 1237, 1295], "access": [40, 51, 52, 53, 54, 139, 143, 145, 147, 149, 150, 151, 152, 176, 183, 220, 250, 251, 264, 317, 657, 693, 819, 868, 881, 909, 914, 1224, 1326], "accord": [250, 317, 597, 737, 738, 740, 741, 783, 784, 796, 1017, 1171, 1295], "accordingli": [131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146], "account": [39, 127, 136, 149, 317, 431, 456, 458, 459, 796, 1030, 1058, 1060, 1061, 1295], "accumul": [732, 733, 746, 770], "acg": 26, "achiev": [227, 242, 303, 317, 549, 665, 796, 1150, 1232, 1295], "aco": 1316, "acosd": 1316, "across": [39, 50, 136, 188, 209, 229, 231, 236, 257, 267, 317, 404, 479, 563, 715, 717, 732, 733, 735, 760, 762, 765, 780, 796, 823, 862, 909, 1079, 1295], "action": [38, 317], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 512, 656, 1114, 1223], "actual": [39, 123, 163, 167, 252, 317, 1203, 1295, 1318, 1325], "ad": [37, 39, 123, 138, 208, 264, 274, 279, 281, 286, 291, 292, 317, 332, 463, 556, 557, 697, 732, 733, 775, 796, 835, 868, 876, 879, 880, 909, 915, 1065, 1274, 1279, 1295], "adbc": [37, 135, 136, 317], "adbc_driver_manag": 155, "adbc_ingest": [37, 317], "add": [38, 39, 134, 196, 208, 227, 291, 292, 293, 294, 317, 320, 402, 576, 577, 578, 579, 597, 697, 742, 746, 786, 796, 835, 839, 879, 880, 881, 882, 883, 909, 1064, 1295, 1300], "add_calendar_dai": 742, "add_calendar_month": 742, "add_calendar_year": 742, "add_chart": [39, 317], "add_dai": 742, "add_format": [39, 317], "add_hour": 742, "add_milli": 742, "add_second": 742, "add_seri": [39, 317], "add_week": 742, "add_worksheet": [39, 317], "addit": [29, 35, 37, 38, 39, 123, 132, 137, 138, 148, 149, 161, 163, 165, 167, 191, 195, 207, 225, 240, 255, 256, 263, 276, 283, 291, 292, 296, 317, 326, 418, 460, 463, 590, 643, 647, 655, 656, 659, 668, 669, 693, 697, 722, 725, 726, 727, 744, 774, 775, 778, 792, 796, 828, 834, 860, 861, 867, 874, 879, 880, 885, 909, 915, 1005, 1013, 1065, 1214, 1222, 1223, 1226, 1235, 1236, 1277, 1295, 1305, 1323], "addition": [58, 250, 317, 915], "address": 656, "adjac": [39, 317], "adjust": [456, 458, 459, 640, 796, 1058, 1060, 1061, 1208, 1295], "adl": [137, 148, 149], "adlf": 149, "advanc": [39, 242, 317, 366, 540, 573, 576, 578, 580, 581, 958, 1142, 1326], "advantag": [39, 172, 241, 317], "advis": [39, 49, 88, 317], "aedt": 739, "aeiuo": [659, 1226], "af1": 50, "af2": 50, "af3": 50, "affect": [37, 156, 157, 158, 159, 317], "afm": 149, "afoo": [881, 909], "after": [39, 58, 123, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 179, 196, 280, 283, 317, 385, 386, 460, 590, 600, 692, 704, 705, 796, 812, 872, 874, 909, 976, 1064, 1173, 1259, 1280, 1295, 1310], "afterward": [49, 786], "ag": [234, 317, 850, 909, 1324], "again": [549, 796], "against": [37, 97, 133, 135, 199, 264, 317, 512, 659, 775, 831, 868, 909, 1114, 1226, 1304, 1323, 1325, 1326], "agg": [207, 208, 242, 249, 317, 327, 386, 466, 468, 473, 476, 548, 549, 590, 642, 643, 705, 712, 737, 740, 758, 796, 817, 818, 827, 834, 835, 854, 858, 865, 909, 915], "agg_group": [749, 796], "agg_list": [548, 796], "aggreg": [133, 134, 137, 145, 201, 207, 208, 228, 230, 232, 235, 238, 242, 243, 244, 249, 265, 266, 285, 288, 296, 297, 299, 301, 317, 327, 376, 381, 384, 466, 482, 548, 549, 590, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 714, 715, 716, 717, 732, 733, 734, 735, 746, 751, 759, 760, 762, 764, 765, 770, 779, 780, 796, 835, 845, 846, 847, 848, 851, 852, 855, 858, 869, 870, 877, 885, 886, 888, 890, 909, 913, 967, 972, 975, 1082, 1183, 1184, 1185, 1187, 1190, 1191, 1192, 1295, 1311, 1313, 1316, 1322], "aggregate_funct": [242, 317, 915], "aho": [648, 658, 670, 1215, 1225, 1237], "aiosqlit": 135, "alchemy_conn": 135, "algorithm": [178, 317, 333, 648, 658, 670, 718, 796, 811, 909, 925, 1215, 1225, 1237, 1295], "alia": [1, 12, 50, 52, 54, 86, 183, 208, 226, 242, 249, 283, 291, 294, 317, 320, 326, 330, 370, 371, 372, 373, 375, 385, 396, 397, 398, 399, 400, 402, 405, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 454, 455, 468, 470, 475, 477, 483, 486, 489, 492, 500, 502, 524, 536, 542, 547, 549, 553, 556, 557, 559, 561, 566, 569, 571, 573, 584, 585, 589, 591, 595, 597, 600, 602, 630, 632, 647, 648, 649, 650, 652, 653, 655, 656, 658, 659, 660, 664, 665, 670, 671, 672, 673, 674, 675, 676, 680, 681, 683, 693, 694, 695, 696, 698, 703, 704, 706, 712, 713, 719, 720, 721, 725, 726, 727, 737, 740, 742, 743, 746, 747, 752, 755, 757, 758, 770, 778, 783, 786, 796, 835, 837, 844, 858, 874, 879, 883, 909, 998, 1005, 1006, 1009, 1012, 1013, 1014, 1015, 1020, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1104, 1171, 1176, 1222, 1223, 1236, 1241, 1242, 1295], "alias": [264, 317, 556, 557, 868, 909], "alic": [133, 1324], "align": [10, 15, 16, 39, 50, 58, 317, 1324], "align_fram": 58, "all": [1, 4, 5, 8, 13, 17, 20, 25, 30, 36, 38, 39, 44, 45, 48, 50, 56, 63, 89, 106, 108, 120, 125, 130, 133, 134, 137, 138, 139, 141, 143, 144, 145, 147, 150, 151, 160, 161, 164, 167, 172, 177, 178, 180, 187, 189, 191, 198, 210, 215, 217, 219, 220, 221, 222, 224, 225, 226, 231, 233, 237, 238, 242, 245, 246, 250, 251, 252, 256, 262, 263, 267, 268, 272, 274, 275, 279, 282, 284, 285, 286, 287, 292, 294, 317, 320, 330, 332, 354, 369, 386, 395, 401, 407, 408, 409, 410, 460, 465, 471, 478, 479, 482, 484, 488, 491, 495, 496, 501, 511, 512, 519, 537, 540, 548, 570, 573, 574, 576, 577, 578, 579, 580, 581, 588, 590, 600, 605, 607, 611, 635, 641, 643, 649, 653, 656, 657, 660, 663, 669, 677, 678, 679, 683, 705, 715, 724, 732, 733, 734, 735, 744, 746, 751, 752, 755, 762, 770, 778, 779, 780, 786, 792, 796, 802, 808, 811, 814, 817, 818, 822, 824, 825, 827, 830, 839, 841, 845, 849, 854, 856, 861, 865, 866, 867, 873, 875, 876, 880, 881, 883, 909, 915, 946, 997, 999, 1002, 1003, 1004, 1005, 1080, 1086, 1098, 1104, 1113, 1114, 1121, 1139, 1142, 1173, 1178, 1183, 1209, 1216, 1220, 1223, 1224, 1227, 1230, 1236, 1244, 1245, 1246, 1250, 1267, 1276, 1295, 1299, 1300, 1305, 1307, 1312, 1313, 1318, 1322, 1323, 1325, 1326], "all_compat": 1307, "all_data": 1323, "all_horizont": [191, 317, 714, 825, 909], "all_stat": 30, "alloc": [133, 134, 194, 245, 317, 796, 884, 913, 1057, 1295], "allow": [1, 8, 38, 39, 45, 46, 47, 48, 49, 88, 97, 121, 135, 138, 147, 150, 151, 152, 153, 160, 163, 164, 167, 176, 220, 223, 225, 250, 251, 253, 275, 276, 279, 282, 295, 317, 431, 437, 440, 528, 548, 549, 556, 557, 602, 631, 682, 684, 685, 796, 839, 840, 845, 849, 873, 881, 909, 913, 915, 1030, 1036, 1039, 1130, 1150, 1175, 1195, 1249, 1251, 1252, 1276, 1277, 1295, 1318, 1326], "allow_alias": [556, 557], "allow_chunk": [163, 167], "allow_copi": [121, 176, 275, 317, 1276, 1295], "allow_dupl": [597, 796, 1171, 1295], "allow_infin": [163, 167], "allow_missing_column": [145, 152], "allow_nul": [160, 163, 167, 1326], "allow_object": 756, "allow_parallel": [223, 317, 839, 840, 909], "allow_pyarrow_filt": 153, "allow_time_zon": [163, 164, 167], "allowed_dtyp": [163, 164, 167, 1326], "almost": [57, 227, 303, 317, 682, 684, 685, 818, 909, 1150, 1249, 1251, 1252, 1295], "along": [143, 145, 147, 150, 151, 152], "alpha": [456, 458, 459, 796, 827, 854, 865, 909, 915, 1058, 1060, 1061, 1295], "alpha_i": [457, 796, 1059, 1295], "alphabet": [915, 1326], "alphanumer": [690, 915, 1257], "alreadi": [37, 38, 96, 274, 317, 401, 512, 710, 796, 865, 909, 997, 1114, 1284, 1295], "also": [27, 36, 39, 45, 49, 123, 135, 138, 139, 144, 145, 147, 152, 162, 163, 166, 167, 172, 192, 207, 208, 234, 238, 242, 249, 251, 255, 263, 274, 286, 291, 294, 317, 397, 400, 409, 431, 434, 466, 486, 549, 556, 557, 590, 600, 604, 605, 643, 668, 669, 670, 677, 678, 693, 724, 732, 733, 736, 739, 746, 748, 770, 786, 795, 796, 802, 834, 835, 850, 858, 860, 867, 876, 879, 881, 883, 909, 915, 1004, 1033, 1085, 1173, 1177, 1178, 1216, 1235, 1236, 1237, 1244, 1295, 1299, 1305, 1307, 1310, 1314, 1318, 1321, 1323, 1324], "alt": [317, 320, 1295, 1300], "altair": [155, 317, 320, 1295, 1300], "altern": [39, 317, 792, 1315], "although": [264, 317, 868, 909], "alwai": [13, 36, 38, 45, 66, 68, 133, 179, 199, 207, 222, 223, 227, 280, 303, 317, 385, 386, 548, 560, 682, 704, 705, 786, 796, 812, 831, 839, 840, 845, 872, 909, 915, 976, 1150, 1249, 1280, 1295, 1304, 1305, 1323, 1326], "am": [671, 1238], "amarillo": 1318, "amazonaw": 32, "ambigu": [434, 435, 448, 682, 685, 739, 1033, 1034, 1047, 1249, 1252], "america": 740, "amount": [49, 67, 88, 143, 147, 150, 151, 549, 742, 796, 1312], "amsterdam": [434, 1033], "an": [1, 30, 36, 37, 38, 39, 45, 46, 47, 51, 53, 54, 66, 67, 93, 97, 100, 103, 110, 112, 120, 122, 123, 126, 133, 134, 135, 136, 137, 138, 140, 143, 144, 145, 147, 149, 150, 151, 152, 161, 163, 167, 180, 181, 182, 183, 189, 194, 197, 201, 203, 208, 219, 220, 221, 223, 224, 227, 238, 242, 246, 247, 249, 250, 254, 264, 269, 275, 279, 281, 285, 286, 291, 294, 303, 317, 320, 328, 350, 353, 365, 371, 376, 379, 381, 382, 384, 397, 398, 399, 400, 401, 402, 409, 413, 414, 431, 434, 437, 451, 457, 465, 466, 472, 473, 476, 509, 512, 515, 517, 539, 540, 548, 549, 561, 563, 573, 574, 595, 596, 597, 605, 606, 610, 611, 612, 614, 616, 618, 620, 623, 625, 627, 646, 647, 650, 656, 659, 662, 682, 684, 685, 687, 689, 703, 706, 714, 719, 723, 737, 738, 740, 741, 743, 745, 748, 752, 753, 754, 755, 756, 768, 770, 771, 774, 778, 783, 784, 786, 787, 792, 796, 814, 815, 816, 818, 822, 824, 827, 831, 835, 840, 841, 845, 854, 856, 858, 859, 865, 868, 876, 879, 881, 883, 884, 892, 906, 909, 913, 914, 915, 942, 945, 957, 962, 967, 970, 972, 973, 975, 985, 987, 993, 994, 995, 996, 997, 1004, 1008, 1036, 1050, 1057, 1059, 1099, 1111, 1114, 1117, 1119, 1141, 1150, 1178, 1179, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1196, 1198, 1213, 1214, 1217, 1223, 1226, 1229, 1249, 1251, 1252, 1254, 1256, 1276, 1278, 1295, 1313, 1315, 1318, 1322, 1323, 1325], "ana": [671, 1238], "anan": [671, 1238], "ananab": 1318, "and_": 796, "ang": 1318, "angl": [720, 721], "ani": [4, 31, 32, 33, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 55, 56, 57, 65, 66, 68, 120, 121, 122, 123, 124, 125, 126, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 147, 148, 149, 150, 151, 152, 153, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 174, 177, 179, 185, 189, 191, 196, 198, 199, 201, 203, 218, 220, 221, 222, 223, 224, 227, 231, 241, 246, 250, 251, 252, 264, 267, 270, 271, 274, 275, 276, 279, 280, 282, 285, 286, 294, 317, 320, 321, 326, 329, 330, 354, 385, 386, 387, 401, 402, 435, 436, 454, 455, 465, 466, 470, 473, 475, 477, 481, 490, 500, 507, 512, 519, 547, 548, 549, 556, 566, 569, 571, 573, 574, 576, 578, 580, 581, 584, 585, 589, 594, 597, 604, 605, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 632, 636, 646, 648, 661, 678, 679, 680, 681, 682, 684, 685, 687, 689, 698, 704, 705, 706, 713, 714, 715, 717, 727, 728, 729, 756, 758, 772, 773, 786, 796, 812, 817, 818, 824, 825, 827, 830, 831, 839, 840, 841, 853, 856, 868, 872, 873, 876, 883, 884, 909, 913, 915, 917, 919, 922, 946, 976, 981, 997, 998, 1034, 1035, 1054, 1055, 1064, 1067, 1072, 1074, 1076, 1081, 1090, 1099, 1102, 1109, 1114, 1121, 1149, 1150, 1161, 1162, 1171, 1177, 1178, 1179, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1196, 1197, 1213, 1215, 1228, 1249, 1251, 1252, 1254, 1256, 1274, 1275, 1276, 1277, 1279, 1280, 1295, 1300, 1323, 1326], "anna": [234, 317, 850, 909], "anoth": [90, 162, 180, 188, 193, 207, 223, 257, 317, 401, 404, 411, 485, 515, 553, 559, 563, 604, 613, 615, 617, 619, 621, 624, 626, 628, 659, 796, 814, 823, 834, 840, 862, 881, 909, 997, 1006, 1056, 1064, 1084, 1117, 1177, 1178, 1226, 1295, 1317, 1318], "anti": [222, 317, 839, 892, 909, 1196, 1198, 1295, 1311], "any_horizont": 716, "anyth": [38, 250, 317], "anywher": [373, 375, 682, 684, 685, 1249, 1251, 1252], "ap": 1318, "apach": [34, 40, 41, 44, 131, 135, 136, 139, 141, 149, 175, 317, 918], "apaya": [683, 1250], "api": [0, 32, 121, 143, 145, 147, 150, 151, 152, 153, 176, 227, 303, 317, 549, 758, 796, 892, 1150, 1295, 1322], "apia": [410, 1005], "app": [676, 1243], "appear": [39, 62, 123, 158, 159, 317, 669, 708, 796, 915, 1282, 1295, 1324], "append": [37, 38, 163, 196, 222, 223, 224, 317, 601, 786, 796, 839, 840, 841, 909, 1064, 1295], "appl": [184, 212, 222, 246, 247, 270, 298, 299, 301, 302, 304, 305, 306, 307, 308, 309, 310, 317, 386, 607, 652, 676, 705, 796, 839, 856, 887, 888, 890, 891, 893, 894, 895, 896, 897, 898, 899, 909, 1219, 1243, 1311, 1318], "appli": [10, 20, 36, 39, 45, 58, 135, 147, 160, 163, 167, 187, 201, 224, 227, 241, 263, 264, 274, 303, 317, 342, 412, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 430, 432, 433, 436, 438, 449, 450, 452, 458, 459, 548, 549, 594, 612, 613, 614, 615, 618, 619, 625, 626, 643, 668, 669, 682, 684, 685, 689, 722, 732, 733, 746, 757, 758, 770, 775, 786, 796, 822, 841, 845, 853, 867, 868, 892, 909, 986, 1007, 1010, 1011, 1012, 1015, 1016, 1017, 1021, 1022, 1023, 1025, 1026, 1029, 1031, 1032, 1035, 1037, 1048, 1049, 1051, 1060, 1061, 1150, 1184, 1185, 1187, 1191, 1235, 1236, 1249, 1251, 1252, 1256, 1295, 1304], "applic": [275, 317, 549, 796], "appropri": [39, 153, 199, 275, 317, 600, 796, 831, 909, 1173, 1295], "approx": [333, 796], "approx_n_uniqu": [317, 796, 909, 1295], "approxim": [44, 178, 317, 333, 457, 718, 796, 811, 909, 925, 1059, 1295, 1317, 1326], "april": [437, 440, 1036, 1039, 1318, 1319], "ar": [1, 10, 11, 17, 20, 30, 32, 33, 36, 38, 39, 45, 46, 47, 48, 49, 50, 57, 58, 87, 88, 95, 101, 117, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 163, 164, 165, 167, 172, 176, 179, 185, 187, 191, 194, 197, 199, 200, 201, 206, 207, 208, 220, 222, 223, 224, 225, 227, 233, 234, 240, 242, 249, 250, 251, 252, 255, 256, 258, 260, 263, 270, 274, 275, 276, 279, 280, 284, 286, 287, 291, 292, 295, 296, 317, 329, 331, 345, 361, 366, 385, 386, 391, 397, 399, 400, 409, 435, 448, 453, 455, 456, 457, 458, 459, 464, 466, 486, 488, 490, 491, 493, 494, 495, 496, 498, 503, 533, 540, 548, 585, 590, 597, 600, 603, 604, 605, 606, 610, 613, 615, 617, 619, 621, 622, 624, 626, 628, 634, 637, 640, 642, 643, 648, 657, 660, 662, 663, 666, 667, 668, 669, 670, 672, 683, 685, 687, 692, 697, 699, 703, 704, 705, 714, 715, 717, 722, 725, 726, 727, 728, 735, 737, 738, 740, 741, 760, 762, 765, 774, 778, 780, 783, 784, 786, 788, 789, 791, 795, 796, 797, 798, 801, 802, 803, 804, 805, 808, 812, 817, 818, 822, 825, 829, 831, 834, 835, 839, 840, 841, 845, 849, 850, 854, 856, 858, 860, 861, 863, 864, 867, 872, 875, 876, 879, 880, 881, 885, 909, 913, 915, 922, 923, 937, 953, 958, 976, 979, 986, 995, 996, 1004, 1034, 1047, 1053, 1055, 1057, 1058, 1059, 1060, 1061, 1066, 1068, 1070, 1085, 1088, 1090, 1091, 1093, 1094, 1095, 1096, 1100, 1105, 1135, 1142, 1162, 1171, 1173, 1177, 1178, 1179, 1189, 1201, 1205, 1208, 1215, 1224, 1227, 1229, 1233, 1234, 1235, 1236, 1239, 1250, 1252, 1254, 1259, 1266, 1274, 1276, 1277, 1278, 1280, 1287, 1289, 1291, 1295, 1296, 1299, 1301, 1302, 1303, 1305, 1307, 1310, 1315, 1323, 1326], "arbitrari": [77, 203, 317, 404, 796, 823, 909, 915], "arbitrarili": [227, 317], "arcco": [796, 1295], "arccosh": [796, 1295], "arcsin": [796, 1295], "arcsinh": [796, 1295], "arctan": [720, 721, 796, 1295], "arctan2": 721, "arctanh": [796, 1295], "aren": [36, 45, 317, 909], "arg": [31, 49, 60, 61, 63, 64, 69, 70, 71, 72, 73, 74, 76, 77, 78, 80, 81, 82, 83, 84, 85, 199, 241, 317, 342, 594, 722, 747, 796, 831, 853, 909, 913, 1150, 1295, 1308], "arg_max": [796, 1295], "arg_min": [796, 1295], "arg_sort": [796, 1295], "arg_tru": [723, 796, 1295], "arg_uniqu": [796, 1295], "arg_wher": [343, 796], "argmax": [548, 796], "argument": [35, 38, 44, 132, 133, 137, 145, 147, 148, 163, 165, 167, 185, 189, 195, 207, 208, 223, 240, 241, 249, 255, 256, 263, 276, 283, 287, 291, 292, 296, 317, 435, 448, 460, 466, 486, 548, 590, 594, 610, 643, 677, 678, 679, 697, 714, 720, 721, 722, 725, 726, 727, 729, 744, 774, 778, 786, 792, 796, 824, 828, 834, 835, 840, 853, 858, 860, 861, 867, 874, 879, 880, 885, 906, 909, 913, 915, 1034, 1047, 1085, 1244, 1245, 1246, 1277, 1295, 1317, 1318], "aris": 135, "arithmet": [201, 317], "arm": 155, "arm64": 155, "around": [36, 45, 317, 909], "arr": [275, 317, 788, 1276, 1287, 1295], "arr_bar": 1313, "arr_foo": 1313, "arrai": [120, 124, 133, 134, 137, 145, 174, 194, 195, 269, 274, 275, 276, 317, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 397, 398, 399, 400, 507, 522, 523, 524, 525, 527, 536, 537, 539, 542, 544, 548, 606, 612, 614, 616, 618, 620, 623, 625, 627, 633, 703, 743, 775, 796, 828, 909, 914, 917, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 993, 994, 995, 996, 1001, 1057, 1109, 1124, 1125, 1126, 1127, 1129, 1137, 1138, 1139, 1141, 1144, 1146, 1147, 1179, 1184, 1185, 1187, 1190, 1191, 1192, 1199, 1203, 1270, 1274, 1276, 1277, 1278, 1295, 1316, 1322, 1325], "array_agg": 1316, "array_contain": 1316, "array_get": 1316, "array_length": 1316, "array_low": 1316, "array_mean": 1316, "array_revers": 1316, "array_sum": 1316, "array_to_str": 1316, "array_uniqu": 1316, "array_upp": 1316, "arraylik": [1001, 1295], "arrow": [40, 41, 46, 120, 135, 136, 139, 141, 150, 175, 220, 251, 252, 269, 271, 275, 317, 909, 918, 1270, 1276, 1295], "arrowinvaliderror": [38, 317], "as_": [1295, 1300], "as_dict": [134, 240, 317], "as_expr": 915, "as_seri": [180, 270, 317, 814, 909, 915], "asarrai": [174, 917], "ascend": [208, 249, 317, 610, 796, 835, 858, 909], "ascii": [7, 20, 648, 658, 660, 664, 665, 670, 672, 683, 692, 915, 1215, 1225, 1227, 1231, 1232, 1237, 1239, 1250, 1259], "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_case_insensit": [648, 658, 670, 1215, 1225, 1237], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_horizontal_onli": 20, "ascii_lett": 1326, "ascii_markdown": 20, "ascii_no_bord": 20, "ascii_onli": 915, "ascii_uppercas": [285, 317], "asd": [649, 656, 1216, 1223], "asia": [127, 915, 1010, 1011, 1037], "asin": 1316, "asind": 1316, "asof": [223, 317, 840, 909], "asof_join": [223, 317], "asofjoinstrategi": [223, 317, 840, 909], "assert": [156, 157, 158, 159, 163, 167, 249, 317, 808, 915], "assert_frame_equ": [157, 158, 193, 317, 1326], "assert_frame_not_equ": [156, 159], "assert_series_equ": [156, 159, 1056, 1295, 1326], "assert_series_not_equ": [157, 158], "assert_someth": 161, "assertionerror": [156, 157, 158, 159], "assign": [161, 208, 302, 317, 366, 540, 590, 600, 674, 675, 796, 835, 891, 909, 958, 1142, 1173, 1241, 1242, 1295], "associ": [37, 39, 50, 136, 138, 162, 165, 252, 317, 914, 1306, 1308, 1312], "assum": [32, 252, 317, 845, 892, 909, 1318], "assume_rol": 32, "assumpt": [548, 796], "async": [135, 818, 909], "async_engin": 135, "asynchron": [57, 135, 818, 909], "asyncio": [57, 135, 818, 909], "asyncresult": [57, 818, 909], "ata": 26, "atan": 1316, "atan2": [720, 721, 1316], "atan2_ab": 1320, "atan2d": [721, 1316], "atan2d_ab": 1320, "atand": 1316, "atg": 26, "atgataaaggag": 26, "atol": [156, 157, 158, 159], "attain": [643, 796], "attempt": [1, 404, 796, 823, 909], "attr": [317, 320, 1295, 1300], "attribut": [59, 62, 65, 66, 67, 68, 75, 79, 160, 317, 320, 788, 789, 791, 792, 797, 798, 801, 803, 804, 805, 884, 909, 1287, 1289, 1291, 1295, 1296, 1300, 1301, 1302, 1303], "attributeerror": 1, "audi": [270, 317, 607, 796], "australia": 739, "auth": 33, "authent": [38, 137, 145, 147, 148, 149, 150, 152, 317], "author": 1, "auto": [58, 120, 122, 123, 124, 126, 142, 143, 145, 147, 150, 151, 152, 281, 317, 909, 1326], "auto_structifi": [255, 291, 317, 860, 879, 909], "autofilt": [39, 317], "autofit": [39, 317], "autogener": [133, 134, 138, 144, 147], "automat": [8, 36, 45, 120, 122, 123, 124, 126, 127, 133, 134, 135, 136, 138, 142, 143, 145, 147, 150, 151, 163, 167, 169, 255, 264, 291, 317, 548, 605, 677, 678, 679, 775, 796, 860, 868, 879, 909, 913, 1177, 1178, 1244, 1245, 1246, 1279, 1295, 1305, 1307, 1310, 1323], "autumn": [668, 669], "avail": [39, 44, 48, 129, 135, 136, 137, 148, 149, 161, 172, 242, 264, 316, 317, 600, 775, 788, 789, 791, 795, 796, 797, 798, 801, 802, 803, 804, 805, 808, 868, 907, 908, 909, 913, 915, 999, 1173, 1287, 1289, 1291, 1295, 1296, 1299, 1301, 1302, 1303, 1314], "available_timezon": [65, 915], "averag": [39, 317, 456, 457, 458, 459, 600, 796, 1058, 1059, 1060, 1061, 1173, 1295, 1312], "avg": 1316, "avocado": 1318, "avoid": [137, 163, 167, 199, 251, 317, 328, 796, 831, 909], "avro": [34, 131, 317, 808], "avrocompress": [34, 317], "aw": [32, 137, 143, 145, 147, 148, 150, 151, 152], "awai": 1317, "await": [57, 135, 818, 903, 909], "awar": [10, 135, 220, 251, 252, 271, 317, 457, 648, 658, 670, 685, 796, 909, 1059, 1215, 1225, 1237, 1252, 1295], "aws_access_key_id": [38, 137, 148, 152, 317], "aws_region": [38, 148, 152, 317], "aws_secret_access_kei": [38, 137, 148, 152, 317], "awsassumerolekwarg": 32, "axi": [233, 284, 317, 720, 721, 849, 875, 909], "aya": [672, 1239, 1250], "az": [137, 148, 149], "azur": [38, 137, 143, 145, 147, 148, 149, 150, 151, 152, 317], "azure_storage_account_kei": [137, 148, 149], "azure_storage_account_nam": [137, 148, 149], "b": [1, 10, 34, 36, 38, 40, 41, 44, 53, 58, 79, 92, 95, 120, 121, 122, 123, 124, 125, 126, 127, 133, 135, 138, 176, 177, 178, 179, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 217, 218, 219, 220, 221, 222, 225, 226, 228, 230, 232, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 317, 320, 326, 328, 329, 331, 332, 342, 344, 349, 354, 369, 370, 371, 372, 373, 374, 375, 386, 387, 395, 402, 406, 437, 440, 460, 462, 464, 465, 466, 468, 471, 478, 479, 482, 484, 485, 486, 488, 491, 493, 494, 495, 496, 501, 507, 512, 519, 529, 530, 531, 532, 548, 549, 554, 563, 570, 573, 574, 575, 576, 577, 578, 579, 587, 588, 590, 594, 597, 600, 604, 605, 607, 609, 635, 641, 643, 650, 654, 659, 662, 668, 669, 693, 694, 705, 708, 712, 714, 715, 716, 717, 718, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 743, 744, 745, 746, 747, 750, 751, 752, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 772, 773, 775, 777, 778, 779, 780, 781, 785, 792, 796, 811, 812, 815, 816, 817, 818, 819, 820, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 859, 860, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 909, 915, 921, 924, 946, 961, 962, 963, 964, 965, 966, 979, 980, 981, 998, 1001, 1036, 1039, 1053, 1056, 1057, 1064, 1067, 1085, 1090, 1109, 1131, 1132, 1133, 1134, 1171, 1176, 1217, 1221, 1226, 1229, 1235, 1236, 1260, 1262, 1263, 1265, 1277, 1282, 1295, 1305, 1307, 1308, 1310, 1311, 1312, 1313, 1318, 1319, 1320, 1323], "b1": [51, 53], "b2": [51, 53], "b345": [39, 317], "b4": [39, 317], "b_b": [264, 317], "b_btm_by_a": [386, 796], "b_btm_by_b": [386, 796], "b_by_ca": [386, 705, 796], "b_by_cb": [386, 705, 796], "b_is_not_nan": [494, 796], "b_isnan": [493, 796], "b_isnul": [496, 796], "b_not_nul": [495, 796], "b_revers": [574, 578, 607, 796], "b_suffix": 579, "b_sum": [296, 885], "b_top_by_a": [705, 796], "b_top_by_b": [705, 796], "ba": [404, 460, 563, 676, 744, 796, 915], "back": [4, 50, 152, 196, 208, 257, 275, 276, 317, 563, 590, 669, 796, 817, 835, 862, 884, 909, 1064, 1277, 1295], "backend": [38, 135, 136, 137, 148, 149, 317, 320, 1295, 1300], "background": [317, 321, 817, 908, 909], "backward": [44, 48, 198, 223, 317, 369, 409, 429, 465, 796, 830, 840, 909, 1004, 1028, 1067, 1295], "backward_fil": [471, 634, 796], "bad": [668, 669, 1235, 1236], "balanc": [166, 168, 1326], "ballon_dor": [655, 657, 1222, 1224], "banana": [184, 270, 299, 301, 304, 305, 306, 307, 308, 309, 310, 317, 386, 607, 652, 676, 705, 796, 888, 890, 893, 894, 895, 896, 897, 898, 899, 1318], "banded_column": [39, 317], "banded_row": [39, 317], "bar": [34, 36, 38, 40, 41, 42, 43, 44, 130, 142, 143, 180, 183, 184, 185, 189, 190, 191, 192, 193, 196, 199, 201, 203, 204, 205, 210, 212, 213, 214, 216, 222, 226, 227, 228, 229, 230, 231, 232, 235, 236, 239, 242, 244, 246, 247, 250, 253, 254, 255, 257, 262, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 282, 283, 288, 289, 290, 295, 317, 320, 388, 404, 483, 553, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 640, 649, 651, 654, 656, 657, 671, 673, 675, 680, 681, 718, 728, 729, 730, 745, 750, 751, 754, 755, 759, 761, 763, 764, 766, 767, 774, 777, 781, 785, 786, 792, 796, 814, 819, 820, 824, 825, 826, 831, 837, 838, 839, 852, 856, 859, 860, 873, 874, 878, 909, 914, 915, 978, 1121, 1208, 1216, 1218, 1221, 1223, 1224, 1238, 1242, 1247, 1248, 1295, 1309, 1311, 1312, 1313, 1315, 1318, 1321], "bar2": 1318, "bar22": [201, 317], "bar_": 673, "bar_3": [272, 317], "bar_4": [272, 317], "bar_a": [242, 317], "bar_at_2": 1313, "bar_avg": 1312, "bar_b": [242, 317], "bar_color": [39, 317], "bar_max": 1312, "bar_median": 1312, "bar_min": 1312, "bar_negative_border_color_sam": [39, 317], "bar_negative_color_sam": [39, 317], "bar_std": 1312, "bar_sum": 1312, "bar_var": 1312, "bare": [556, 557, 915], "base": [31, 39, 63, 106, 108, 165, 191, 199, 208, 224, 249, 317, 410, 418, 453, 456, 457, 458, 459, 466, 481, 485, 543, 544, 548, 549, 595, 597, 605, 610, 613, 615, 617, 619, 621, 624, 626, 628, 687, 796, 825, 831, 835, 841, 858, 909, 915, 1005, 1013, 1053, 1058, 1059, 1060, 1061, 1081, 1084, 1145, 1146, 1150, 1169, 1171, 1177, 1178, 1254, 1286, 1295, 1311, 1317, 1326], "base64": [371, 372, 650, 651, 962, 963, 1217, 1218], "base_nam": [281, 317], "base_utc_offset": [418, 1013], "baseexcept": 1323, "basi": [39, 138, 163, 317], "basic": [39, 174, 317, 555, 917, 1326], "basic_chart": [39, 317], "batch": [41, 56, 57, 129, 134, 135, 141, 143, 151, 153, 251, 279, 317, 817, 818, 845, 909], "batch_siz": [36, 45, 133, 134, 135, 143, 151, 153, 279, 317, 909], "batchedcsvread": 134, "baz": [203, 213, 214, 283, 317, 657, 673, 675, 745, 754, 767, 792, 838, 874, 909, 914, 915, 1224, 1242, 1309, 1315, 1318], "bb": [915, 999, 1295, 1318, 1323], "bbb": [1, 39, 317, 693, 695, 696, 915], "bc": [659, 669, 779, 1226], "bcbc45": 1318, "bea": 12, "bear": 915, "beauti": 12, "becaus": [143, 151, 194, 208, 225, 227, 285, 303, 317, 470, 512, 796, 835, 892, 909, 1057, 1114, 1150, 1295], "becom": [165, 316, 907, 908], "bed3": [39, 317], "been": [5, 30, 39, 170, 176, 298, 317, 472, 549, 567, 600, 796, 887, 1173, 1295], "beetl": [270, 317, 607, 796], "befor": [39, 64, 65, 133, 135, 138, 147, 153, 156, 157, 158, 159, 169, 172, 196, 208, 223, 264, 274, 279, 283, 317, 379, 380, 382, 383, 399, 400, 401, 548, 590, 591, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 654, 692, 699, 726, 772, 773, 796, 835, 837, 840, 874, 909, 913, 970, 971, 973, 974, 995, 996, 997, 1064, 1166, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1221, 1259, 1266, 1295, 1311], "beforehand": [682, 684, 685, 1249, 1251, 1252], "begin": [12, 39, 317, 456, 458, 459, 655, 683, 796, 1058, 1060, 1061, 1222, 1250, 1295], "behav": [199, 317, 466, 549, 678, 679, 796, 831, 909], "behavior": [44, 48, 145, 152, 191, 199, 222, 223, 317, 353, 472, 515, 517, 654, 745, 754, 796, 825, 831, 839, 840, 906, 909, 945, 1117, 1119, 1221], "behaviour": [10, 50, 58, 191, 264, 317, 647, 655, 656, 659, 668, 669, 706, 775, 796, 825, 868, 909, 1214, 1222, 1223, 1226, 1235, 1236], "behind": 169, "being": [13, 31, 32, 33, 45, 46, 47, 48, 56, 57, 66, 68, 130, 133, 134, 135, 138, 143, 144, 145, 147, 150, 151, 152, 153, 160, 161, 163, 164, 165, 166, 167, 168, 180, 195, 224, 264, 272, 274, 279, 285, 286, 317, 320, 321, 401, 402, 435, 481, 549, 597, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 654, 724, 743, 772, 773, 796, 814, 817, 818, 827, 828, 841, 868, 876, 909, 981, 997, 998, 1034, 1081, 1171, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1221, 1271, 1274, 1279, 1295, 1300, 1326], "belong": [1, 208, 317, 835, 909], "below": [19, 38, 137, 138, 148, 149, 191, 199, 242, 317, 465, 660, 668, 669, 683, 737, 738, 740, 741, 783, 784, 786, 792, 796, 825, 831, 909, 1227, 1235, 1236, 1250], "benchmark": 133, "best": [227, 303, 317, 549, 796, 1150, 1295], "better": [227, 274, 275, 303, 317, 549, 665, 796, 813, 892, 909, 1196, 1198, 1232, 1295], "between": [24, 58, 91, 160, 161, 163, 167, 177, 185, 244, 251, 309, 317, 354, 387, 405, 406, 486, 510, 519, 529, 530, 531, 532, 591, 597, 598, 620, 621, 646, 661, 720, 721, 724, 728, 730, 769, 772, 773, 796, 855, 898, 909, 946, 977, 980, 1000, 1001, 1085, 1112, 1121, 1131, 1132, 1133, 1134, 1166, 1171, 1172, 1188, 1213, 1228, 1295, 1312, 1320], "between_ab": [486, 796], "beyond": [690, 1257], "bia": [458, 459, 498, 622, 640, 796, 1060, 1061, 1100, 1189, 1208, 1295], "bias": [498, 640, 796, 1100, 1208, 1295], "big": 134, "big_fil": 134, "bigidx": 128, "bigqueri": 136, "bin": [402, 481, 597, 687, 713, 789, 796, 998, 1081, 1171, 1254, 1289, 1295, 1300], "bin_count": [481, 796, 1081, 1295], "bin_i": [713, 796], "bin_x": [713, 796], "bin_xor_xi": [713, 796], "binari": [40, 135, 188, 257, 317, 370, 371, 372, 373, 374, 375, 404, 563, 650, 796, 823, 862, 909, 915, 961, 962, 964, 965, 966, 1217, 1314], "binary_str": [713, 796], "bind": 138, "birthdai": 133, "bit": [64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 80, 81, 82, 83, 84, 377, 378, 379, 380, 382, 383, 602, 647, 796, 968, 970, 971, 973, 974, 1175, 1214, 1295, 1314, 1318], "bit_and": 1316, "bit_count": 1316, "bit_length": 1316, "bit_or": 1316, "bit_xor": 1316, "bitmap": [194, 317, 1057, 1295], "bitwis": [330, 376, 381, 384, 589, 713, 714, 715, 716, 717, 796, 967, 972, 975, 1295, 1314, 1316], "bitwise_and": [796, 1295], "bitwise_count_on": [796, 1295], "bitwise_count_zero": [796, 1295], "bitwise_leading_on": [796, 1295], "bitwise_leading_zero": [796, 1295], "bitwise_or": [796, 1295], "bitwise_trailing_on": [796, 1295], "bitwise_trailing_zero": [796, 1295], "bitwise_xor": [796, 1295], "bla": [649, 656, 1216, 1223], "black": [227, 317, 370, 371, 372, 373, 375], "blindli": [512, 1114], "block": [20, 57, 207, 282, 317, 786, 818, 834, 856, 873, 882, 883, 892, 909, 1196, 1198, 1295], "blue": [49, 87, 88, 370, 371, 372, 373, 375, 710, 796, 1284, 1295], "bob": [133, 234, 317, 850, 909, 1324], "bodi": [39, 317, 321], "bold": [39, 317], "bom": [36, 45, 317, 909], "bool": [5, 7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 36, 38, 39, 44, 45, 46, 47, 48, 50, 56, 57, 58, 87, 120, 121, 122, 123, 125, 126, 127, 130, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 147, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 174, 176, 179, 180, 181, 182, 187, 189, 193, 198, 199, 200, 201, 205, 206, 207, 208, 212, 213, 215, 216, 217, 220, 222, 223, 231, 240, 242, 246, 250, 251, 252, 253, 258, 261, 263, 264, 267, 270, 272, 275, 276, 280, 281, 282, 283, 286, 287, 289, 291, 299, 301, 304, 307, 317, 328, 329, 330, 331, 332, 342, 345, 346, 349, 353, 354, 362, 367, 370, 371, 373, 375, 386, 387, 396, 397, 398, 399, 400, 401, 402, 409, 421, 436, 453, 454, 455, 456, 458, 459, 475, 477, 478, 481, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 503, 504, 508, 512, 515, 517, 519, 528, 535, 541, 547, 548, 549, 553, 554, 555, 556, 557, 558, 559, 560, 564, 565, 584, 585, 587, 589, 592, 593, 597, 600, 602, 611, 612, 614, 616, 618, 620, 622, 623, 625, 627, 631, 633, 635, 640, 642, 643, 646, 647, 648, 649, 650, 652, 658, 659, 661, 668, 669, 670, 673, 674, 676, 682, 684, 685, 687, 689, 693, 695, 696, 705, 707, 710, 713, 714, 715, 716, 717, 719, 722, 723, 724, 727, 728, 731, 732, 737, 738, 740, 741, 752, 753, 756, 758, 768, 771, 775, 778, 783, 784, 786, 787, 796, 812, 814, 815, 817, 818, 822, 824, 827, 830, 831, 834, 835, 839, 840, 845, 849, 854, 856, 863, 865, 867, 868, 872, 873, 874, 875, 876, 879, 884, 888, 890, 893, 896, 909, 913, 914, 915, 917, 922, 923, 934, 937, 938, 941, 945, 946, 954, 959, 961, 962, 964, 966, 977, 979, 981, 985, 992, 993, 994, 995, 996, 997, 998, 1004, 1016, 1035, 1053, 1055, 1056, 1058, 1060, 1061, 1068, 1070, 1077, 1078, 1081, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1105, 1106, 1110, 1114, 1117, 1119, 1121, 1130, 1137, 1143, 1150, 1162, 1164, 1167, 1168, 1171, 1173, 1174, 1175, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1195, 1198, 1199, 1203, 1208, 1210, 1213, 1214, 1215, 1216, 1217, 1219, 1225, 1226, 1228, 1235, 1236, 1237, 1240, 1241, 1243, 1249, 1251, 1252, 1254, 1256, 1271, 1276, 1277, 1281, 1284, 1295, 1304, 1305, 1307, 1313, 1318, 1323], "boolean": [50, 163, 179, 199, 201, 263, 280, 317, 329, 330, 331, 345, 346, 349, 370, 373, 375, 386, 421, 466, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 503, 504, 508, 587, 589, 592, 593, 643, 662, 705, 712, 713, 722, 723, 778, 786, 796, 812, 831, 867, 872, 909, 915, 922, 923, 935, 937, 938, 941, 961, 1016, 1068, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1105, 1106, 1110, 1164, 1167, 1168, 1198, 1214, 1286, 1295, 1315], "border": 20, "both": [10, 25, 36, 45, 49, 87, 88, 135, 152, 183, 208, 222, 223, 224, 234, 249, 250, 276, 286, 317, 332, 391, 402, 460, 486, 597, 610, 613, 615, 617, 619, 621, 624, 626, 628, 672, 737, 738, 740, 741, 783, 784, 792, 796, 807, 835, 839, 840, 841, 850, 858, 876, 909, 915, 986, 1085, 1239, 1277, 1295, 1323, 1324], "boto3": 32, "bottom": [179, 317, 386, 796, 812, 909], "bottom_k": [280, 317, 386, 704, 705, 796, 872, 909, 1280, 1295], "bottom_k_bi": [385, 704, 705, 796], "bound": [102, 133, 134, 194, 208, 317, 353, 391, 486, 515, 517, 540, 546, 709, 719, 737, 738, 740, 741, 783, 784, 796, 835, 909, 945, 986, 1057, 1085, 1117, 1119, 1148, 1283, 1295, 1313], "boundari": [208, 317, 391, 481, 690, 796, 835, 909, 986, 1081, 1257, 1295], "box": [20, 227, 317], "box_draw": 20, "branch": [56, 57, 817, 818, 827, 854, 865, 909], "break": [31, 32, 33, 45, 46, 47, 48, 56, 57, 66, 68, 130, 143, 145, 147, 150, 151, 152, 153, 160, 161, 163, 164, 165, 166, 167, 168, 224, 264, 274, 279, 285, 286, 317, 320, 321, 401, 402, 435, 481, 549, 597, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 772, 773, 796, 817, 818, 827, 841, 868, 876, 909, 981, 997, 998, 1034, 1081, 1171, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1274, 1279, 1295, 1300], "breakpoint": [402, 481, 597, 796, 998, 1081, 1171, 1295], "breezah": 147, "breviti": 172, "broadcast": [670, 915, 1237], "broader": 915, "brotli": [44, 48, 317, 909], "brussel": [434, 1033], "bst": [414, 418, 434, 1009, 1013, 1033], "bucket": [38, 137, 148, 149, 152, 317, 435, 448, 481, 796, 1034, 1047, 1081, 1295], "bud": [668, 669, 1235, 1236], "budget": 1304, "buffer": [133, 134, 135, 194, 220, 317, 1057, 1295], "buffer_s": [220, 317], "bug": [548, 549, 796, 845, 892, 909, 1150, 1295], "build": [55, 121, 915, 1326], "built": 91, "builtin": [131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 188, 317, 404, 796, 823, 909], "busi": [409, 724, 1004], "business_day_count": [409, 1004], "by_alternate_row": 1, "by_dtyp": 915, "by_first_letter_of_column_nam": 51, "by_first_letter_of_column_valu": 51, "by_index": 915, "by_left": [223, 317, 840, 909], "by_nam": 915, "by_pred": [250, 317], "by_right": [223, 317, 840, 909], "bye": 1, "byi": 1318, "bys": [208, 317, 835, 909], "byte": [34, 36, 39, 40, 41, 44, 45, 48, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 188, 194, 257, 317, 404, 563, 660, 664, 665, 672, 683, 796, 823, 862, 909, 1057, 1227, 1231, 1232, 1239, 1250, 1295, 1318], "bytesio": [39, 40, 41, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 188, 257, 317, 404, 563, 796, 823, 862, 909], "c": [1, 10, 34, 36, 38, 40, 41, 44, 51, 53, 58, 95, 121, 123, 125, 127, 138, 147, 176, 177, 179, 180, 181, 182, 183, 184, 186, 189, 190, 191, 192, 193, 195, 199, 201, 204, 205, 206, 207, 208, 210, 212, 213, 221, 222, 225, 226, 228, 230, 232, 235, 237, 238, 239, 240, 242, 243, 244, 246, 247, 248, 250, 253, 254, 255, 262, 263, 264, 265, 266, 268, 269, 272, 273, 274, 275, 276, 277, 280, 284, 285, 286, 288, 289, 291, 296, 299, 300, 301, 304, 305, 307, 310, 311, 317, 321, 326, 328, 329, 331, 349, 369, 386, 402, 478, 486, 507, 519, 549, 556, 573, 574, 588, 590, 594, 597, 635, 674, 682, 705, 708, 715, 717, 718, 720, 721, 722, 725, 727, 728, 729, 730, 732, 733, 735, 745, 746, 747, 750, 751, 754, 755, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 777, 779, 780, 781, 785, 792, 796, 812, 814, 815, 816, 817, 818, 819, 820, 821, 824, 825, 826, 827, 828, 831, 834, 835, 839, 843, 852, 854, 856, 857, 859, 860, 865, 866, 867, 868, 872, 875, 876, 879, 881, 885, 888, 889, 890, 893, 894, 896, 899, 900, 909, 913, 915, 980, 998, 1085, 1109, 1171, 1241, 1249, 1263, 1282, 1295, 1305, 1307, 1308, 1310, 1311, 1312, 1313, 1318, 1323], "c00": 915, "c01": 915, "c02": 915, "c03": 915, "c05": 915, "c1": 366, "c123": 1318, "c2": 366, "c20": 915, "c25": 915, "c3": 366, "c40": 915, "c45": 1318, "c4d79b": [39, 317], "c50": 915, "c567": [39, 317], "c60": 915, "c75": 915, "c80": 915, "c8ae6d2b276": [39, 317], "c93": 915, "c95": 915, "c96": 915, "c97": 915, "c98": 915, "c99": 915, "c_btm_by_a": [386, 796], "c_btm_by_b": [386, 796], "c_by_ca": [386, 705, 796], "c_by_cb": [386, 705, 796], "c_c_c": [775, 868, 909], "c_contigu": [275, 317], "c_max": [590, 796], "c_mean_squar": [296, 885], "c_min": [590, 796], "c_top_by_a": [705, 796], "c_top_by_b": [705, 796], "c_total": 1323, "cach": [49, 56, 57, 87, 88, 115, 139, 147, 150, 152, 156, 157, 158, 159, 171, 604, 605, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 682, 684, 685, 689, 796, 807, 817, 818, 827, 854, 865, 909, 979, 1177, 1178, 1249, 1251, 1252, 1256, 1295], "cadi": [242, 317], "cafe": [687, 1254], "caf\u00e9": [664, 665, 915, 1231, 1232], "calamin": 138, "calcul": [39, 44, 48, 50, 187, 208, 265, 288, 317, 405, 456, 457, 458, 459, 498, 510, 529, 536, 542, 546, 622, 640, 645, 709, 711, 728, 730, 772, 773, 777, 785, 796, 822, 835, 869, 877, 909, 999, 1000, 1058, 1059, 1060, 1061, 1100, 1112, 1131, 1189, 1208, 1212, 1285, 1295], "calendar": [64, 65, 208, 223, 249, 287, 317, 412, 422, 424, 431, 435, 448, 452, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 737, 738, 740, 741, 742, 783, 784, 796, 835, 840, 858, 909, 1007, 1017, 1022, 1030, 1034, 1047, 1051, 1059, 1295], "calendar_year": [422, 452], "call": [39, 49, 56, 57, 125, 134, 135, 138, 143, 145, 147, 150, 151, 152, 156, 157, 158, 159, 163, 167, 172, 179, 207, 208, 225, 227, 249, 264, 275, 280, 316, 317, 385, 386, 397, 400, 409, 548, 549, 573, 574, 576, 578, 580, 581, 604, 605, 636, 704, 705, 724, 729, 792, 796, 812, 817, 818, 827, 834, 835, 854, 858, 865, 868, 872, 906, 907, 908, 909, 913, 915, 976, 1004, 1150, 1178, 1204, 1276, 1280, 1295, 1305, 1309, 1323], "callabl": [51, 52, 53, 54, 147, 201, 227, 241, 246, 303, 317, 366, 540, 548, 549, 574, 575, 594, 611, 732, 733, 746, 757, 758, 770, 796, 845, 853, 856, 892, 909, 958, 1142, 1150, 1183, 1295], "caller": [136, 234, 317, 540, 845, 850, 892, 909], "cam": [246, 317, 856, 909], "can": [1, 14, 27, 39, 44, 49, 50, 56, 57, 64, 65, 67, 79, 87, 88, 123, 133, 134, 135, 138, 139, 143, 144, 145, 147, 150, 151, 152, 153, 161, 162, 163, 167, 169, 172, 174, 179, 181, 191, 192, 201, 203, 207, 208, 215, 217, 219, 223, 227, 238, 242, 249, 251, 252, 255, 257, 258, 263, 274, 275, 279, 280, 281, 285, 291, 294, 303, 317, 329, 366, 386, 397, 400, 401, 404, 409, 428, 429, 431, 434, 437, 440, 448, 457, 463, 466, 486, 512, 540, 548, 549, 556, 560, 563, 570, 573, 574, 576, 578, 580, 581, 590, 595, 597, 602, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 633, 635, 640, 643, 648, 657, 663, 668, 669, 670, 677, 678, 679, 682, 693, 705, 722, 724, 736, 739, 746, 748, 752, 753, 758, 775, 786, 792, 795, 796, 807, 812, 813, 817, 818, 823, 825, 827, 835, 840, 858, 860, 862, 863, 865, 867, 868, 872, 879, 882, 883, 909, 915, 917, 958, 997, 1004, 1027, 1028, 1030, 1033, 1034, 1036, 1039, 1047, 1059, 1065, 1085, 1114, 1142, 1150, 1155, 1169, 1171, 1175, 1178, 1196, 1198, 1199, 1202, 1208, 1215, 1216, 1224, 1230, 1235, 1236, 1237, 1244, 1245, 1246, 1249, 1274, 1276, 1295, 1310, 1323], "cancel": [817, 909], "candid": [655, 657, 1222, 1224], "cannot": [1, 44, 48, 97, 100, 133, 134, 138, 139, 141, 144, 145, 152, 169, 227, 252, 253, 275, 294, 303, 317, 371, 460, 528, 549, 564, 631, 650, 674, 695, 758, 796, 865, 883, 884, 892, 909, 915, 962, 1130, 1150, 1195, 1217, 1241, 1276, 1295], "capabl": [1, 39, 317], "capac": [194, 261, 317, 1057, 1203, 1295], "capit": [690, 1257, 1318], "captur": [655, 657, 668, 669, 1222, 1224, 1235, 1236], "car": [246, 270, 317, 607, 796, 856, 909], "cardin": [178, 317, 333, 718, 796, 811, 909, 925, 1295], "care": [39, 258, 317, 549, 590, 633, 796, 863, 909, 1199, 1295], "cars_revers": [607, 796], "cartesian": [222, 317, 839, 909], "case": [39, 49, 50, 57, 95, 120, 122, 123, 124, 126, 135, 142, 143, 151, 152, 169, 196, 208, 220, 227, 242, 249, 251, 252, 271, 274, 275, 317, 410, 457, 548, 560, 561, 574, 610, 647, 648, 656, 658, 659, 668, 669, 670, 690, 796, 818, 835, 858, 909, 913, 915, 1005, 1059, 1064, 1214, 1215, 1223, 1225, 1226, 1235, 1236, 1237, 1257, 1274, 1295], "cast": [1, 38, 52, 53, 120, 122, 123, 126, 156, 157, 158, 159, 201, 208, 241, 249, 274, 275, 279, 291, 317, 332, 399, 400, 411, 437, 440, 451, 589, 594, 595, 602, 604, 610, 662, 663, 692, 699, 703, 726, 727, 776, 796, 835, 853, 858, 879, 909, 913, 915, 981, 995, 996, 1006, 1036, 1039, 1050, 1169, 1175, 1229, 1230, 1259, 1266, 1272, 1276, 1278, 1279, 1295, 1316], "cast_str_to_int": [241, 317, 853, 909], "cast_to_supertyp": [796, 913], "cat": [26, 49, 87, 88, 402, 597, 647, 649, 688, 691, 703, 727, 791, 796, 915, 998, 1081, 1171, 1214, 1216, 1255, 1258, 1291, 1295], "categor": [38, 49, 68, 87, 88, 90, 156, 157, 158, 159, 222, 272, 317, 388, 402, 597, 604, 605, 703, 796, 915, 978, 979, 980, 981, 998, 1171, 1177, 1178, 1278, 1295], "categori": [39, 49, 68, 88, 272, 317, 388, 402, 481, 597, 796, 978, 998, 1081, 1171, 1271, 1295], "categorical_as_str": [156, 157, 158, 159], "categoricalord": 62, "categoricaltyp": [269, 317], "caus": [103, 112, 121, 133, 134, 135, 147, 176, 196, 275, 317, 548, 796, 1064, 1276, 1295], "cba": 679, "cbrt": [796, 1295, 1316], "cbrt_a": 1317, "cc": [460, 744, 796, 915, 999, 1295, 1318], "ccc": [1, 39, 317, 693, 695, 696, 915, 1318], "ccy": 1326, "cd": [669, 693, 695, 696, 915], "cd34": 669, "cdatainterfac": [175, 918], "cde": [915, 1318], "cdt": [435, 448, 1034, 1047], "ceil": [52, 796, 1295, 1316], "ceil_a": 1317, "cell": [15, 16, 39, 242, 317], "cent": [412, 1235], "center": [15, 16, 39, 317, 456, 458, 459, 611, 612, 614, 616, 618, 620, 623, 625, 627, 796, 1058, 1060, 1061, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1295], "central": [148, 149, 498, 640, 796, 1100, 1208, 1295], "centuri": 1319, "certain": [45, 46, 47, 48, 57, 137, 148, 213, 287, 317, 678, 679, 792, 817, 818, 854, 909, 1295], "certainli": [682, 684, 685, 1249, 1251, 1252], "cest": [434, 1033], "cet": [434, 1033], "cfg": [2, 4, 17, 172], "cfoo": [881, 909], "chain": [573, 574, 576, 578, 580, 581, 786], "chanc": [160, 163, 167, 1326], "chang": [30, 31, 32, 33, 44, 45, 46, 47, 48, 50, 56, 57, 66, 68, 130, 133, 134, 135, 138, 143, 145, 147, 150, 151, 152, 153, 160, 161, 163, 164, 165, 166, 167, 168, 224, 264, 274, 279, 285, 286, 293, 317, 320, 321, 401, 402, 405, 435, 481, 549, 590, 591, 597, 604, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 772, 773, 796, 817, 818, 827, 841, 868, 876, 882, 909, 913, 915, 980, 981, 997, 998, 1034, 1081, 1166, 1171, 1177, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1203, 1274, 1279, 1295, 1300], "changes_length": [796, 913], "char": [27, 656, 1223], "char_length": 1318, "charact": [7, 9, 12, 20, 26, 27, 28, 36, 37, 45, 89, 132, 133, 134, 136, 147, 317, 431, 653, 654, 656, 660, 664, 665, 666, 667, 668, 669, 672, 673, 674, 677, 678, 679, 680, 681, 683, 690, 692, 854, 909, 915, 1030, 1220, 1221, 1223, 1227, 1231, 1232, 1233, 1234, 1235, 1236, 1239, 1240, 1241, 1244, 1245, 1246, 1250, 1257, 1259, 1318], "character_length": 1318, "characterist": [163, 167], "charli": [133, 1324], "chart": [39, 317, 320, 854, 909, 1295, 1300], "cheap": [181, 182, 256, 292, 317, 815, 816, 861, 880, 909, 985, 987, 1295], "cheaper": [515, 1117], "check": [38, 65, 97, 133, 134, 147, 156, 157, 158, 159, 171, 193, 218, 222, 317, 349, 370, 373, 375, 478, 486, 490, 508, 647, 652, 659, 676, 796, 839, 845, 909, 941, 961, 964, 966, 1056, 1077, 1078, 1087, 1090, 1097, 1099, 1110, 1214, 1219, 1226, 1243, 1295], "check_column_ord": [156, 157], "check_dtyp": [156, 157, 158, 159, 914, 1056, 1295], "check_exact": [156, 157, 158, 159], "check_nam": [158, 159, 1056, 1295], "check_ord": [158, 159], "check_row_ord": [156, 157], "choos": [44, 46, 48, 208, 242, 317, 835, 909], "chrono": [36, 45, 91, 317, 437, 440, 682, 684, 685, 689, 909, 1036, 1039, 1249, 1251, 1252, 1256, 1318, 1319], "chunk": [14, 48, 129, 133, 134, 137, 143, 145, 147, 150, 151, 152, 163, 167, 196, 221, 237, 275, 317, 332, 601, 796, 909, 924, 984, 1064, 1075, 1156, 1174, 1270, 1276, 1295], "chunk_length": 1295, "chunkedarrai": [120, 237, 317], "citi": [668, 669], "clang": 155, "clariti": [250, 317], "class": [1, 17, 31, 32, 33, 49, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 106, 108, 160, 161, 252, 317, 783, 792, 796, 802, 808, 820, 826, 859, 878, 884, 909, 914, 1275, 1295, 1299, 1307, 1323], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 188, 317, 404, 472, 796, 823, 909, 1305, 1323], "claus": [808, 1313, 1322], "clean": [682, 684, 685, 1249, 1251, 1252], "cleaner": 172, "cleanli": [10, 206, 317, 1323], "clear": [49, 87, 182, 317, 816, 909, 987, 1295], "clearer": 123, "clickhous": 136, "client": [32, 135], "clip": [796, 1295], "clipboard": [35, 132, 317, 808], "clone": [122, 123, 124, 125, 126, 181, 275, 317, 815, 909, 985, 1295], "close": [39, 135, 208, 249, 264, 317, 402, 486, 545, 597, 610, 613, 615, 617, 619, 621, 624, 626, 628, 640, 737, 738, 740, 741, 783, 784, 796, 835, 858, 868, 909, 998, 1085, 1171, 1208, 1295], "closedinterv": [208, 249, 317, 486, 610, 613, 615, 617, 619, 621, 624, 626, 628, 737, 738, 740, 741, 783, 784, 796, 835, 858, 909, 1085, 1295], "closest": [120, 223, 317, 840, 909, 1312, 1317], "closur": [613, 615, 624, 626, 628, 796], "cloud": [33, 38, 135, 137, 143, 145, 147, 148, 149, 150, 151, 152, 153, 317, 808], "cloudi": [668, 669], "cloudpickl": 155, "cluster": 152, "cluster_with_column": [56, 57, 817, 818, 827, 854, 865, 909], "co": [656, 796, 1223, 1295, 1316], "coalesc": [222, 223, 286, 317, 484, 658, 682, 796, 839, 840, 876, 909, 1249, 1311, 1316], "code": [183, 317, 370, 371, 372, 373, 375, 404, 549, 633, 796, 823, 843, 909, 1199, 1295, 1305], "coeffici": [185, 317, 640, 796, 1208, 1295], "coerc": [58, 603, 796], "coercion": [45, 46, 47, 48, 56, 57, 603, 796, 817, 818, 827, 854, 865, 909], "col": [1, 12, 36, 39, 45, 50, 51, 52, 53, 124, 126, 147, 161, 163, 199, 207, 208, 216, 218, 222, 223, 224, 227, 238, 241, 242, 249, 250, 255, 263, 274, 279, 283, 285, 291, 296, 317, 321, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 480, 481, 483, 484, 485, 486, 487, 489, 490, 492, 493, 494, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 575, 577, 579, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 718, 722, 723, 725, 726, 727, 729, 731, 734, 736, 737, 739, 740, 742, 746, 747, 748, 749, 750, 751, 759, 761, 763, 764, 766, 769, 770, 775, 777, 779, 781, 782, 785, 786, 796, 831, 834, 835, 837, 839, 840, 841, 853, 858, 860, 867, 868, 874, 879, 881, 885, 909, 915, 1030, 1033, 1114, 1196, 1198, 1230, 1249, 1295, 1326], "col0": [163, 1326], "col1": [163, 242, 317, 909, 1326], "col2": [163, 242, 317, 909, 1326], "col3": [242, 317, 1326], "col4": 1326, "col_nam": [241, 317, 549, 786, 796, 853, 909], "cole": 130, "coli": [39, 317, 580, 581, 915, 1326], "collaps": [45, 46, 47, 48, 56, 57, 817, 818, 827, 854, 865, 909], "collapse_join": [45, 46, 47, 48, 56, 57, 817, 818, 827, 854, 865, 909], "collect": [53, 56, 57, 147, 148, 149, 153, 163, 164, 167, 191, 225, 242, 264, 269, 282, 283, 317, 460, 490, 549, 726, 744, 748, 775, 778, 796, 811, 812, 814, 815, 818, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 850, 851, 852, 853, 855, 856, 857, 858, 860, 862, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 906, 908, 909, 915, 1090, 1295, 1305, 1306, 1307, 1310, 1311, 1323, 1324, 1326], "collect_al": [53, 57, 817, 818, 909], "collect_all_async": [818, 909], "collect_async": [57, 909], "collect_schema": [53, 225, 317, 820, 826, 853, 859, 878, 909], "collis": 58, "colnam": [39, 147, 317], "color": [49, 87, 88, 303, 317, 320, 370, 371, 372, 373, 375, 650, 710, 796, 892, 961, 962, 963, 964, 966, 1217, 1284, 1295, 1318], "column": [10, 16, 17, 18, 21, 22, 24, 38, 39, 44, 48, 49, 50, 51, 58, 65, 79, 88, 92, 96, 120, 122, 123, 124, 125, 126, 127, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 156, 157, 158, 159, 163, 177, 179, 180, 183, 185, 186, 189, 190, 191, 192, 195, 199, 200, 203, 204, 206, 207, 208, 212, 213, 218, 219, 220, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 254, 255, 256, 258, 263, 265, 266, 267, 270, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 302, 317, 320, 321, 328, 329, 331, 342, 351, 360, 362, 365, 386, 391, 395, 396, 402, 412, 413, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 430, 432, 433, 436, 437, 438, 440, 449, 450, 452, 460, 462, 466, 468, 481, 485, 486, 501, 507, 513, 515, 535, 539, 540, 549, 555, 556, 558, 560, 562, 573, 575, 576, 577, 578, 579, 580, 581, 590, 597, 601, 603, 604, 605, 606, 608, 609, 610, 613, 615, 617, 619, 621, 624, 626, 628, 635, 636, 642, 643, 646, 654, 659, 660, 661, 670, 674, 675, 682, 683, 684, 685, 686, 687, 689, 694, 697, 705, 710, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 796, 812, 814, 821, 824, 825, 826, 828, 831, 834, 835, 839, 840, 841, 845, 846, 847, 848, 849, 851, 852, 855, 856, 858, 859, 860, 861, 863, 867, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 891, 892, 909, 914, 915, 922, 923, 943, 952, 954, 957, 979, 980, 986, 991, 992, 998, 1007, 1010, 1011, 1012, 1015, 1016, 1017, 1021, 1022, 1023, 1025, 1026, 1029, 1031, 1032, 1035, 1036, 1037, 1039, 1048, 1049, 1051, 1063, 1081, 1084, 1109, 1115, 1117, 1137, 1141, 1171, 1178, 1179, 1182, 1202, 1213, 1221, 1226, 1228, 1241, 1242, 1249, 1251, 1252, 1253, 1254, 1256, 1262, 1265, 1271, 1272, 1284, 1295, 1311, 1313, 1315, 1317, 1318, 1320, 1321, 1324, 1325, 1326], "column_0": [1, 227, 281, 317], "column_1": [227, 281, 317, 1320], "column_2": [281, 317, 1320], "column_abc": 15, "column_format": [39, 317], "column_nam": [246, 281, 317, 856, 909], "column_tot": [39, 317], "column_width": [39, 317], "column_x": [133, 134, 138, 144, 147], "column_xyz": 15, "columnar": [124, 126, 220, 251, 317], "columnformatdict": [39, 317], "columnnameorselector": [180, 189, 191, 233, 240, 242, 252, 272, 282, 283, 284, 285, 317, 814, 824, 825, 849, 873, 874, 875, 909], "columnnotfounderror": [203, 204, 317], "columntotalsdefinit": [39, 317], "columnwidthsdefinit": [39, 317], "colx": [39, 317, 580, 581, 915, 1310, 1326], "colz": [915, 1326], "com": [32, 39, 136, 317, 456, 458, 459, 655, 656, 657, 796, 1058, 1060, 1061, 1222, 1223, 1224, 1295], "combin": [44, 48, 56, 57, 58, 199, 208, 209, 223, 242, 249, 287, 317, 330, 343, 448, 457, 470, 564, 589, 605, 610, 677, 678, 679, 737, 738, 740, 741, 783, 784, 786, 796, 817, 818, 827, 835, 840, 854, 858, 865, 909, 1034, 1047, 1059, 1178, 1244, 1245, 1246, 1295, 1311, 1324], "come": [115, 136, 208, 282, 284, 317, 409, 428, 429, 498, 540, 724, 796, 835, 873, 875, 909, 1004, 1027, 1028, 1100, 1295], "comm_subexpr_elim": [56, 57, 817, 818, 827, 854, 865, 909], "comm_subplan_elim": [56, 57, 817, 818, 827, 854, 865, 909], "comma": [35, 36, 133, 134, 147, 317], "comment": [133, 134, 147], "comment_prefix": [133, 134, 147], "common": [50, 56, 57, 58, 95, 133, 134, 147, 286, 317, 574, 802, 817, 818, 827, 854, 865, 876, 909, 1299], "compact": 1321, "compani": 136, "compar": [152, 156, 157, 158, 159, 193, 199, 317, 454, 455, 475, 477, 486, 500, 547, 584, 585, 796, 831, 909, 980, 1055, 1056, 1162, 1295], "comparison": [153, 199, 317, 831, 909], "compat": [20, 39, 40, 41, 44, 48, 90, 269, 317, 647, 649, 655, 656, 657, 659, 668, 669, 909, 915, 1214, 1216, 1222, 1223, 1224, 1226, 1235, 1236, 1270, 1295, 1305, 1318, 1319, 1323], "compat_level": [40, 41, 269, 317, 1270, 1295], "compatibleframetyp": [1306, 1308, 1323], "compatlevel": [40, 41, 269, 317, 1270, 1295], "competit": [600, 796, 1173, 1295], "compil": [55, 347, 348, 505, 506, 939, 940, 1107, 1108], "complement": 915, "complet": [133, 135, 147, 1324], "complex": [164, 385, 386, 401, 704, 705, 796, 976, 997, 1280, 1295], "compliant": [39, 317], "compon": [413, 436, 682, 685, 742, 1008, 1035, 1249, 1252], "compos": 1324, "composit": [79, 1326], "compound": [127, 252, 317, 915], "comprehens": 161, "compress": [34, 40, 41, 44, 46, 48, 317, 608, 796, 909, 1181, 1295], "compression_level": [44, 48, 317, 909], "comput": [56, 58, 93, 194, 207, 223, 242, 276, 282, 296, 309, 317, 325, 334, 335, 336, 337, 338, 339, 356, 357, 358, 363, 364, 368, 389, 392, 393, 394, 397, 398, 399, 400, 406, 453, 456, 457, 458, 459, 461, 498, 522, 523, 524, 525, 529, 530, 531, 532, 536, 542, 543, 544, 545, 570, 590, 591, 596, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 637, 638, 639, 640, 644, 701, 702, 710, 715, 717, 720, 721, 722, 728, 730, 743, 762, 772, 773, 786, 796, 817, 834, 837, 839, 840, 873, 881, 885, 898, 909, 920, 926, 927, 928, 929, 930, 931, 948, 949, 950, 955, 956, 960, 982, 988, 989, 990, 993, 994, 995, 996, 1001, 1053, 1057, 1058, 1059, 1060, 1061, 1062, 1100, 1124, 1125, 1126, 1127, 1131, 1132, 1133, 1134, 1138, 1144, 1145, 1146, 1147, 1155, 1166, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1205, 1206, 1207, 1208, 1211, 1268, 1269, 1277, 1284, 1295, 1317, 1320], "computeerror": [560, 687, 1254], "concat": [49, 87, 88, 96, 134, 223, 317, 840, 881, 909, 984, 1075, 1156, 1174, 1295, 1316], "concat_list": [512, 743], "concat_w": [264, 317, 775, 868, 909, 1316, 1323], "concaten": [49, 58, 87, 88, 201, 241, 317, 594, 646, 661, 726, 727, 796, 853, 909, 984, 1156, 1213, 1228, 1295, 1318], "concatmethod": 58, "conclus": [124, 126, 317, 909], "concret": [163, 167], "condit": [39, 191, 199, 224, 250, 317, 466, 486, 652, 676, 723, 746, 786, 796, 825, 831, 841, 909, 1085, 1295, 1311, 1316, 1322], "conditional_format": [39, 317], "conditionalformatdict": [39, 317], "config": [0, 50, 187, 255, 274, 291, 317, 648, 658, 670, 737, 738, 740, 741, 742, 808, 817, 822, 860, 879, 909, 1215, 1237], "configur": [5, 32, 38, 137, 148, 149, 172, 317, 809, 817, 884, 909], "conflat": [486, 796], "conform": 1326, "confus": [95, 329, 493, 494, 670, 796], "conjunct": [39, 87, 135, 138, 144, 161, 317, 752, 755, 909], "conn": 135, "connect": [37, 133, 135, 136, 139, 141, 143, 145, 147, 150, 151, 152, 153, 317, 809], "connectionorcursor": [37, 135, 317], "connector": 136, "connectorx": [135, 136, 155], "consecut": [198, 317, 369, 465, 471, 646, 661, 668, 796, 830, 909, 1067, 1213, 1228, 1236, 1295], "consid": [31, 32, 33, 44, 45, 46, 47, 48, 56, 57, 66, 68, 87, 88, 130, 133, 134, 135, 143, 145, 147, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 179, 191, 193, 219, 224, 227, 233, 251, 264, 274, 279, 280, 282, 284, 285, 286, 317, 320, 321, 386, 391, 401, 402, 435, 470, 481, 548, 549, 556, 572, 573, 576, 578, 580, 581, 597, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 705, 732, 746, 772, 773, 792, 796, 812, 817, 818, 825, 827, 841, 849, 868, 872, 873, 875, 876, 892, 909, 915, 979, 981, 986, 997, 998, 1034, 1056, 1081, 1150, 1171, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1196, 1198, 1274, 1279, 1295, 1300, 1305], "consider": 130, "consist": [207, 240, 275, 317, 682, 737, 738, 834, 909, 915, 924, 1064, 1249, 1276, 1295], "consola": [39, 317], "const": 10, "constant": [194, 249, 317, 410, 457, 463, 796, 858, 909, 1005, 1057, 1059, 1065, 1295], "constrain": [50, 147, 191, 317, 825, 909, 915], "constraint": [199, 317, 466, 573, 574, 576, 578, 580, 581, 786, 796, 831, 909, 915], "construct": [49, 87, 88, 95, 120, 122, 123, 124, 125, 126, 127, 130, 135, 317, 472, 768, 771, 787, 792, 796, 823, 909, 979, 1295, 1310], "construct_categor": 49, "constructor": [130, 138, 167], "contain": [5, 36, 37, 38, 39, 45, 50, 55, 91, 122, 125, 127, 135, 136, 137, 145, 148, 149, 152, 162, 163, 165, 167, 179, 184, 191, 192, 208, 216, 221, 238, 274, 275, 279, 280, 286, 298, 317, 329, 331, 354, 373, 375, 404, 478, 490, 519, 549, 646, 648, 652, 655, 657, 659, 661, 663, 675, 676, 692, 714, 715, 716, 717, 727, 758, 796, 812, 820, 823, 825, 826, 835, 854, 872, 876, 887, 909, 913, 915, 922, 923, 946, 1077, 1078, 1121, 1156, 1213, 1215, 1219, 1222, 1224, 1226, 1228, 1230, 1242, 1243, 1259, 1270, 1276, 1295, 1313], "contains_with_expr": 370, "contains_with_lit": 370, "content": [13, 636, 796, 1204, 1295], "context": [49, 87, 88, 169, 238, 264, 317, 327, 466, 512, 548, 549, 560, 642, 643, 710, 729, 745, 748, 754, 755, 758, 767, 771, 774, 795, 796, 807, 808, 868, 881, 909, 1114, 1284, 1295, 1310, 1323, 1325], "contigu": [58, 120, 125, 133, 134, 137, 139, 141, 143, 145, 147, 150, 151, 152, 245, 275, 317], "continu": [133, 402, 597, 640, 796, 998, 1171, 1208, 1295, 1312], "contrast": 742, "control": [10, 11, 39, 57, 58, 138, 161, 163, 263, 264, 274, 317, 605, 643, 775, 796, 817, 818, 827, 867, 868, 884, 906, 909, 1178, 1274, 1295, 1307, 1310, 1323], "conveni": [196, 279, 317, 901, 924, 1064, 1295, 1305], "convers": [121, 138, 176, 220, 221, 251, 252, 271, 275, 276, 317, 414, 682, 684, 685, 689, 808, 1009, 1249, 1251, 1252, 1256, 1276, 1277, 1295, 1321, 1323], "convert": [38, 91, 121, 125, 137, 138, 144, 148, 176, 270, 271, 272, 273, 274, 275, 276, 278, 279, 317, 365, 366, 403, 414, 437, 440, 539, 540, 548, 574, 599, 657, 682, 684, 685, 686, 687, 689, 694, 796, 909, 913, 957, 958, 980, 1009, 1036, 1039, 1141, 1142, 1224, 1249, 1251, 1252, 1253, 1254, 1256, 1262, 1265, 1273, 1274, 1275, 1276, 1277, 1279, 1295, 1318, 1320, 1321, 1323], "convert_time_zon": [434, 1033], "coo": [246, 317, 856, 909], "coord": 697, "coordin": [39, 317], "copi": [35, 120, 121, 132, 174, 176, 181, 182, 221, 269, 275, 276, 291, 317, 463, 796, 815, 816, 879, 909, 917, 985, 987, 1065, 1270, 1275, 1276, 1277, 1295, 1323], "corasick": [648, 658, 670, 1215, 1225, 1237], "core": [1, 224, 317, 841, 909, 1323, 1326], "cores_right": [224, 317, 841, 909], "corner": [20, 39, 127, 317], "corr": 317, "corrcoef": [185, 317], "correct": [138, 144, 458, 459, 498, 622, 640, 796, 845, 909, 913, 1060, 1061, 1100, 1189, 1208, 1295], "correctli": [39, 317, 548, 796], "correl": [185, 317, 728, 772], "correlationmethod": 728, "correspond": [208, 223, 249, 275, 287, 317, 386, 422, 431, 435, 448, 549, 600, 610, 613, 615, 617, 619, 621, 624, 626, 628, 705, 737, 738, 740, 741, 783, 784, 796, 817, 835, 840, 858, 909, 1017, 1030, 1034, 1047, 1173, 1295, 1312], "cosd": 1316, "cosh": [796, 1295], "cosin": [334, 335, 392, 393, 548, 796, 926, 927, 988, 989, 1295, 1320], "cost": [224, 252, 317, 668, 841, 909, 1236], "cost_usd": [668, 1236], "cot": [796, 1295, 1316], "cotang": [394, 796, 990, 1295, 1320], "cotd": 1316, "could": [38, 85, 93, 180, 317, 637, 732, 742, 746, 796, 814, 822, 825, 909, 1205, 1295], "count": [39, 153, 178, 187, 208, 238, 239, 249, 281, 287, 293, 308, 317, 333, 350, 359, 396, 409, 457, 481, 501, 509, 521, 526, 549, 572, 588, 610, 613, 615, 617, 619, 621, 624, 626, 628, 649, 708, 710, 718, 724, 731, 755, 766, 796, 811, 822, 835, 852, 858, 882, 897, 909, 915, 925, 942, 951, 992, 999, 1004, 1059, 1081, 1103, 1111, 1123, 1128, 1157, 1165, 1216, 1282, 1284, 1295, 1300, 1304, 1316], "count_digit": 649, "count_num": [39, 317], "counterpart": 130, "countri": [223, 317, 410, 840, 909, 1005], "country_holidai": [409, 724, 1004], "covari": [730, 773, 796, 913], "cover": 10, "cow": [666, 667, 1233, 1234], "cpu": [133, 134, 155, 274, 317, 817, 884, 909, 1274, 1295], "crab": [647, 659, 1214, 1226], "crate": [36, 45, 91, 317, 647, 649, 655, 656, 657, 659, 668, 669, 682, 684, 685, 689, 909, 915, 1214, 1216, 1222, 1223, 1224, 1226, 1235, 1236, 1249, 1251, 1252, 1256], "creat": [37, 39, 49, 88, 120, 124, 126, 133, 134, 135, 136, 139, 141, 145, 148, 149, 161, 162, 163, 164, 165, 166, 167, 168, 181, 182, 208, 239, 242, 249, 274, 275, 287, 291, 294, 317, 320, 321, 413, 435, 448, 457, 540, 548, 601, 610, 613, 615, 617, 619, 621, 624, 626, 628, 726, 736, 737, 738, 739, 740, 741, 742, 782, 783, 784, 792, 796, 815, 816, 822, 827, 835, 858, 879, 883, 909, 985, 987, 998, 1008, 1034, 1047, 1059, 1163, 1171, 1174, 1274, 1276, 1295, 1300, 1322, 1323, 1326], "create_async_engin": 135, "create_engin": [37, 317], "creation": 134, "credenti": [31, 32, 33, 143, 145, 147, 150, 151, 152, 808], "credential_provid": [143, 145, 147, 150, 151, 152], "credentialproviderfunct": [143, 145, 147, 150, 151, 152], "cross": [222, 317, 839, 909, 1311], "crustacean": [659, 1226], "cst": [435, 448, 1034, 1047], "csv": [35, 36, 45, 46, 47, 48, 132, 133, 134, 138, 147, 317, 808, 909], "csvencod": [133, 134, 147], "csvquotestyl": [36, 45, 317, 909], "ctx": [1304, 1306, 1307, 1308, 1309, 1310, 1323], "cube": [1, 54, 389, 595, 796, 982, 1295, 1317], "cuda": 884, "cum_count": [796, 1295], "cum_count_revers": [396, 796], "cum_max": [796, 1295], "cum_max_all_fil": [397, 796], "cum_max_revers": [397, 796], "cum_min": [796, 1295], "cum_min_revers": [398, 796], "cum_prod": [326, 796, 1295], "cum_prod_revers": [399, 796], "cum_reduc": 732, "cum_sum": [483, 590, 698, 735, 796, 837, 909, 1099, 1295], "cum_sum_revers": [400, 796], "cumsum_horizont": 734, "cumul": [396, 397, 398, 399, 400, 731, 732, 733, 734, 735, 796, 992, 993, 994, 995, 996, 1295], "cumulative_ev": [796, 1295], "cumulative_sal": [590, 796], "current": [2, 3, 5, 6, 30, 37, 127, 135, 136, 143, 145, 147, 150, 151, 152, 160, 161, 163, 164, 165, 166, 167, 168, 181, 182, 189, 222, 223, 246, 264, 274, 279, 317, 320, 321, 418, 540, 591, 796, 815, 816, 824, 839, 840, 856, 868, 884, 909, 915, 985, 987, 1005, 1013, 1166, 1274, 1279, 1295, 1300, 1307, 1323], "cursor": [37, 135, 317], "custom": [1, 27, 38, 39, 51, 52, 53, 54, 94, 166, 168, 187, 227, 242, 303, 317, 366, 409, 437, 440, 540, 548, 549, 611, 710, 724, 757, 758, 796, 822, 845, 892, 909, 958, 1004, 1036, 1039, 1142, 1150, 1183, 1284, 1295, 1326], "customis": [39, 317], "cut": [597, 796, 1171, 1295], "cxx": 1318, "cypher": 135, "d": [28, 34, 36, 38, 39, 40, 41, 44, 123, 153, 177, 199, 206, 208, 209, 210, 213, 222, 226, 268, 269, 279, 285, 289, 299, 301, 304, 305, 306, 307, 308, 309, 310, 317, 326, 328, 396, 419, 437, 440, 486, 555, 594, 635, 649, 656, 668, 669, 674, 682, 684, 685, 725, 742, 748, 775, 796, 831, 835, 839, 868, 888, 890, 893, 894, 895, 896, 897, 898, 899, 909, 915, 980, 992, 1014, 1036, 1039, 1085, 1109, 1216, 1223, 1235, 1236, 1241, 1249, 1251, 1252, 1263, 1295, 1311, 1313, 1315, 1318, 1319], "d1": [39, 317, 413], "d2": 413, "d3": 413, "d789": [39, 317], "d_4": [674, 1241], "dai": [64, 65, 80, 208, 221, 223, 249, 287, 317, 320, 409, 428, 429, 431, 432, 435, 437, 440, 441, 448, 450, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 724, 736, 737, 738, 739, 740, 741, 742, 783, 784, 796, 835, 840, 858, 909, 915, 1004, 1027, 1028, 1030, 1031, 1034, 1036, 1039, 1040, 1047, 1049, 1059, 1295, 1319], "dark": 1304, "data": [0, 1, 10, 18, 19, 21, 28, 34, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 53, 56, 57, 58, 63, 64, 65, 67, 76, 77, 79, 80, 88, 91, 95, 97, 100, 114, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 174, 176, 182, 183, 192, 195, 196, 206, 207, 208, 220, 221, 222, 225, 227, 240, 241, 245, 250, 251, 252, 254, 258, 261, 269, 274, 275, 276, 279, 281, 291, 295, 315, 317, 321, 329, 330, 331, 334, 335, 336, 337, 338, 339, 342, 345, 346, 347, 348, 349, 351, 354, 356, 357, 358, 363, 364, 365, 367, 368, 370, 371, 372, 373, 374, 375, 387, 388, 391, 392, 393, 394, 395, 402, 403, 404, 409, 410, 411, 412, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 462, 473, 475, 476, 477, 481, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 500, 501, 505, 506, 508, 513, 519, 521, 528, 539, 541, 547, 549, 584, 585, 589, 590, 597, 599, 600, 603, 604, 605, 606, 608, 609, 629, 631, 633, 638, 639, 640, 646, 649, 650, 651, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 682, 683, 684, 685, 687, 689, 692, 701, 702, 703, 706, 707, 710, 713, 719, 726, 729, 736, 737, 738, 739, 740, 741, 742, 752, 753, 755, 756, 757, 758, 768, 771, 782, 783, 784, 787, 792, 796, 808, 815, 816, 817, 818, 823, 826, 828, 834, 835, 859, 863, 879, 909, 914, 917, 922, 923, 935, 937, 938, 939, 940, 941, 943, 945, 946, 957, 959, 961, 962, 963, 965, 977, 978, 985, 986, 987, 998, 999, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1056, 1059, 1063, 1064, 1081, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1105, 1106, 1107, 1108, 1110, 1115, 1121, 1123, 1130, 1141, 1143, 1150, 1164, 1171, 1173, 1177, 1178, 1179, 1181, 1182, 1193, 1195, 1203, 1208, 1213, 1214, 1216, 1217, 1218, 1220, 1221, 1222, 1223, 1224, 1227, 1228, 1229, 1230, 1231, 1232, 1239, 1240, 1241, 1242, 1249, 1250, 1251, 1252, 1254, 1256, 1259, 1270, 1275, 1276, 1277, 1278, 1281, 1294, 1295, 1304, 1311, 1318, 1323, 1325], "data_bar": [39, 317], "data_bar_2010": [39, 317], "data_label": [39, 317], "data_page_s": [44, 48, 317, 909], "databas": [37, 119, 135, 136, 317, 808], "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 75, 92, 95, 96, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 150, 151, 152, 156, 157, 160, 161, 172, 315, 316, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 792, 796, 808, 817, 818, 820, 822, 824, 826, 828, 832, 835, 839, 840, 841, 842, 843, 845, 849, 850, 854, 857, 859, 866, 868, 873, 874, 875, 876, 878, 881, 885, 886, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 909, 915, 998, 999, 1033, 1059, 1081, 1150, 1171, 1230, 1241, 1242, 1265, 1271, 1272, 1284, 1295, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1323, 1326], "dataframeplot": [317, 320], "dataload": [279, 317], "datapoint": [208, 317, 835, 909], "dataset": [14, 44, 68, 133, 134, 138, 144, 147, 153, 222, 279, 317, 498, 796, 808, 839, 845, 909, 1100, 1295, 1324], "datat": [39, 317], "datatyp": [36, 45, 120, 122, 123, 124, 126, 128, 140, 142, 143, 145, 146, 151, 152, 164, 165, 167, 192, 201, 317, 387, 460, 635, 703, 744, 756, 792, 796, 808, 826, 909, 914, 915, 977, 999, 1052, 1150, 1202, 1278, 1295, 1321], "date": [16, 39, 50, 65, 133, 134, 136, 138, 144, 145, 147, 150, 152, 153, 180, 187, 206, 208, 221, 223, 249, 264, 317, 320, 349, 409, 411, 412, 413, 414, 417, 419, 421, 422, 424, 427, 428, 429, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 457, 508, 590, 610, 613, 615, 617, 619, 621, 624, 626, 628, 682, 684, 703, 724, 737, 738, 740, 741, 748, 756, 782, 796, 814, 822, 835, 840, 858, 909, 915, 941, 1004, 1006, 1007, 1008, 1009, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1059, 1110, 1159, 1160, 1249, 1251, 1278, 1295, 1316, 1319, 1321], "date32": [221, 317], "date_format": [36, 45, 317, 909], "date_min": 431, "date_minus_1y_2mon": 1030, "date_part": 1316, "date_plus_1i": [431, 1030], "date_rang": [223, 287, 317, 417, 419, 432, 439, 450, 740, 741, 840, 909, 1012, 1026, 1031, 1032, 1048, 1049], "date_right": [223, 317, 840, 909], "datetim": [16, 36, 39, 45, 50, 91, 127, 137, 145, 148, 150, 152, 163, 164, 165, 167, 180, 187, 206, 208, 221, 223, 249, 264, 287, 317, 320, 349, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 457, 508, 557, 590, 610, 613, 615, 617, 619, 621, 624, 626, 628, 682, 685, 703, 724, 736, 737, 738, 740, 741, 742, 748, 756, 783, 784, 796, 814, 822, 835, 840, 858, 909, 914, 915, 941, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1059, 1110, 1159, 1160, 1249, 1252, 1276, 1278, 1295, 1318, 1319], "datetime_format": [36, 45, 317, 909], "datetime_rang": [208, 317, 411, 414, 428, 429, 431, 434, 435, 441, 442, 443, 444, 445, 446, 447, 448, 451, 613, 615, 617, 619, 621, 624, 626, 628, 737, 738, 796, 835, 909, 1005, 1006, 1009, 1013, 1014, 1015, 1020, 1021, 1023, 1025, 1027, 1028, 1029, 1030, 1033, 1034, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "datetime_str": [437, 440], "datetimeindex": 125, "david": 1324, "day_nam": [437, 440], "day_of_month": [417, 432, 450], "day_of_year": [417, 432, 450], "daylight": [208, 223, 249, 287, 317, 410, 418, 431, 435, 448, 610, 613, 615, 617, 619, 621, 624, 626, 628, 737, 738, 740, 741, 742, 783, 784, 796, 835, 840, 858, 909, 1013, 1030, 1034, 1047], "dayofweek": 1319, "dayofyear": 1319, "days_diff": 441, "db": [37, 135, 136, 317], "dbapi2": 135, "dbc": [649, 1216], "dbreadengin": 136, "dbwriteengin": [37, 317], "dbwritemod": [37, 317], "dd": [39, 317, 1318], "ddd": [1, 39, 317, 693, 695, 696], "dddd": 1318, "ddof": [265, 288, 317, 363, 368, 536, 542, 623, 624, 627, 628, 645, 711, 728, 730, 772, 773, 777, 785, 796, 869, 877, 909, 955, 960, 1138, 1144, 1190, 1192, 1212, 1285, 1295], "ddww": 1318, "de": 1318, "deal": [44, 48, 220, 317, 329, 331, 434, 600, 682, 685, 714, 715, 716, 717, 739, 796, 909, 922, 923, 1033, 1173, 1249, 1252, 1295], "debug": [29, 845, 909, 1326], "decad": [1304, 1319], "decai": [456, 457, 458, 459, 796, 1058, 1059, 1060, 1061, 1295], "decim": [9, 10, 11, 27, 28, 36, 39, 45, 133, 134, 147, 317, 321, 629, 686, 796, 909, 915, 1193, 1253, 1295, 1317], "decimal_comma": [133, 134, 147], "decimal_separ": [9, 27], "declar": [120, 122, 123, 124, 126, 135, 142, 143, 151, 274, 279, 317, 909, 915, 1304], "decod": [133, 134, 662], "decompos": [283, 317, 874, 909], "decompress": [44, 46, 48, 317, 909], "decor": [49, 51, 52, 53, 54, 163, 167, 227, 317, 549, 796, 807, 808, 1150, 1295], "dedic": [1, 121, 220, 251, 317, 915, 1323], "deem": [187, 317, 822, 909], "deepcopi": [181, 317, 815, 909, 985, 1295], "def": [1, 49, 51, 52, 53, 54, 135, 161, 163, 167, 172, 241, 281, 317, 326, 594, 653, 656, 679, 713, 757, 796, 818, 853, 909, 915, 1220, 1223, 1326], "default": [4, 5, 7, 9, 10, 14, 27, 30, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 56, 57, 58, 62, 65, 66, 67, 120, 122, 123, 124, 125, 126, 127, 133, 134, 136, 138, 139, 141, 142, 143, 144, 145, 147, 150, 151, 152, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 172, 187, 188, 191, 194, 203, 207, 208, 209, 220, 222, 223, 231, 233, 240, 242, 249, 250, 251, 252, 253, 257, 260, 264, 265, 267, 272, 274, 275, 279, 282, 284, 285, 286, 288, 293, 302, 317, 328, 329, 331, 354, 361, 366, 402, 404, 409, 434, 453, 455, 456, 458, 459, 479, 515, 519, 528, 533, 534, 536, 540, 542, 543, 548, 556, 557, 560, 563, 582, 583, 585, 590, 591, 597, 600, 604, 605, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 631, 634, 636, 645, 646, 655, 661, 672, 677, 678, 679, 682, 684, 685, 687, 689, 710, 711, 714, 716, 719, 723, 724, 727, 728, 730, 737, 738, 739, 740, 741, 742, 745, 748, 752, 753, 754, 756, 768, 771, 777, 778, 783, 784, 785, 787, 796, 817, 818, 822, 823, 825, 827, 834, 835, 839, 840, 849, 858, 862, 864, 868, 869, 873, 875, 876, 877, 882, 884, 891, 909, 915, 922, 923, 946, 953, 958, 986, 998, 999, 1004, 1033, 1053, 1057, 1058, 1060, 1061, 1079, 1117, 1121, 1130, 1135, 1136, 1142, 1159, 1160, 1166, 1171, 1173, 1177, 1178, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1195, 1201, 1204, 1212, 1213, 1214, 1222, 1226, 1228, 1239, 1244, 1245, 1246, 1249, 1251, 1252, 1254, 1256, 1274, 1276, 1284, 1285, 1295, 1317, 1326], "default_match": [647, 659], "default_scop": 33, "defaultdict": [252, 317], "defer": [317, 320, 321, 1295, 1300], "defin": [36, 39, 45, 65, 135, 142, 160, 161, 163, 180, 191, 195, 208, 227, 238, 241, 249, 286, 303, 317, 486, 515, 549, 594, 597, 609, 610, 613, 615, 617, 619, 621, 624, 626, 628, 660, 665, 672, 683, 690, 737, 738, 740, 741, 758, 778, 783, 784, 796, 814, 825, 828, 835, 853, 858, 876, 892, 909, 914, 915, 1085, 1117, 1150, 1171, 1182, 1227, 1232, 1239, 1250, 1257, 1295], "definit": [39, 317, 498, 796, 914, 915, 1100, 1295], "deflat": [34, 317], "deg": 1320, "degre": [265, 288, 317, 536, 542, 599, 623, 624, 627, 628, 645, 711, 721, 728, 730, 772, 773, 777, 785, 796, 869, 877, 909, 1190, 1192, 1212, 1285, 1295, 1316], "delet": [1311, 1325], "delimit": [43, 45, 143, 151, 242, 272, 317, 646, 661, 909, 1213, 1228, 1271, 1295], "delta": [38, 137, 148, 265, 288, 317, 536, 542, 623, 624, 627, 628, 645, 711, 728, 730, 772, 773, 777, 785, 796, 808, 869, 877, 909, 1190, 1192, 1212, 1285, 1295], "delta_merge_opt": [38, 317], "delta_table_opt": [137, 148], "delta_write_opt": [38, 317], "deltalak": [38, 137, 148, 155, 317], "deltat": [38, 137, 148, 317], "demo": [39, 317], "demonstr": [133, 470, 796, 915], "dens": [20, 206, 317, 600, 796, 1173, 1295], "densiti": [1295, 1300], "depend": [44, 49, 55, 88, 135, 155, 177, 317, 347, 348, 505, 506, 549, 560, 597, 600, 742, 745, 748, 754, 796, 919, 939, 940, 1107, 1108, 1171, 1173, 1295, 1326], "deploi": [163, 167], "deprec": [38, 133, 134, 160, 161, 162, 163, 167, 170, 178, 233, 275, 293, 298, 317, 416, 451, 472, 567, 604, 646, 654, 712, 721, 729, 796, 811, 827, 849, 862, 875, 881, 882, 887, 909, 1011, 1019, 1020, 1050, 1078, 1177, 1213, 1221, 1276, 1295], "depth": 130, "desc": [915, 1304, 1307, 1311, 1313], "descend": [50, 258, 263, 317, 342, 362, 535, 600, 633, 642, 643, 710, 722, 796, 863, 867, 909, 934, 954, 1097, 1137, 1173, 1199, 1210, 1284, 1295], "describ": [163, 206, 317, 909, 1295], "descript": [208, 317, 835, 909, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1321, 1324, 1325], "deseri": [130, 257, 317, 472, 563, 796, 862, 909], "deserializ": [188, 257, 317, 404, 563, 796, 823, 862, 909], "design": [274, 279, 317], "desir": [163, 366, 451, 540, 958, 1050, 1142], "destin": 136, "detail": [55, 121, 135, 136, 156, 158, 176, 208, 317, 703, 796, 835, 884, 909, 1278, 1295, 1326], "determin": [14, 36, 39, 45, 50, 58, 85, 130, 133, 134, 135, 138, 144, 145, 147, 152, 154, 179, 183, 201, 208, 220, 221, 227, 249, 280, 281, 287, 317, 386, 421, 434, 481, 540, 560, 597, 603, 605, 640, 648, 660, 682, 683, 685, 686, 705, 739, 768, 771, 787, 796, 812, 819, 820, 826, 835, 858, 872, 878, 909, 1016, 1033, 1081, 1142, 1171, 1177, 1178, 1208, 1215, 1249, 1252, 1253, 1295], "dev": [175, 918, 1190, 1295], "develop": [136, 163, 167], "deviat": [265, 317, 458, 623, 624, 645, 777, 796, 869, 909, 1060, 1212, 1295, 1312], "devic": [274, 317, 817, 884, 909, 1274, 1295], "devicememoryresourc": 884, "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 51, 52, 75, 92, 96, 121, 122, 123, 124, 125, 126, 127, 134, 135, 136, 147, 160, 161, 163, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 616, 618, 620, 622, 623, 625, 627, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 686, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 774, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 792, 796, 835, 858, 874, 876, 889, 892, 900, 909, 915, 1033, 1059, 1230, 1241, 1242, 1272, 1295, 1300, 1304, 1305, 1306, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1323, 1326], "df0": [234, 317, 850, 909, 1310], "df1": [50, 58, 156, 157, 193, 196, 234, 264, 289, 317, 850, 909, 1307, 1309, 1310, 1311, 1323], "df2": [50, 58, 156, 157, 193, 196, 289, 317, 1307, 1309, 1310, 1311, 1323], "df3": [50, 317], "df4": 317, "df5": 317, "df6": 317, "df_a": 1323, "df_a1": 58, "df_a2": 58, "df_a3": 58, "df_agg_nuniqu": [238, 317], "df_b": 1323, "df_current_batch": 134, "df_d1": 58, "df_d2": 58, "df_from_str_repr": [273, 317], "df_h1": 58, "df_h2": 58, "df_new_grid": [484, 796], "df_nuniqu": [238, 317], "df_original_grid": [484, 796], "df_panda": 1305, "df_pd": 121, "df_tempor": [613, 615, 617, 619, 621, 624, 626, 628, 796], "dfi": [121, 176], "diagon": [58, 281, 317], "diagonal_relax": 58, "dict": [30, 37, 38, 39, 44, 48, 51, 53, 55, 120, 122, 123, 124, 125, 126, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 163, 200, 220, 240, 246, 250, 251, 252, 270, 271, 274, 279, 281, 317, 796, 856, 909, 913, 914, 915, 1070, 1295, 1308], "dictat": [431, 796, 913, 1030], "dictionari": [30, 39, 55, 79, 120, 122, 123, 124, 126, 130, 133, 134, 135, 136, 140, 142, 143, 145, 146, 147, 150, 151, 152, 220, 240, 250, 251, 252, 270, 271, 274, 279, 317, 909, 914], "did": [410, 1005], "diff": [291, 317, 441, 442, 443, 444, 445, 446, 447, 529, 796, 879, 909, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1131, 1295], "differ": [39, 44, 91, 94, 115, 133, 138, 153, 156, 158, 196, 208, 209, 220, 242, 249, 251, 252, 271, 274, 275, 281, 317, 405, 417, 431, 432, 434, 449, 455, 470, 479, 510, 529, 531, 540, 549, 582, 583, 585, 590, 604, 605, 682, 708, 745, 748, 754, 796, 827, 835, 858, 909, 915, 980, 1000, 1012, 1030, 1031, 1033, 1048, 1055, 1064, 1079, 1112, 1131, 1133, 1150, 1159, 1160, 1162, 1177, 1178, 1249, 1295, 1319, 1321, 1323], "digit": [66, 594, 629, 630, 656, 796, 915, 1193, 1194, 1216, 1223, 1295, 1326], "dimens": [120, 122, 124, 126, 142, 143, 151, 317, 606, 796, 909, 1179, 1276, 1295], "dimension": [122, 124, 126, 275, 317, 909, 1295], "direct": [39, 136, 145, 149, 152, 260, 274, 285, 317, 361, 533, 634, 796, 864, 909, 953, 1135, 1201, 1295], "directli": [6, 30, 39, 57, 135, 163, 167, 172, 252, 274, 317, 456, 458, 459, 605, 771, 796, 818, 909, 1058, 1060, 1061, 1178, 1274, 1295, 1307, 1323, 1326], "directori": [39, 44, 145, 147, 150, 152, 317, 913], "dirpath": [34, 36, 40, 41, 44, 147, 317], "disabl": [44, 48, 49, 87, 88, 145, 150, 164, 220, 317, 817, 909], "disable_string_cach": 88, "disallow": 163, "discard": [199, 317, 466, 796, 831, 909, 1068, 1295], "disco": [658, 1225], "discont": [658, 1225], "discourag": [549, 796], "discoveri": [242, 317], "discret": [402, 405, 453, 481, 510, 529, 597, 796, 998, 1000, 1053, 1081, 1112, 1131, 1171, 1295], "disk": [44, 45, 46, 47, 48, 139, 317, 564, 865, 909], "dispatch": 915, "displai": [7, 10, 11, 12, 13, 17, 19, 23, 25, 39, 187, 206, 317, 822, 827, 909], "distanc": [223, 317, 481, 796, 840, 909, 1081, 1295], "distinct": [39, 167, 240, 242, 295, 317, 367, 489, 492, 541, 600, 609, 742, 796, 959, 1089, 1092, 1143, 1173, 1182, 1295, 1312, 1322, 1324, 1326], "distinct_count": [44, 48, 317, 909], "distribut": [498, 640, 796, 1100, 1208, 1295], "div": 1316, "divid": [20, 402, 435, 448, 456, 458, 459, 470, 498, 597, 796, 998, 1034, 1047, 1058, 1060, 1061, 1100, 1171, 1295, 1312, 1317], "divis": [470, 706, 796, 1317], "divisor": [265, 288, 317, 536, 542, 623, 624, 627, 628, 645, 711, 728, 730, 772, 773, 777, 785, 796, 869, 877, 909, 1190, 1192, 1212, 1285, 1295], "dl": [279, 317], "do": [1, 39, 45, 46, 47, 48, 50, 56, 57, 122, 123, 126, 133, 145, 147, 152, 156, 157, 158, 159, 177, 187, 189, 196, 219, 223, 242, 246, 269, 281, 285, 317, 320, 401, 409, 512, 548, 668, 669, 677, 678, 679, 768, 771, 787, 796, 813, 817, 818, 822, 824, 827, 840, 845, 854, 856, 865, 884, 909, 915, 997, 1004, 1064, 1114, 1235, 1236, 1244, 1245, 1246, 1279, 1295, 1300], "do_polars_oper": 29, "do_someth": 135, "do_various_th": 172, "doc": [38, 40, 41, 136, 139, 141, 156, 158, 174, 175, 185, 317, 917, 918], "document": [32, 91, 136, 174, 317, 321, 437, 440, 663, 682, 684, 685, 689, 792, 884, 917, 980, 1036, 1039, 1230, 1249, 1251, 1252, 1256], "doe": [10, 36, 38, 45, 50, 58, 109, 120, 122, 123, 124, 126, 127, 133, 134, 135, 136, 137, 138, 142, 143, 147, 148, 151, 153, 182, 196, 199, 203, 208, 209, 221, 222, 250, 251, 252, 282, 291, 294, 317, 320, 321, 451, 466, 470, 479, 540, 549, 648, 658, 670, 678, 679, 708, 792, 796, 816, 817, 822, 831, 835, 839, 845, 873, 879, 883, 909, 987, 1050, 1064, 1068, 1079, 1203, 1215, 1225, 1237, 1295, 1300, 1318], "doesn": [38, 133, 147, 208, 223, 317, 453, 796, 835, 840, 909, 1053, 1295], "dog": [647, 688, 691, 727, 1214, 1255, 1258], "doi": 1319, "dollar": [668, 669, 1235, 1236], "domain": [1, 656, 1223], "don": [58, 208, 223, 227, 282, 285, 317, 401, 512, 549, 590, 796, 835, 840, 873, 909, 915, 997, 1114, 1150, 1295], "done": [134, 153, 172, 178, 180, 223, 317, 332, 333, 590, 796, 811, 814, 840, 909, 925, 1295], "dot": [50, 564, 792, 796, 865, 909, 1295], "doubl": [276, 317, 668, 669, 1235, 1236], "dow": 1319, "down": [147, 150, 151, 152, 153, 469, 796, 1071, 1295], "download": [143, 147, 150, 151, 865, 909], "downstream": [275, 317, 633, 796, 1199, 1295], "dr": 149, "drago": [660, 1227], "dragon": 660, "dragonfr": 1227, "dragonfruit": [660, 672, 683, 1227, 1239, 1250], "dramat": 138, "draw": [20, 25, 163, 167, 1326], "drawback": 792, "drawfn": 1326, "drawing_charact": 20, "dremio": 135, "driver": [37, 135, 136, 317], "drop": [1, 123, 190, 191, 227, 282, 291, 317, 405, 407, 408, 510, 511, 597, 796, 825, 873, 879, 909, 1000, 1002, 1003, 1112, 1113, 1171, 1295, 1322], "drop_dupl": [282, 317, 873, 909], "drop_empty_row": [138, 144], "drop_first": [272, 317, 1271, 1295], "drop_in_plac": 317, "drop_nan": [408, 796, 1003, 1295], "drop_nul": [317, 407, 796, 909, 1002, 1295], "dset": 153, "dst": [435, 448, 1034, 1047], "dst_offset": [410, 1005], "dt": [1, 39, 50, 138, 144, 249, 317, 610, 742, 796, 805, 858, 909, 915, 1303, 1318, 1319], "dt1": 1318, "dt2": 1318, "dtm": [39, 317, 413, 915, 1008, 1318], "dtype": [10, 39, 49, 53, 59, 65, 79, 87, 88, 98, 120, 122, 124, 126, 127, 133, 134, 135, 136, 138, 142, 143, 144, 147, 151, 160, 161, 162, 163, 167, 174, 176, 180, 183, 208, 223, 249, 273, 274, 275, 276, 279, 285, 294, 317, 387, 388, 399, 400, 451, 460, 473, 507, 515, 546, 548, 549, 556, 595, 602, 603, 610, 613, 615, 617, 619, 621, 624, 626, 628, 635, 637, 662, 682, 699, 703, 709, 719, 744, 748, 752, 753, 755, 756, 757, 758, 768, 771, 778, 787, 796, 814, 819, 835, 840, 858, 883, 909, 914, 915, 917, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 977, 978, 979, 980, 985, 995, 996, 999, 1000, 1050, 1057, 1087, 1105, 1106, 1109, 1117, 1141, 1148, 1150, 1169, 1180, 1202, 1205, 1229, 1249, 1266, 1273, 1274, 1276, 1277, 1278, 1279, 1283, 1295, 1323, 1326], "dtype_format": [39, 317], "dtypekind": 176, "dtypelik": [174, 917], "dtypeoper": [1, 53], "dubiou": 91, "due": [180, 208, 223, 249, 252, 287, 317, 328, 418, 431, 435, 448, 573, 574, 576, 578, 580, 581, 610, 613, 615, 617, 619, 621, 624, 626, 628, 724, 737, 738, 740, 741, 783, 784, 796, 814, 835, 840, 858, 909, 1013, 1030, 1034, 1047], "dummi": [272, 317, 1271, 1295], "duplic": [50, 96, 215, 222, 223, 224, 282, 286, 317, 328, 487, 573, 597, 796, 839, 840, 841, 873, 876, 909, 1086, 1171, 1295, 1324], "duplicateerror": [597, 796, 1171, 1295], "dur": [224, 317, 841, 909], "durat": [172, 223, 287, 317, 410, 418, 441, 442, 443, 444, 445, 446, 447, 451, 457, 703, 737, 738, 740, 741, 783, 784, 796, 840, 909, 914, 915, 1005, 1013, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1050, 1059, 1276, 1278, 1295], "dure": [49, 95, 133, 134, 147, 172, 196, 317, 1064, 1295], "dutch": [409, 724, 1004], "dynam": [208, 317, 366, 540, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 796, 835, 909, 913, 958, 1142], "dynamicgroupbi": [208, 317], "e": [10, 34, 36, 38, 40, 41, 44, 45, 121, 130, 133, 139, 141, 145, 150, 152, 153, 165, 188, 199, 206, 210, 219, 226, 268, 269, 275, 285, 317, 326, 404, 453, 457, 460, 486, 543, 549, 554, 555, 556, 557, 558, 560, 561, 562, 564, 565, 566, 635, 640, 659, 678, 679, 690, 744, 758, 775, 786, 796, 823, 831, 843, 856, 909, 915, 1053, 1059, 1085, 1208, 1226, 1257, 1295, 1313, 1318, 1326], "e101": [39, 317], "e_filt": [560, 562], "e_sum_ov": [560, 562], "e_sum_slic": [560, 562], "each": [36, 39, 45, 50, 59, 66, 75, 134, 135, 138, 143, 151, 156, 157, 158, 159, 161, 184, 186, 192, 199, 206, 207, 208, 221, 223, 227, 240, 242, 249, 251, 253, 274, 279, 283, 286, 287, 295, 296, 298, 300, 302, 303, 311, 317, 342, 386, 402, 435, 448, 466, 489, 492, 518, 521, 528, 538, 545, 549, 597, 600, 608, 609, 616, 620, 631, 636, 643, 656, 660, 664, 665, 672, 674, 675, 683, 690, 705, 719, 722, 727, 752, 753, 778, 786, 796, 817, 820, 821, 826, 831, 835, 840, 854, 858, 874, 876, 885, 887, 889, 891, 892, 900, 909, 934, 984, 998, 1034, 1047, 1089, 1092, 1120, 1123, 1130, 1140, 1171, 1173, 1181, 1182, 1195, 1204, 1223, 1227, 1231, 1232, 1239, 1241, 1242, 1250, 1257, 1265, 1295, 1312, 1323, 1324, 1326], "eager": [208, 223, 242, 285, 317, 411, 414, 417, 419, 428, 429, 431, 432, 434, 435, 439, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 613, 615, 617, 619, 621, 624, 626, 628, 719, 723, 737, 738, 740, 741, 748, 752, 753, 768, 771, 775, 778, 783, 784, 787, 795, 796, 835, 840, 845, 909, 1005, 1006, 1009, 1012, 1013, 1014, 1015, 1020, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1323], "eagerli": [540, 1304], "ear": [672, 683, 1239], "earlier": [223, 317, 840, 909], "earliest": [208, 317, 434, 682, 685, 739, 835, 901, 909, 1033, 1249, 1252], "easi": 172, "easiest": 177, "easili": [50, 255, 279, 291, 296, 317, 778, 792, 860, 879, 885, 909], "east": [152, 224, 317, 841, 909], "ebf1d": [39, 317], "eee": [1, 39, 317, 915], "ef": 669, "effect": [39, 201, 208, 317, 418, 470, 549, 575, 577, 579, 796, 835, 882, 883, 909, 1005, 1013], "effici": [121, 135, 219, 221, 317, 548, 796], "efgh": 1318, "eg": [17, 25, 39, 58, 136, 172, 274, 317, 435, 682, 685, 706, 796, 915, 1249, 1252], "egnaro": 1318, "either": [79, 163, 218, 222, 223, 224, 240, 249, 250, 274, 275, 317, 457, 548, 595, 597, 610, 682, 714, 722, 778, 796, 817, 839, 840, 841, 843, 858, 909, 913, 915, 1059, 1169, 1171, 1249, 1295, 1308, 1326], "element": [13, 14, 25, 158, 159, 162, 165, 177, 179, 186, 218, 242, 250, 263, 265, 280, 288, 317, 334, 335, 336, 337, 338, 339, 350, 351, 385, 386, 389, 392, 393, 394, 395, 397, 398, 399, 400, 401, 407, 408, 461, 462, 466, 479, 490, 501, 509, 511, 512, 513, 516, 521, 529, 530, 531, 532, 536, 542, 544, 545, 548, 549, 590, 591, 600, 603, 611, 612, 614, 616, 618, 620, 622, 623, 625, 627, 632, 637, 638, 639, 643, 644, 645, 674, 675, 686, 701, 702, 704, 705, 711, 722, 728, 730, 772, 773, 777, 785, 796, 812, 821, 867, 869, 872, 877, 909, 926, 927, 928, 929, 930, 931, 942, 943, 976, 982, 985, 988, 989, 990, 991, 993, 994, 995, 996, 997, 1002, 1003, 1062, 1063, 1068, 1069, 1080, 1090, 1099, 1101, 1103, 1104, 1111, 1113, 1114, 1115, 1118, 1123, 1131, 1132, 1133, 1134, 1146, 1147, 1150, 1166, 1173, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1197, 1205, 1206, 1207, 1211, 1212, 1241, 1242, 1253, 1267, 1268, 1269, 1273, 1280, 1281, 1285, 1295, 1312, 1313], "elementwis": [548, 590, 611, 612, 614, 616, 618, 620, 623, 625, 627, 796, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1295], "elif": 786, "elig": [845, 909], "elimin": [498, 796, 1100, 1295], "elis": [234, 317, 850, 909], "ellips": 20, "ellipsi": [206, 317], "elppa": 1318, "els": [134, 786], "email": [656, 1223], "email_part": [656, 1223], "emphas": [317, 321], "emploi": 915, "empti": [13, 34, 36, 45, 100, 123, 133, 134, 138, 144, 147, 181, 182, 208, 233, 284, 317, 646, 654, 756, 774, 815, 816, 835, 849, 875, 909, 915, 985, 987, 1069, 1087, 1101, 1213, 1221, 1295], "en": [20, 39, 317], "enabl": [28, 29, 44, 48, 49, 87, 88, 145, 150, 152, 156, 157, 158, 159, 171, 174, 255, 276, 291, 317, 329, 331, 604, 605, 633, 648, 658, 670, 710, 792, 796, 817, 860, 879, 909, 917, 922, 923, 1177, 1178, 1199, 1215, 1225, 1237, 1277, 1284, 1295], "enable_string_cach": 87, "enclos": [472, 796], "encod": [62, 68, 78, 130, 133, 134, 147, 272, 317, 320, 371, 472, 608, 650, 694, 796, 962, 1181, 1217, 1271, 1295, 1300], "encount": [111, 133, 134, 147, 208, 317, 582, 583, 662, 663, 728, 732, 746, 796, 835, 909, 1159, 1160, 1229, 1230, 1295], "end": [36, 39, 45, 133, 134, 147, 208, 242, 317, 370, 373, 375, 410, 435, 460, 534, 647, 652, 656, 660, 666, 672, 676, 677, 678, 681, 719, 724, 736, 737, 738, 739, 740, 741, 744, 752, 753, 783, 784, 786, 792, 796, 835, 854, 909, 915, 964, 1005, 1034, 1097, 1136, 1219, 1223, 1227, 1233, 1239, 1243, 1244, 1245, 1250, 1295, 1318], "endpoint": [402, 597, 796, 998, 1171, 1295], "ends_a": 1318, "ends_in_digit": 1318, "ends_with": [370, 375, 647, 676, 915, 1243, 1316], "ends_with_expr": 373, "ends_with_lit": 373, "engin": [14, 37, 135, 136, 138, 169, 207, 222, 227, 275, 282, 303, 317, 548, 775, 796, 817, 834, 839, 845, 849, 873, 884, 892, 906, 909, 1150, 1276, 1295, 1307, 1323], "engine_opt": [37, 138, 317], "enginetyp": [817, 909], "enough": [512, 640, 796, 1114, 1208, 1295], "ensur": [10, 39, 136, 162, 165, 174, 199, 207, 240, 250, 275, 317, 486, 548, 796, 831, 834, 845, 884, 909, 913, 915, 917, 1276, 1295], "enter": 172, "entir": [39, 56, 57, 138, 144, 317, 817, 818, 909], "entri": [317, 909, 914, 1323], "entropi": [796, 1295], "enumer": [125, 133, 134, 138, 144, 147, 221, 317], "env": [4, 168], "env_onli": 30, "environ": [4, 30, 143, 145, 147, 150, 151, 152, 166, 169, 274, 317], "eol_char": [133, 134, 147], "eparg": 1318, "epoch": [64, 65, 748, 1319], "epoch_": [419, 1014], "epoch_n": [419, 1014], "epochtimeunit": [419, 748, 1014], "eq": [199, 317, 455, 466, 796, 831, 909, 1055, 1295], "eq_miss": [796, 1162, 1295], "equal": [49, 88, 133, 134, 147, 156, 157, 158, 159, 208, 223, 224, 234, 263, 317, 402, 448, 454, 455, 475, 500, 540, 585, 597, 603, 611, 612, 614, 616, 618, 620, 623, 625, 627, 643, 666, 667, 670, 692, 722, 772, 773, 786, 792, 796, 835, 840, 841, 850, 867, 909, 998, 1034, 1055, 1142, 1162, 1171, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1233, 1234, 1237, 1259, 1295, 1312, 1315, 1326], "equival": [39, 120, 122, 123, 124, 126, 137, 142, 143, 151, 208, 218, 238, 317, 326, 330, 454, 455, 457, 470, 475, 477, 500, 547, 569, 571, 584, 585, 586, 589, 595, 665, 688, 690, 691, 698, 706, 713, 796, 835, 909, 1054, 1055, 1059, 1074, 1076, 1099, 1102, 1149, 1161, 1162, 1232, 1255, 1257, 1258, 1295, 1305, 1313], "err": 657, "error": [14, 38, 57, 106, 110, 112, 122, 123, 126, 133, 134, 145, 147, 152, 180, 242, 250, 275, 317, 328, 353, 354, 371, 409, 515, 517, 519, 573, 605, 647, 650, 655, 657, 659, 662, 663, 682, 684, 685, 689, 796, 814, 818, 884, 892, 909, 945, 946, 962, 1004, 1117, 1119, 1121, 1178, 1214, 1217, 1222, 1224, 1226, 1229, 1230, 1249, 1251, 1252, 1256, 1276, 1295, 1321], "escap": [89, 133, 134, 136, 147, 653, 668, 669, 1220, 1235, 1236], "esp": 14, "especi": [161, 609, 796, 909, 1182, 1295], "espresso": 915, "est": 740, "establish": 135, "estim": [133, 134, 178, 194, 317, 333, 458, 459, 498, 718, 796, 811, 909, 925, 1057, 1060, 1061, 1100, 1295], "estimated_s": [317, 1295], "etc": [21, 38, 39, 133, 137, 138, 139, 141, 148, 149, 317, 549, 796, 913, 915, 1196, 1198, 1295, 1319], "eu": [148, 149], "eur": [206, 317, 1326], "europ": [414, 418, 434, 1009, 1013, 1033], "eval": [273, 317, 548, 549, 743, 796, 1150, 1273, 1295], "evalu": [45, 46, 47, 48, 152, 197, 199, 223, 317, 330, 343, 345, 346, 377, 378, 379, 380, 382, 383, 401, 466, 483, 503, 504, 540, 589, 590, 714, 716, 719, 723, 737, 738, 740, 741, 743, 752, 753, 768, 771, 778, 783, 784, 786, 787, 796, 817, 831, 837, 839, 840, 909, 935, 937, 938, 968, 969, 970, 971, 973, 974, 997, 1068, 1105, 1106, 1286, 1295, 1315], "even": [36, 45, 133, 317, 457, 594, 597, 796, 909, 915, 1059, 1171, 1295], "evenli": [208, 317, 835, 909], "event": [57, 818, 909], "eventu": [37, 317], "ever": [590, 796], "everi": [14, 36, 45, 133, 134, 138, 144, 147, 202, 208, 271, 287, 317, 345, 346, 347, 348, 351, 353, 359, 397, 398, 399, 400, 401, 435, 448, 462, 474, 505, 506, 510, 513, 516, 517, 518, 526, 529, 534, 538, 609, 654, 732, 733, 796, 833, 835, 909, 937, 938, 939, 940, 943, 945, 951, 993, 994, 995, 996, 997, 1034, 1047, 1063, 1073, 1107, 1108, 1112, 1115, 1118, 1119, 1120, 1128, 1131, 1136, 1140, 1182, 1221, 1295], "everybodi": [648, 670, 1215, 1237], "everyth": 915, "ew": [456, 458, 459, 796, 1058, 1060, 1061, 1295], "ewm_mean": [796, 1295], "ewm_mean_bi": [796, 1295], "ewm_std": [796, 1295], "ewm_var": [796, 1295], "ewma": [457, 796, 1059, 1295], "exact": [158, 161, 163, 167, 223, 261, 317, 333, 470, 654, 680, 681, 682, 684, 685, 706, 796, 840, 909, 1221, 1249, 1251, 1252], "exactli": [122, 123, 126, 156, 157, 158, 159, 162, 163, 167, 317, 674, 675, 680, 681, 742, 909, 1203, 1241, 1242, 1247, 1248, 1295], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 75, 79, 87, 88, 92, 95, 96, 97, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 142, 143, 144, 147, 148, 149, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 796, 808, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 909, 913, 914, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1075, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1295, 1300, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1315, 1317, 1318, 1319, 1320, 1321, 1323, 1324, 1325], "exc_tb": 1323, "exc_typ": 1323, "exc_val": 1323, "exce": [206, 317], "excel": [35, 39, 132, 138, 317, 808], "excelread": 138, "excelspreadsheetengin": 138, "except": [0, 189, 203, 210, 223, 226, 246, 268, 317, 387, 605, 660, 683, 744, 796, 808, 824, 840, 856, 909, 915, 977, 1080, 1104, 1178, 1227, 1250, 1267, 1276, 1295, 1322], "exclud": [163, 167, 208, 317, 386, 397, 400, 409, 486, 556, 705, 724, 792, 796, 835, 909, 915, 1004, 1085, 1295], "excluded_dtyp": [163, 164, 167], "exclus": [250, 317, 713, 719, 752, 753, 796], "execut": [38, 49, 58, 135, 136, 225, 264, 317, 404, 512, 710, 775, 796, 813, 817, 823, 845, 854, 868, 884, 909, 913, 1114, 1284, 1295, 1305, 1306, 1307, 1309, 1323, 1325], "execute_glob": 1323, "execute_opt": [135, 136], "exist": [1, 37, 38, 39, 50, 96, 137, 145, 148, 152, 163, 189, 203, 242, 246, 281, 286, 291, 292, 317, 328, 370, 373, 375, 413, 434, 668, 669, 726, 796, 820, 824, 826, 856, 859, 876, 878, 879, 880, 909, 915, 1008, 1033, 1235, 1236, 1325], "existing_t": 1325, "existing_table_path": [38, 317], "exit": [49, 87, 172, 1310, 1323], "exp": [456, 457, 458, 459, 796, 1058, 1059, 1060, 1061, 1295, 1316], "exp_a": 1317, "expand": [133, 145, 147, 152, 462, 554, 558, 603, 696, 796, 913, 915, 1063, 1295], "expand_selector": 915, "expans": 693, "expect": [66, 68, 101, 109, 117, 133, 135, 143, 145, 147, 150, 151, 152, 157, 159, 540, 549, 756, 796, 843, 845, 909], "expens": [133, 134, 143, 145, 147, 151, 152, 166, 168, 220, 227, 250, 251, 252, 281, 282, 317, 549, 796, 820, 822, 826, 859, 873, 878, 909, 1064, 1150, 1295, 1326], "experiment": [224, 279, 317, 841, 879, 909], "expiri": [143, 145, 147, 150, 151, 152], "explain": [56, 57, 177, 225, 317, 817, 818, 909, 1322], "explainformat": [827, 909], "explicit": [39, 95, 135, 147, 161, 264, 286, 317, 770, 868, 876, 909], "explicitli": [95, 136, 161, 163, 172, 203, 317, 604, 778, 796, 807, 1323], "explod": [317, 386, 468, 590, 606, 705, 796, 909, 913, 1179, 1295, 1313], "explor": [187, 317, 822, 909], "expon": [595, 796, 1169, 1295, 1317], "exponenti": [456, 457, 458, 459, 461, 595, 796, 1058, 1059, 1060, 1061, 1062, 1295, 1317], "export": [39, 40, 41, 175, 220, 221, 251, 252, 269, 271, 274, 317, 792, 915, 918, 1270, 1295], "expos": 808, "expr": [1, 50, 51, 52, 53, 54, 195, 197, 198, 222, 223, 224, 238, 242, 250, 255, 256, 274, 279, 291, 292, 317, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 791, 792, 796, 797, 798, 801, 802, 803, 804, 805, 828, 829, 830, 839, 840, 841, 855, 860, 861, 879, 880, 909, 913, 915, 997, 1004, 1007, 1008, 1022, 1030, 1054, 1055, 1059, 1066, 1067, 1072, 1074, 1076, 1102, 1114, 1120, 1136, 1140, 1149, 1161, 1162, 1214, 1219, 1226, 1243, 1295, 1321], "expr1": [1315, 1323], "expr2": [1315, 1323], "expr_unique_subset": [238, 317], "express": [0, 8, 45, 46, 47, 48, 56, 57, 160, 163, 167, 179, 195, 197, 199, 207, 213, 222, 223, 227, 238, 242, 250, 255, 256, 260, 263, 274, 279, 280, 291, 292, 294, 296, 303, 317, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 342, 343, 347, 348, 349, 350, 351, 354, 365, 370, 371, 372, 373, 374, 375, 386, 391, 392, 393, 394, 395, 401, 402, 403, 404, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 460, 462, 463, 465, 466, 470, 472, 473, 475, 476, 477, 478, 483, 486, 487, 488, 489, 490, 491, 492, 500, 501, 505, 506, 508, 509, 512, 513, 519, 521, 539, 540, 546, 547, 548, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 569, 571, 573, 574, 576, 578, 580, 581, 584, 585, 587, 589, 590, 594, 595, 596, 597, 599, 603, 604, 605, 606, 608, 609, 631, 632, 633, 636, 638, 639, 641, 643, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 672, 673, 674, 675, 683, 687, 697, 698, 701, 702, 705, 706, 707, 709, 710, 712, 713, 714, 715, 717, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 752, 753, 754, 755, 756, 757, 758, 760, 762, 765, 768, 770, 771, 772, 773, 774, 776, 778, 780, 782, 783, 784, 786, 787, 792, 795, 808, 812, 817, 818, 827, 828, 831, 834, 839, 840, 854, 860, 861, 864, 865, 867, 872, 879, 880, 881, 883, 885, 892, 909, 913, 915, 942, 986, 997, 1004, 1007, 1008, 1022, 1054, 1055, 1059, 1065, 1074, 1076, 1085, 1102, 1111, 1114, 1149, 1150, 1161, 1162, 1177, 1178, 1197, 1201, 1214, 1215, 1216, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1235, 1236, 1237, 1250, 1254, 1295, 1313, 1315, 1317, 1318, 1322], "exprmetanamespac": [553, 559], "ext": 135, "extend": [0, 123, 289, 317, 463, 796, 808, 913, 924, 1065, 1295], "extend_const": [796, 1295], "extens": [276, 317, 1277, 1295], "extern": [881, 909], "extra": [38, 133, 134, 137, 139, 141, 145, 147, 148, 149, 152, 196, 208, 317, 796, 835, 909, 913, 1064, 1295], "extract": [127, 177, 264, 317, 412, 415, 417, 420, 422, 423, 424, 425, 426, 427, 430, 432, 433, 436, 438, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 594, 656, 657, 658, 662, 663, 672, 674, 796, 1007, 1010, 1011, 1012, 1015, 1017, 1021, 1022, 1023, 1025, 1026, 1029, 1031, 1032, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1223, 1224, 1225, 1229, 1230, 1239, 1316], "extract_numb": [594, 796], "extracted_nr": 656, "extrem": [463, 611, 796, 1065, 1183, 1295], "extrema": [635, 796, 1202, 1295], "f": [51, 134, 135, 199, 206, 221, 269, 275, 281, 285, 317, 326, 366, 374, 540, 635, 654, 682, 685, 726, 796, 831, 909, 915, 958, 1142, 1221, 1249, 1252, 1295, 1300, 1313], "f32": [1, 53, 180, 264, 273, 279, 317, 635, 775, 796, 814, 868, 909, 915, 1148, 1295, 1321], "f4": [275, 317], "f5ed2452": [39, 317], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 50, 52, 54, 58, 75, 121, 123, 142, 153, 160, 163, 180, 181, 182, 185, 187, 188, 189, 192, 197, 198, 201, 205, 206, 207, 208, 213, 214, 222, 223, 229, 230, 231, 232, 236, 242, 243, 244, 262, 263, 265, 267, 279, 288, 291, 296, 299, 301, 304, 305, 306, 307, 309, 310, 317, 325, 328, 334, 335, 336, 337, 338, 339, 357, 363, 368, 374, 387, 389, 390, 392, 393, 394, 402, 403, 407, 408, 436, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 469, 470, 475, 477, 484, 485, 493, 494, 495, 496, 498, 500, 512, 523, 524, 536, 542, 543, 544, 545, 547, 550, 551, 552, 568, 571, 573, 582, 583, 584, 585, 591, 595, 597, 598, 599, 600, 604, 605, 611, 612, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 637, 638, 639, 640, 644, 645, 697, 701, 702, 706, 711, 720, 721, 725, 726, 728, 730, 743, 744, 758, 761, 762, 763, 775, 777, 785, 792, 796, 814, 815, 822, 824, 829, 830, 834, 835, 838, 839, 840, 847, 848, 855, 867, 869, 877, 879, 881, 885, 888, 890, 893, 894, 895, 896, 898, 899, 909, 915, 926, 927, 928, 929, 930, 931, 949, 955, 960, 965, 982, 983, 988, 989, 990, 998, 999, 1002, 1003, 1035, 1058, 1059, 1060, 1061, 1062, 1066, 1071, 1081, 1083, 1084, 1114, 1125, 1126, 1138, 1144, 1145, 1146, 1147, 1166, 1169, 1171, 1173, 1178, 1183, 1185, 1186, 1188, 1189, 1190, 1192, 1193, 1194, 1205, 1206, 1207, 1211, 1268, 1269, 1283, 1295, 1304, 1312, 1313, 1317, 1320, 1323, 1326], "f_string": 747, "fa1e": [687, 1254], "face": [143, 145, 147, 150, 151, 152], "facil": 135, "facilit": [183, 317], "factor": [456, 458, 459, 703, 796, 1058, 1060, 1061, 1278, 1295], "fail": [37, 38, 121, 137, 139, 143, 145, 147, 148, 150, 151, 152, 176, 275, 282, 317, 343, 438, 540, 682, 684, 685, 689, 796, 873, 909, 1150, 1249, 1251, 1252, 1256, 1276, 1295, 1321], "fall": [152, 402, 597, 796, 817, 884, 909, 998, 1171, 1295, 1312], "fals": [5, 7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 36, 38, 39, 44, 45, 46, 47, 48, 50, 56, 57, 58, 121, 122, 123, 125, 126, 127, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 147, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 176, 179, 180, 181, 182, 187, 193, 201, 205, 206, 207, 208, 212, 213, 215, 216, 217, 220, 222, 223, 225, 230, 231, 237, 238, 240, 242, 243, 250, 251, 252, 253, 255, 258, 261, 263, 264, 267, 270, 272, 275, 276, 280, 281, 282, 286, 287, 289, 291, 299, 301, 304, 305, 307, 310, 317, 329, 330, 331, 342, 345, 346, 349, 353, 354, 362, 367, 370, 373, 375, 386, 387, 396, 397, 398, 399, 400, 401, 402, 409, 421, 436, 453, 454, 455, 456, 458, 459, 477, 478, 481, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 503, 504, 508, 512, 515, 517, 519, 528, 535, 541, 547, 548, 549, 553, 555, 556, 557, 559, 561, 564, 565, 584, 585, 587, 589, 592, 593, 597, 600, 611, 612, 614, 616, 618, 620, 622, 623, 625, 627, 631, 633, 635, 640, 642, 643, 646, 647, 648, 649, 652, 658, 659, 661, 662, 668, 669, 670, 673, 674, 676, 682, 684, 685, 687, 705, 707, 710, 713, 714, 715, 716, 717, 719, 722, 723, 724, 727, 728, 731, 732, 737, 738, 740, 741, 752, 753, 756, 768, 771, 775, 778, 783, 784, 786, 787, 796, 812, 814, 815, 816, 817, 818, 822, 827, 834, 835, 839, 840, 843, 845, 854, 860, 863, 865, 867, 868, 872, 873, 876, 879, 884, 888, 890, 893, 894, 896, 899, 909, 913, 915, 922, 923, 934, 937, 938, 941, 945, 946, 954, 959, 961, 962, 964, 966, 977, 979, 981, 984, 985, 992, 993, 994, 995, 996, 997, 998, 1004, 1016, 1035, 1055, 1056, 1058, 1060, 1061, 1068, 1070, 1075, 1077, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1105, 1106, 1110, 1114, 1117, 1119, 1121, 1130, 1137, 1143, 1156, 1162, 1164, 1167, 1168, 1171, 1173, 1174, 1175, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1195, 1199, 1203, 1208, 1210, 1213, 1214, 1215, 1216, 1219, 1225, 1226, 1228, 1229, 1235, 1236, 1237, 1240, 1241, 1243, 1249, 1251, 1252, 1254, 1271, 1276, 1277, 1281, 1284, 1286, 1295, 1305, 1307, 1313, 1318, 1323], "far": [39, 317], "fashion": [222, 317, 827, 854, 865, 909], "fast": [44, 46, 48, 166, 168, 317, 463, 633, 796, 909, 913, 1065, 1199, 1295, 1326], "fast_executemani": [37, 317], "faster": [45, 46, 47, 48, 56, 57, 135, 138, 196, 275, 285, 317, 549, 708, 796, 817, 818, 827, 854, 865, 909, 1064, 1150, 1295], "fastexcel": [138, 155], "favor": [37, 317], "fay": 130, "feat1": [274, 279, 317], "feat2": [274, 279, 317], "feather": [40, 139, 150, 317, 808], "featur": [1, 44, 55, 66, 68, 274, 279, 317], "feature_0": [881, 909], "feature_0_train": [881, 909], "feature_1": [881, 909], "feature_nam": [279, 317], "feb": [155, 1318], "februari": 1318, "fed": 678, "feel": [648, 670, 1215, 1237], "fetch": [129, 817, 909], "fetch_california_h": [279, 317], "few": [206, 317], "fewer": [660, 683, 909, 1227, 1250], "ff": 1312, "ff00": [687, 1254], "fff": 1, "ffff00": [371, 372, 650, 962, 963, 1217], "ffffff": [39, 317], "ffi": [194, 317, 1057, 1295], "fgg": 915, "fghi": 1318, "fh": 134, "fiction": 1304, "field": [35, 36, 38, 45, 79, 113, 116, 123, 283, 317, 366, 540, 548, 549, 575, 577, 579, 608, 656, 657, 662, 674, 675, 695, 696, 697, 703, 710, 732, 733, 757, 778, 796, 874, 909, 958, 1142, 1150, 1181, 1224, 1241, 1242, 1263, 1265, 1278, 1295, 1319], "field_0": [366, 540, 958, 1142], "field_1": [366, 540, 958, 1142], "field_2": [958, 1142], "field_n": [366, 540, 958, 1142], "field_nam": [549, 796, 1150, 1295], "figsiz": [564, 854, 865, 909], "figur": [564, 630, 796, 865, 909, 1194, 1295], "file": [2, 3, 5, 6, 32, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 188, 196, 257, 317, 404, 472, 563, 567, 796, 823, 862, 909, 913, 1064, 1295], "file_cache_ttl": [143, 147, 150, 151], "filenam": 139, "filesystem": [38, 137, 148, 149, 317], "fill": [50, 58, 181, 197, 198, 260, 285, 317, 321, 369, 397, 400, 464, 465, 471, 484, 485, 612, 614, 616, 618, 620, 623, 625, 627, 634, 747, 768, 771, 787, 796, 829, 830, 864, 881, 909, 1066, 1067, 1083, 1084, 1163, 1184, 1185, 1187, 1190, 1191, 1192, 1201, 1295], "fill_char": [666, 667, 1233, 1234], "fill_nan": [198, 317, 465, 796, 830, 909, 1067, 1295], "fill_nul": [50, 197, 317, 464, 796, 829, 881, 909, 1066, 1295], "fill_valu": [260, 285, 317, 634, 796, 864, 909, 1201, 1295], "fillnullstrategi": [198, 317, 465, 796, 830, 909, 1067, 1295], "film": 1304, "filter": [1, 45, 46, 47, 48, 51, 56, 57, 137, 147, 148, 152, 153, 191, 215, 216, 217, 242, 303, 317, 560, 562, 652, 676, 712, 736, 739, 746, 775, 786, 796, 817, 818, 825, 827, 837, 854, 865, 868, 892, 909, 915, 1198, 1295, 1311], "final": [13, 39, 50, 152, 223, 225, 317, 456, 458, 459, 796, 822, 840, 909, 913, 1058, 1060, 1061, 1295, 1324], "find": [58, 204, 317, 632, 647, 648, 796, 1197, 1215, 1235, 1295], "find_pat": 659, "fine": [817, 906, 909], "finish": [196, 317, 1064, 1295], "finit": [488, 706, 728, 796, 1088, 1295], "first": [44, 50, 133, 134, 138, 139, 141, 144, 145, 147, 152, 156, 157, 158, 159, 177, 206, 208, 210, 223, 226, 227, 237, 241, 242, 249, 268, 272, 273, 281, 282, 287, 294, 300, 317, 342, 344, 353, 401, 405, 429, 431, 435, 451, 470, 480, 489, 502, 510, 512, 517, 518, 540, 548, 549, 561, 570, 594, 595, 610, 632, 643, 647, 654, 655, 659, 660, 662, 663, 668, 669, 683, 690, 725, 732, 746, 750, 786, 792, 796, 835, 836, 840, 844, 853, 858, 873, 881, 883, 889, 909, 915, 934, 945, 997, 999, 1000, 1028, 1030, 1034, 1050, 1080, 1089, 1104, 1112, 1114, 1119, 1120, 1142, 1150, 1197, 1210, 1221, 1222, 1224, 1226, 1227, 1229, 1230, 1235, 1236, 1250, 1257, 1267, 1271, 1273, 1276, 1295, 1315, 1316, 1318, 1324, 1326], "first_column": [39, 317], "first_non_nul": [540, 1142], "first_part": [674, 675, 1241, 1242], "fisher": [498, 640, 796, 1100, 1208, 1295], "fit": [130, 220, 261, 285, 317, 635, 771, 796, 1202, 1203, 1295], "five": [278, 317, 1326], "fix": [10, 59, 68, 161, 451, 742, 1050], "flag": [55, 160, 275, 317, 633, 647, 655, 656, 659, 668, 669, 796, 827, 845, 909, 915, 1199, 1214, 1222, 1223, 1226, 1235, 1236, 1276, 1295, 1318], "flat": [130, 252, 317, 513, 606, 796, 1115, 1179, 1295], "flatten": 796, "flavour": [39, 135, 317], "flight": 135, "flight_sql": 135, "flightsql": 135, "float": [10, 11, 36, 39, 45, 69, 70, 133, 134, 147, 153, 156, 157, 158, 159, 160, 163, 167, 176, 187, 194, 197, 223, 244, 253, 274, 275, 309, 317, 349, 390, 402, 407, 408, 436, 453, 454, 455, 456, 458, 459, 464, 469, 470, 475, 477, 484, 488, 491, 493, 494, 495, 496, 500, 508, 528, 543, 547, 550, 564, 568, 582, 583, 584, 585, 595, 597, 598, 611, 612, 614, 616, 618, 620, 621, 623, 625, 627, 629, 631, 637, 706, 769, 771, 796, 822, 829, 840, 855, 865, 898, 909, 915, 941, 977, 983, 998, 999, 1001, 1002, 1003, 1035, 1053, 1057, 1058, 1060, 1061, 1066, 1071, 1081, 1100, 1110, 1130, 1145, 1159, 1160, 1169, 1170, 1171, 1172, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1195, 1198, 1205, 1208, 1212, 1266, 1276, 1285, 1295, 1323, 1326], "float16": [279, 317], "float32": [1, 10, 36, 45, 53, 180, 201, 273, 274, 275, 279, 317, 457, 796, 814, 909, 915, 1059, 1087, 1148, 1274, 1276, 1279, 1295], "float4": [264, 317, 775, 868, 909, 1321], "float64": [10, 36, 39, 45, 123, 133, 142, 160, 163, 183, 192, 194, 201, 254, 279, 291, 317, 334, 335, 336, 337, 338, 339, 374, 387, 392, 393, 394, 403, 436, 457, 460, 493, 494, 599, 638, 639, 701, 702, 744, 758, 768, 771, 787, 792, 796, 819, 826, 859, 879, 909, 914, 915, 1035, 1059, 1277, 1283, 1295], "float_list": 75, "float_precis": [9, 10, 27, 36, 39, 45, 317, 909], "float_scientif": [36, 45, 317, 909], "floatfmt": 11, "floor": [52, 470, 796, 1295, 1316], "floor_a": 1317, "floordiv": [706, 796], "fmt": [11, 223, 317, 483, 747, 796, 837, 840, 909], "fmt_number": [317, 321], "fmt_str_length": [12, 737, 738, 740, 741], "fmt_table_cell_list_len": 13, "fmt_titl": [39, 317], "fn": [732, 733, 746, 770], "foggi": [668, 669, 1235, 1236], "fold": [317, 561, 725, 732, 733, 770], "folder": 153, "follow": [39, 44, 55, 133, 134, 135, 137, 138, 144, 147, 148, 149, 208, 223, 227, 241, 249, 275, 287, 317, 431, 435, 448, 457, 548, 594, 595, 600, 610, 613, 615, 617, 619, 621, 622, 624, 626, 628, 637, 695, 706, 721, 737, 738, 740, 741, 758, 783, 784, 786, 788, 789, 791, 796, 797, 798, 801, 803, 804, 805, 835, 840, 853, 858, 909, 915, 1030, 1034, 1047, 1059, 1169, 1173, 1196, 1198, 1205, 1276, 1287, 1289, 1291, 1295, 1296, 1301, 1302, 1303, 1321, 1326], "font": [39, 317], "font_color": [39, 317], "font_siz": [39, 317], "foo": [34, 36, 38, 40, 41, 42, 43, 44, 130, 142, 143, 180, 183, 184, 185, 189, 190, 191, 192, 193, 196, 199, 201, 203, 204, 205, 209, 210, 211, 212, 213, 214, 216, 222, 226, 227, 228, 229, 230, 231, 232, 235, 236, 239, 242, 244, 246, 247, 250, 253, 254, 255, 257, 259, 262, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 281, 282, 283, 288, 289, 290, 295, 317, 388, 402, 404, 431, 474, 480, 483, 502, 553, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 597, 606, 646, 649, 651, 654, 656, 657, 661, 671, 673, 675, 677, 678, 679, 680, 681, 688, 691, 700, 718, 728, 729, 730, 745, 749, 750, 751, 754, 755, 759, 761, 763, 764, 766, 767, 769, 774, 777, 781, 785, 786, 792, 796, 814, 819, 820, 824, 825, 826, 831, 837, 838, 839, 852, 856, 859, 860, 873, 874, 878, 881, 909, 914, 915, 978, 998, 1030, 1121, 1169, 1171, 1179, 1216, 1218, 1221, 1223, 1224, 1238, 1242, 1247, 1248, 1255, 1258, 1295, 1309, 1311, 1312, 1313, 1315, 1318, 1321], "foo1": 1318, "foo11": [201, 317], "foo_": [558, 673, 747], "foo_1": [272, 317], "foo_2": [272, 317], "foo_3_4": 1318, "foo_a": [242, 317], "foo_a_bar_1": 747, "foo_at_1": 1313, "foo_b": [242, 317], "foo_b_bar_2": 747, "foo_bar": [553, 559, 673, 756, 1309], "foo_bar2": [553, 559], "foo_bar_baz": 673, "foo_c_bar_3": 747, "foo_low": [688, 1318], "foo_mean": 1313, "foo_q25": 1312, "foo_q50": 1312, "foo_q75": 1312, "foo_std": 1312, "foo_strip": 677, "foo_strip_end": 678, "foo_strip_start": 679, "foo_sum": [1312, 1313], "foo_uniqu": 1313, "foo_upp": [691, 1318], "foo_var": 1312, "foobar": [680, 681, 1247, 1248, 1318], "foobarbar": [681, 1248], "foofoobar": [680, 1247], "foral": [456, 458, 459, 796, 1058, 1060, 1061, 1295], "forc": [223, 227, 275, 303, 317, 540, 839, 840, 892, 909, 1150, 1276, 1295], "force_parallel": [223, 317, 839, 840, 909], "form": [36, 45, 120, 122, 123, 124, 126, 142, 143, 151, 220, 251, 285, 317, 591, 690, 796, 909, 1166, 1257, 1295, 1318], "format": [7, 11, 15, 16, 20, 35, 36, 39, 40, 41, 44, 45, 91, 131, 133, 134, 135, 138, 139, 141, 144, 147, 153, 175, 188, 195, 206, 220, 233, 242, 251, 252, 257, 271, 284, 315, 317, 321, 404, 435, 437, 440, 563, 564, 565, 682, 684, 685, 689, 742, 796, 823, 827, 828, 849, 862, 875, 909, 918, 1036, 1039, 1249, 1251, 1252, 1256, 1294, 1318, 1319], "formula": [39, 317, 453, 796, 1053, 1295], "fortran": [274, 275, 317], "forward": [198, 223, 260, 317, 361, 409, 428, 465, 471, 533, 634, 796, 830, 840, 864, 909, 953, 1004, 1027, 1067, 1135, 1201, 1295], "forward_fil": [287, 317, 369, 397, 400, 634, 796], "found": [20, 36, 39, 45, 92, 113, 116, 123, 127, 145, 152, 192, 264, 317, 632, 659, 663, 680, 681, 682, 685, 796, 868, 909, 1197, 1226, 1230, 1247, 1248, 1249, 1252, 1295, 1307, 1323], "four": [278, 317, 1323], "fourth": [498, 796, 1100, 1295], "frac": [456, 457, 458, 459, 640, 796, 1058, 1059, 1060, 1061, 1208, 1295], "fraction": [36, 45, 156, 157, 158, 159, 253, 317, 436, 528, 591, 631, 682, 685, 796, 909, 1035, 1130, 1166, 1195, 1249, 1252, 1295], "fragment": 1323, "frame": [36, 37, 39, 45, 50, 57, 58, 123, 134, 138, 144, 156, 157, 180, 181, 187, 220, 221, 225, 227, 234, 238, 241, 250, 251, 252, 264, 279, 285, 286, 317, 775, 814, 815, 822, 850, 853, 868, 876, 909, 915, 985, 1295, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1322, 1326], "frame_data": [1306, 1309], "frameinittyp": [317, 909], "frametyp": [50, 1323], "framework": [242, 284, 317, 875, 909], "freedom": [265, 288, 317, 536, 542, 623, 624, 627, 628, 645, 711, 728, 730, 772, 773, 777, 785, 796, 869, 877, 909, 1190, 1192, 1212, 1285, 1295], "freeli": [775, 868, 909, 915], "freez": [39, 317], "freeze_pan": [39, 317], "frequenc": [287, 317, 710, 796, 1284, 1295], "frequent": [1196, 1198, 1295], "fri": [317, 320], "fridai": [208, 317, 409, 437, 440, 724, 835, 909, 1004, 1036, 1039], "friendship": 12, "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 35, 36, 38, 39, 45, 50, 58, 79, 91, 95, 111, 115, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 177, 180, 187, 188, 189, 194, 196, 199, 200, 206, 208, 220, 221, 222, 223, 224, 225, 233, 242, 246, 249, 250, 252, 253, 255, 256, 264, 272, 279, 281, 282, 284, 285, 286, 287, 293, 317, 320, 321, 366, 374, 402, 403, 404, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 460, 470, 472, 484, 498, 516, 528, 540, 549, 557, 582, 583, 585, 590, 591, 594, 597, 599, 610, 611, 613, 615, 617, 619, 621, 624, 626, 628, 631, 643, 655, 656, 660, 662, 672, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 708, 720, 721, 724, 725, 736, 737, 738, 739, 740, 741, 742, 756, 771, 775, 782, 783, 784, 792, 795, 796, 814, 822, 823, 824, 831, 835, 839, 840, 841, 849, 856, 858, 860, 861, 868, 873, 875, 876, 881, 882, 909, 915, 958, 965, 998, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1055, 1057, 1059, 1064, 1100, 1118, 1130, 1142, 1159, 1160, 1162, 1163, 1166, 1171, 1183, 1195, 1222, 1223, 1227, 1229, 1239, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1256, 1271, 1286, 1295, 1304, 1305, 1306, 1307, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326], "from_arrai": 775, "from_arrow": 121, "from_json": 796, "from_panda": 121, "from_repr": [273, 317, 1273, 1295], "fromkei": [51, 53], "front": [208, 317, 835, 909], "fruit": [270, 317, 607, 652, 676, 683, 796, 1219, 1243, 1250], "fruits_revers": [607, 796], "fsspec": [133, 134, 139, 141, 148, 149, 155], "fsspecfileio": 149, "full": [11, 44, 48, 50, 58, 65, 91, 123, 126, 133, 134, 135, 137, 142, 143, 145, 147, 148, 149, 151, 152, 153, 222, 286, 317, 660, 662, 668, 669, 682, 683, 684, 685, 689, 737, 738, 839, 845, 876, 909, 915, 1227, 1229, 1235, 1236, 1249, 1250, 1251, 1252, 1256, 1295, 1311, 1326], "full_sent": 727, "fulli": [165, 241, 253, 275, 317], "funcnam": [39, 317], "function": [0, 31, 32, 33, 39, 49, 50, 51, 52, 53, 54, 57, 66, 68, 87, 88, 118, 121, 125, 127, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 174, 176, 179, 185, 188, 194, 201, 224, 227, 233, 241, 242, 246, 264, 274, 275, 276, 279, 280, 281, 284, 285, 286, 303, 317, 320, 321, 329, 366, 385, 386, 401, 402, 404, 435, 456, 458, 459, 481, 540, 548, 549, 574, 575, 590, 594, 597, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 637, 640, 703, 704, 705, 714, 718, 729, 731, 732, 733, 745, 746, 748, 750, 751, 754, 757, 758, 761, 763, 766, 768, 770, 772, 773, 777, 781, 785, 787, 792, 796, 808, 812, 818, 823, 841, 845, 849, 853, 856, 868, 872, 875, 876, 883, 892, 909, 913, 917, 958, 976, 981, 997, 998, 1034, 1057, 1058, 1060, 1061, 1081, 1142, 1150, 1171, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1196, 1198, 1203, 1205, 1208, 1274, 1277, 1279, 1280, 1295, 1300, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1321, 1322, 1323, 1324, 1325, 1326], "function_nam": 913, "further": 792, "futur": [57, 176, 187, 258, 317, 818, 822, 863, 909], "g": [36, 45, 130, 133, 137, 139, 141, 148, 153, 165, 176, 188, 219, 275, 285, 317, 326, 404, 457, 460, 549, 635, 744, 796, 823, 856, 909, 1059, 1295, 1326], "g1": [466, 712, 796], "g2": [466, 712, 796], "g_1": [640, 796, 1208, 1295], "gag": 26, "gamma": [456, 458, 459, 796, 1058, 1060, 1061, 1295], "gantt": [854, 909], "gather": [134, 202, 317, 342, 474, 516, 722, 796, 833, 909, 934, 1073, 1118, 1295], "gather_everi": [317, 796, 909, 1295], "gb": [194, 317, 374, 1057, 1295], "gbp": 1326, "gc": [38, 137, 148, 149, 317], "gca": 26, "gcaacgcatata": 26, "gcp": [33, 143, 145, 147, 149, 150, 151, 152], "gdp": [223, 317, 840, 909], "gdp2": [223, 317, 840, 909], "gdp_date": [223, 317, 840, 909], "ge": [796, 1295], "gener": [1, 130, 135, 136, 154, 160, 161, 162, 163, 164, 165, 167, 176, 183, 185, 242, 253, 272, 275, 281, 317, 387, 528, 631, 636, 719, 737, 740, 752, 753, 755, 771, 783, 784, 796, 909, 977, 1130, 1195, 1204, 1271, 1295, 1326], "geq": [456, 458, 459, 796, 1058, 1060, 1061, 1295], "germani": [223, 317, 840, 909], "get": [50, 57, 140, 146, 153, 177, 179, 183, 184, 192, 200, 203, 205, 208, 210, 211, 215, 217, 218, 226, 229, 236, 237, 242, 249, 250, 254, 259, 262, 268, 276, 280, 290, 300, 311, 317, 327, 340, 341, 342, 344, 352, 355, 367, 374, 386, 388, 397, 398, 399, 400, 409, 419, 467, 473, 480, 497, 499, 502, 514, 520, 541, 550, 551, 552, 560, 562, 568, 582, 583, 592, 593, 598, 609, 610, 641, 645, 654, 699, 700, 704, 705, 707, 711, 722, 724, 745, 750, 754, 758, 759, 760, 761, 763, 764, 765, 767, 777, 781, 785, 796, 812, 817, 818, 820, 826, 832, 835, 836, 842, 844, 858, 859, 866, 871, 872, 878, 889, 900, 909, 913, 914, 919, 932, 933, 934, 935, 936, 944, 947, 959, 965, 978, 984, 993, 994, 995, 996, 1004, 1014, 1052, 1069, 1070, 1075, 1080, 1085, 1086, 1098, 1101, 1104, 1116, 1122, 1143, 1151, 1153, 1154, 1156, 1158, 1159, 1160, 1167, 1168, 1172, 1182, 1209, 1212, 1221, 1267, 1271, 1277, 1281, 1285, 1295], "get_chunk": 1295, "get_column": [176, 277, 317], "get_column_index": 317, "get_worksheet_by_nam": [39, 317], "gevent": [57, 155, 818, 909], "gh": 669, "gh45": 669, "gh45ij67kl": 669, "ghi": [326, 656, 796, 915, 1223], "gil": [549, 796], "git": 55, "github": [136, 317], "give": [143, 150, 151, 223, 233, 282, 284, 317, 419, 470, 498, 603, 706, 710, 796, 808, 840, 849, 873, 875, 909, 1014, 1100, 1284, 1295, 1322], "given": [39, 50, 97, 102, 119, 120, 122, 123, 124, 126, 133, 134, 135, 136, 138, 139, 141, 142, 143, 144, 145, 147, 150, 151, 152, 158, 159, 160, 161, 163, 165, 166, 167, 168, 174, 194, 195, 197, 208, 218, 227, 240, 241, 250, 251, 252, 260, 263, 279, 286, 317, 349, 361, 366, 374, 386, 391, 410, 414, 437, 439, 440, 453, 457, 481, 486, 508, 533, 540, 543, 549, 590, 594, 600, 603, 604, 606, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 632, 634, 656, 657, 666, 667, 682, 685, 692, 695, 705, 744, 745, 754, 757, 758, 771, 772, 773, 796, 828, 835, 845, 853, 864, 867, 876, 892, 909, 914, 915, 917, 941, 953, 958, 965, 986, 1005, 1009, 1036, 1038, 1039, 1053, 1057, 1059, 1081, 1085, 1099, 1110, 1135, 1142, 1145, 1148, 1150, 1163, 1169, 1173, 1179, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1197, 1201, 1223, 1224, 1233, 1234, 1249, 1252, 1259, 1283, 1286, 1295, 1304, 1306, 1311, 1313, 1314, 1317, 1318, 1323, 1325, 1326], "glimps": [187, 210, 317], "glob": [133, 134, 145, 147, 150, 151, 152], "global": [49, 87, 88, 138, 154, 163, 171, 264, 317, 604, 605, 775, 796, 868, 909, 979, 980, 1177, 1178, 1295, 1305, 1307, 1322], "gmt": [414, 418, 434, 1009, 1013, 1033], "go": [12, 133, 134, 147, 652, 1219], "godfath": 1304, "goe": 12, "gonfruit": 1250, "good": [44, 46, 48, 220, 317, 909, 1317], "goodby": 1, "googl": [33, 137, 148, 149], "gpu": [274, 317, 817, 884, 906, 909, 1274, 1295], "gpu_devic": [274, 317], "gpudevic": [274, 317], "gpuengin": [817, 909], "grade": [1100, 1295], "grain": [817, 906, 909], "granular": 1323, "grape": 1318, "graph": [56, 135, 225, 317, 817, 837, 881, 909], "graphviz": [225, 317, 564, 865, 909], "great": [317, 321], "great_tabl": [317, 321], "greater": [181, 223, 317, 475, 477, 486, 640, 666, 667, 675, 692, 796, 840, 909, 1085, 1208, 1233, 1234, 1242, 1259, 1295], "greatest": [1312, 1316], "greatli": [139, 150], "green": [49, 87, 88, 303, 710, 796, 892, 1284, 1295], "greenlet": [57, 818, 909], "greet": 1, "grid": [484, 796], "grid_point": [484, 796], "gridlin": [39, 317], "gross": 1304, "group": [9, 27, 44, 48, 134, 152, 180, 207, 208, 221, 238, 240, 242, 249, 252, 285, 287, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 320, 327, 386, 401, 462, 468, 473, 476, 512, 548, 549, 560, 562, 590, 600, 609, 610, 642, 643, 647, 655, 656, 657, 659, 668, 669, 705, 710, 758, 796, 814, 834, 835, 858, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 909, 913, 915, 997, 1114, 1182, 1214, 1222, 1223, 1224, 1226, 1235, 1236, 1284, 1295, 1304, 1312, 1322, 1323], "group_bi": [208, 238, 242, 249, 287, 316, 317, 327, 386, 466, 468, 473, 476, 548, 549, 590, 642, 643, 705, 712, 737, 740, 758, 796, 817, 818, 827, 835, 854, 858, 865, 907, 909, 915], "group_by_dynam": [249, 317, 858, 909], "group_by_partit": [854, 909], "group_col": [466, 712, 796], "group_df": [303, 892], "group_dtyp": [590, 796], "group_index": [655, 1222], "group_to_row": [590, 796], "groupbi": [207, 317, 549, 758, 796], "grow": [289, 317], "grown": [212, 317], "gt": [317, 321, 796, 1295], "gte": [466, 712, 796], "guarante": [44, 48, 133, 134, 179, 187, 209, 280, 282, 317, 385, 386, 479, 703, 704, 705, 796, 812, 822, 872, 873, 909, 976, 1079, 1278, 1280, 1295], "guid": [796, 913, 1326], "gzip": [44, 48, 317, 909], "h": [285, 317, 326, 437, 440, 635, 668, 669, 682, 685, 689, 796, 1235, 1236, 1249, 1252, 1256, 1318, 1319], "ha": [38, 39, 50, 57, 125, 135, 147, 170, 176, 287, 293, 298, 317, 385, 386, 401, 472, 548, 561, 567, 660, 683, 693, 704, 705, 745, 754, 792, 796, 818, 882, 887, 892, 909, 976, 985, 997, 999, 1227, 1250, 1280, 1295], "half": [279, 317, 435, 456, 457, 458, 459, 796, 1034, 1058, 1059, 1060, 1061, 1295], "half_lif": [456, 457, 458, 459, 796, 1058, 1059, 1060, 1061, 1295], "ham": [34, 36, 38, 40, 41, 44, 180, 183, 184, 185, 189, 190, 191, 192, 193, 199, 204, 209, 210, 212, 222, 226, 228, 230, 232, 235, 239, 244, 246, 247, 250, 253, 254, 255, 262, 265, 266, 268, 272, 273, 275, 276, 277, 282, 288, 289, 317, 388, 564, 565, 792, 814, 819, 820, 824, 825, 826, 831, 839, 852, 856, 859, 860, 873, 881, 909, 978, 1311, 1312], "ham_a": [272, 317], "ham_b": [272, 317], "ham_right": [222, 317, 839, 909], "hamburg": 792, "hand": [39, 133, 134, 147, 317, 529, 530, 531, 532, 1131, 1132, 1133, 1134], "handi": [409, 724, 1004], "handl": [38, 56, 57, 58, 94, 127, 133, 134, 147, 153, 199, 203, 317, 405, 510, 654, 692, 796, 817, 818, 831, 909, 913, 1000, 1112, 1221, 1259, 1295], "handler": [131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 188, 317, 404, 796, 823, 909], "happen": [135, 414, 597, 796, 1009, 1171, 1295], "hard": [147, 845, 909], "harder": [208, 317, 835, 909], "hardwar": 1326, "has_head": [133, 134, 138, 144, 147], "has_nul": [796, 1078, 1295], "has_prefix": 676, "has_suffix": 652, "has_two": 1313, "has_valid": 1295, "hash": [209, 317, 796, 1295], "hash_row": 317, "hat": [668, 669, 1235, 1236], "have": [5, 14, 30, 39, 49, 50, 65, 88, 121, 131, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 177, 188, 196, 220, 222, 223, 242, 245, 249, 251, 252, 271, 279, 294, 317, 401, 404, 456, 458, 459, 549, 561, 600, 604, 605, 610, 657, 670, 796, 823, 839, 840, 849, 858, 882, 883, 909, 913, 915, 997, 999, 1058, 1060, 1061, 1064, 1173, 1177, 1178, 1235, 1237, 1295, 1322, 1324, 1326], "haystack": [656, 1223], "he": 678, "head": [147, 206, 226, 268, 317, 332, 502, 796, 844, 909, 1104, 1267, 1295], "header": [36, 39, 44, 45, 48, 127, 133, 134, 138, 144, 147, 192, 281, 317, 909], "header_format": [39, 317], "header_nam": [281, 317], "headerless": 147, "heap": [194, 317, 796, 913, 1057, 1295], "heatmap": [39, 317], "heavili": 152, "height": [39, 130, 163, 191, 317], "hell": [677, 1244], "hello": [1, 20, 677, 678, 679, 915, 1121, 1244, 1245, 1246, 1306, 1309], "hello_": 747, "hello_data": 1309, "hello_world": 1309, "help": [39, 156, 157, 158, 159, 317, 909], "helper": [317, 321, 792], "henc": [668, 1236], "here": [38, 39, 44, 120, 122, 123, 124, 126, 135, 136, 137, 142, 143, 145, 147, 148, 149, 150, 151, 152, 161, 163, 167, 177, 242, 317, 409, 548, 549, 657, 663, 724, 796, 865, 909, 915, 1004, 1230], "hex": [371, 372, 650, 651, 687, 962, 963, 1217, 1218, 1254], "hexadecim": [962, 963], "hf": [143, 145, 147, 150, 151, 152], "hf_token": [143, 145, 147, 150, 151, 152], "hi": [1, 1318], "hidden": [39, 317], "hidden_column": [39, 317], "hide": [21, 22, 23, 24], "hide_gridlin": [39, 317], "hide_password": 135, "high": [252, 317, 321, 597, 796, 808, 1171, 1295], "higher": [44, 48, 187, 244, 309, 317, 598, 620, 621, 769, 796, 822, 855, 898, 909, 999, 1172, 1188, 1295], "highest": [317, 321, 600, 709, 728, 796, 909, 1173, 1295], "highli": [796, 913], "hippopotamu": [666, 667, 1233, 1234], "hist": [796, 1295, 1300], "histogram": [1295, 1300], "hit": [813, 909], "hive": [145, 150, 152], "hive_partit": [145, 150, 152], "hive_schema": [145, 150, 152], "hmm": 915, "hold": [261, 275, 317, 1276, 1295], "holidai": [409, 724, 1004], "home": [690, 1257], "horizont": [20, 58, 96, 201, 212, 229, 231, 236, 267, 285, 317, 715, 717, 726, 727, 732, 733, 735, 743, 746, 760, 762, 765, 770, 780, 881, 909], "host": [55, 133, 139, 141, 152], "hour": [143, 147, 150, 151, 208, 223, 249, 287, 317, 423, 425, 426, 430, 431, 435, 436, 442, 448, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 737, 738, 739, 740, 741, 742, 782, 783, 784, 796, 835, 840, 858, 909, 915, 1030, 1034, 1041, 1047, 1059, 1295, 1319], "hours_diff": 442, "hous": [279, 317], "how": [11, 38, 39, 50, 58, 96, 136, 143, 145, 147, 150, 151, 152, 191, 199, 222, 223, 242, 285, 286, 317, 350, 405, 434, 484, 509, 510, 590, 603, 622, 682, 685, 724, 739, 786, 796, 825, 831, 839, 840, 876, 881, 909, 913, 942, 1000, 1033, 1111, 1112, 1189, 1249, 1252, 1295], "howev": [1, 123, 135, 145, 152, 194, 227, 275, 317, 590, 796, 817, 909, 1057, 1295], "hstack": [96, 317], "html": [32, 39, 40, 41, 121, 135, 139, 141, 174, 175, 176, 185, 317, 917, 918], "http": [20, 32, 39, 40, 41, 121, 135, 136, 139, 141, 174, 175, 176, 185, 317, 655, 657, 865, 909, 917, 918, 1222, 1224], "hug": [143, 145, 147, 150, 151, 152], "hut": [668, 669, 1235, 1236], "hvplot": [317, 320, 1295, 1300], "hyperbol": [335, 337, 339, 393, 639, 702, 796, 927, 929, 931, 989, 1207, 1269, 1295], "hyperloglog": [178, 317, 333, 718, 796, 811, 909, 925, 1295], "hyphen": [646, 1213], "hypothesi": [161, 163, 166, 167, 1326], "i": [1, 12, 14, 17, 31, 32, 33, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 64, 65, 66, 67, 68, 80, 88, 92, 94, 95, 96, 97, 98, 99, 101, 102, 107, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 177, 178, 179, 182, 183, 187, 188, 191, 193, 194, 196, 199, 203, 207, 208, 209, 210, 213, 214, 218, 220, 221, 222, 223, 224, 225, 226, 227, 233, 234, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 253, 256, 257, 258, 260, 262, 263, 264, 265, 268, 269, 274, 275, 276, 279, 280, 281, 282, 284, 285, 286, 287, 288, 292, 294, 295, 303, 317, 320, 321, 326, 329, 331, 332, 333, 343, 346, 353, 354, 361, 366, 385, 386, 401, 402, 404, 407, 408, 409, 410, 413, 421, 428, 429, 431, 435, 437, 448, 456, 457, 458, 459, 462, 466, 470, 479, 481, 483, 486, 498, 504, 511, 512, 515, 517, 519, 528, 533, 534, 536, 540, 542, 545, 548, 549, 553, 555, 556, 557, 559, 560, 561, 563, 572, 590, 595, 597, 600, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 636, 637, 640, 641, 642, 643, 645, 646, 647, 648, 649, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 679, 682, 683, 684, 685, 687, 689, 690, 692, 697, 704, 705, 710, 711, 714, 715, 716, 717, 718, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 737, 738, 740, 741, 746, 750, 751, 752, 753, 755, 756, 758, 761, 763, 766, 768, 771, 772, 773, 774, 775, 777, 781, 783, 784, 785, 786, 787, 792, 796, 811, 812, 813, 816, 817, 818, 820, 822, 823, 825, 826, 827, 831, 834, 835, 838, 839, 840, 841, 843, 845, 849, 850, 854, 856, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 875, 876, 877, 878, 880, 883, 884, 892, 902, 909, 913, 915, 922, 923, 924, 925, 938, 945, 946, 953, 958, 976, 979, 981, 986, 987, 997, 998, 999, 1002, 1003, 1004, 1005, 1008, 1016, 1030, 1034, 1036, 1047, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1068, 1069, 1079, 1080, 1081, 1085, 1087, 1097, 1099, 1100, 1101, 1104, 1106, 1113, 1114, 1117, 1119, 1121, 1130, 1135, 1136, 1142, 1150, 1169, 1171, 1173, 1175, 1177, 1178, 1179, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1195, 1196, 1197, 1198, 1199, 1201, 1204, 1205, 1208, 1209, 1212, 1213, 1214, 1215, 1216, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1239, 1242, 1244, 1245, 1246, 1249, 1250, 1251, 1252, 1254, 1256, 1257, 1259, 1267, 1270, 1274, 1276, 1277, 1279, 1280, 1284, 1285, 1295, 1300, 1304, 1305, 1310, 1314, 1315, 1318, 1321, 1323, 1324, 1326], "i0e0": 1326, "i16": [1, 53, 417, 432, 450, 635, 796, 915, 1031, 1273, 1295, 1326], "i32": [1, 53, 120, 123, 127, 160, 162, 163, 255, 264, 317, 352, 353, 355, 387, 412, 420, 422, 423, 424, 425, 426, 430, 452, 635, 724, 786, 796, 860, 909, 944, 945, 947, 1007, 1017, 1021, 1022, 1023, 1029, 1051, 1148, 1295, 1315, 1319, 1326], "i64": [1, 10, 13, 16, 17, 21, 27, 51, 52, 53, 54, 58, 59, 75, 95, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133, 135, 142, 143, 147, 177, 179, 180, 181, 182, 184, 188, 189, 191, 192, 195, 196, 198, 199, 202, 203, 205, 206, 207, 208, 210, 212, 213, 215, 217, 219, 222, 223, 224, 226, 227, 228, 234, 235, 240, 241, 242, 243, 246, 247, 248, 249, 253, 255, 257, 260, 262, 263, 264, 266, 268, 270, 277, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 293, 294, 295, 296, 297, 299, 300, 301, 303, 304, 307, 310, 311, 317, 326, 328, 332, 342, 347, 348, 350, 351, 356, 358, 359, 360, 361, 362, 364, 367, 369, 385, 386, 391, 397, 398, 399, 400, 401, 402, 405, 406, 419, 439, 441, 442, 443, 444, 445, 446, 447, 457, 460, 462, 463, 465, 466, 467, 468, 470, 471, 473, 474, 476, 480, 482, 483, 484, 485, 486, 489, 490, 492, 493, 494, 495, 496, 499, 502, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 546, 548, 549, 569, 570, 571, 573, 574, 576, 578, 580, 581, 586, 590, 591, 594, 595, 596, 597, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 631, 633, 634, 635, 636, 641, 642, 643, 660, 668, 669, 683, 687, 692, 693, 695, 696, 697, 698, 699, 700, 704, 705, 706, 707, 709, 712, 719, 722, 725, 726, 727, 732, 733, 734, 735, 736, 739, 742, 743, 744, 745, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 764, 765, 767, 770, 774, 775, 776, 779, 780, 781, 782, 786, 792, 796, 812, 814, 815, 817, 818, 823, 824, 825, 828, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 844, 845, 846, 850, 851, 853, 854, 856, 857, 858, 860, 862, 864, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 879, 882, 883, 885, 886, 888, 889, 890, 892, 893, 896, 899, 900, 909, 915, 919, 920, 921, 924, 943, 948, 950, 952, 953, 954, 956, 959, 976, 986, 987, 993, 994, 995, 996, 997, 998, 1014, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1063, 1064, 1065, 1067, 1068, 1072, 1073, 1075, 1080, 1082, 1090, 1104, 1112, 1113, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1124, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1142, 1143, 1150, 1155, 1163, 1169, 1171, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1184, 1187, 1191, 1195, 1196, 1198, 1201, 1202, 1204, 1209, 1210, 1254, 1260, 1265, 1267, 1272, 1280, 1281, 1286, 1295, 1304, 1305, 1307, 1311, 1312, 1313, 1314, 1315, 1317, 1320, 1321, 1323, 1324, 1326], "i8": [365, 366, 417, 420, 423, 425, 426, 427, 430, 432, 433, 436, 449, 450, 539, 635, 768, 771, 787, 796, 957, 958, 1000, 1012, 1015, 1025, 1026, 1032, 1035, 1048, 1049, 1141, 1180, 1202, 1283, 1295, 1319], "i_bitand_j": 1314, "i_bitand_op_j": 1314, "i_bitcount": 1314, "i_bitor_j": 1314, "i_bitor_op_j": 1314, "i_bitxor_j": 1314, "i_bitxor_op_j": 1314, "iceberg": [149, 808], "icon": [39, 317], "id": [26, 39, 58, 130, 133, 149, 224, 274, 281, 294, 303, 317, 609, 668, 669, 708, 796, 841, 883, 892, 909, 915, 1182, 1282, 1295, 1323, 1324, 1326], "id_char": 1326, "id_var": [233, 284, 317, 849, 875, 909], "ideal": 129, "ident": [127, 181, 182, 317, 437, 608, 609, 796, 815, 816, 909, 985, 987, 1036, 1181, 1182, 1295], "identifi": [127, 135, 233, 240, 282, 284, 295, 317, 849, 873, 875, 909], "idiograph": 915, "idiomat": [792, 820, 826, 859, 878, 892, 909], "idx": [147, 208, 221, 294, 317, 353, 366, 540, 835, 883, 909, 958, 1142, 1226], "idx_lit": 1226, "idx_rx": 1226, "ieee": [706, 796], "if_set": [5, 30], "if_table_exist": [37, 317], "ifnul": 1316, "ignor": [38, 135, 162, 163, 167, 231, 267, 286, 317, 329, 331, 354, 405, 434, 456, 458, 459, 510, 519, 582, 583, 646, 661, 714, 716, 727, 796, 876, 909, 915, 922, 923, 946, 1000, 1033, 1058, 1060, 1061, 1112, 1121, 1159, 1160, 1213, 1228, 1295], "ignore_error": [133, 134, 143, 147, 151], "ignore_nul": [231, 267, 317, 329, 331, 354, 456, 458, 459, 519, 646, 661, 714, 716, 727, 796, 922, 923, 946, 1058, 1060, 1061, 1121, 1213, 1228, 1295], "ignore_spac": 915, "ij": 669, "ij67": 669, "ijkl": 1318, "ilmsuxu": [647, 655, 656, 659, 668, 669, 1214, 1222, 1223, 1226, 1235, 1236], "imbal": [456, 458, 459, 796, 1058, 1060, 1061, 1295], "imdb_scor": 1304, "immedi": [600, 719, 723, 737, 738, 740, 741, 752, 753, 768, 771, 778, 783, 784, 787, 796, 1173, 1295, 1305], "immut": [275, 317, 1276, 1295], "impact": [208, 317, 835, 909, 1304, 1323], "impl": 149, "implement": [44, 121, 135, 176, 209, 227, 303, 317, 320, 321, 479, 549, 573, 574, 576, 578, 580, 581, 693, 703, 758, 796, 892, 1079, 1150, 1196, 1198, 1278, 1295, 1300], "implic": [404, 796, 823, 909], "implicit": [286, 317, 876, 909], "implicitli": [199, 317, 466, 786, 796, 831, 909, 1323], "implod": [796, 1295, 1313], "import": [10, 16, 28, 34, 36, 38, 39, 40, 41, 44, 50, 65, 120, 121, 124, 125, 133, 135, 136, 142, 143, 147, 153, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 180, 187, 188, 189, 191, 206, 208, 221, 223, 240, 242, 257, 264, 272, 274, 279, 284, 285, 287, 317, 320, 321, 374, 403, 404, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 457, 556, 557, 563, 590, 611, 613, 615, 617, 619, 621, 624, 626, 628, 724, 736, 737, 738, 739, 740, 741, 742, 775, 783, 784, 792, 796, 808, 814, 818, 822, 823, 824, 825, 835, 840, 845, 862, 875, 909, 965, 988, 990, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1059, 1088, 1091, 1093, 1094, 1183, 1206, 1268, 1295, 1300, 1305, 1320, 1323, 1326], "improv": [37, 48, 139, 150, 317, 548, 796, 909], "in_plac": [212, 261, 289, 317, 1174, 1203, 1210, 1295], "includ": [20, 30, 36, 38, 39, 45, 55, 125, 135, 137, 143, 145, 147, 148, 149, 150, 151, 152, 163, 164, 183, 187, 194, 199, 224, 240, 242, 252, 263, 279, 281, 285, 286, 317, 402, 436, 466, 470, 481, 486, 556, 597, 612, 614, 616, 618, 620, 622, 623, 625, 627, 668, 669, 673, 674, 677, 678, 724, 732, 772, 773, 796, 822, 831, 841, 867, 876, 909, 915, 998, 999, 1035, 1057, 1068, 1081, 1085, 1171, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1235, 1236, 1240, 1241, 1244, 1295, 1323], "include_bom": [36, 45, 317, 909], "include_boundari": [208, 317, 835, 909], "include_break": [402, 597, 796, 998, 1171, 1295], "include_breakpoint": [481, 796, 1081, 1295], "include_categor": 915, "include_categori": [481, 796, 1081, 1295], "include_col": 163, "include_file_path": [143, 145, 147, 150, 151, 152], "include_head": [36, 39, 45, 134, 281, 317, 909], "include_index": 125, "include_init": 732, "include_kei": [240, 252, 317], "include_nul": [286, 317, 876, 909], "inclus": [177, 208, 249, 317, 486, 610, 613, 615, 617, 619, 621, 624, 626, 628, 673, 674, 719, 737, 738, 740, 741, 752, 753, 783, 784, 796, 835, 858, 909, 1085, 1240, 1241, 1295], "incom": 135, "incompat": 114, "incomplet": [605, 796, 1178, 1295], "incorpor": 1323, "incorrect": [258, 317, 451, 548, 549, 633, 796, 863, 892, 909, 1050, 1199, 1295], "incorrectli": [133, 540], "increas": [39, 50, 133, 138, 144, 145, 152, 317, 401, 609, 796, 997, 1182, 1295], "independ": [56, 57, 160, 163, 167, 279, 317, 636, 796, 817, 818, 827, 854, 865, 909], "index": [39, 102, 121, 125, 128, 133, 134, 139, 141, 143, 145, 147, 150, 151, 152, 155, 176, 202, 204, 208, 213, 218, 220, 242, 247, 249, 250, 251, 260, 262, 274, 275, 277, 284, 286, 287, 293, 294, 317, 327, 340, 341, 342, 344, 347, 348, 353, 361, 366, 457, 473, 474, 476, 505, 506, 515, 516, 517, 533, 534, 540, 610, 613, 615, 617, 619, 621, 624, 626, 628, 632, 634, 641, 647, 655, 659, 660, 672, 683, 693, 722, 752, 755, 796, 833, 835, 858, 864, 866, 875, 876, 882, 883, 909, 915, 932, 933, 934, 935, 936, 939, 940, 945, 953, 958, 1059, 1072, 1073, 1099, 1107, 1108, 1117, 1118, 1119, 1135, 1136, 1142, 1163, 1196, 1197, 1201, 1209, 1222, 1226, 1227, 1239, 1250, 1295, 1300, 1313, 1318], "index_column": [208, 249, 317, 610, 796, 835, 858, 909], "indexord": [274, 275, 317], "indic": [39, 64, 65, 67, 80, 95, 105, 131, 133, 134, 135, 138, 139, 141, 143, 144, 145, 147, 150, 151, 152, 160, 161, 167, 208, 249, 252, 258, 260, 272, 317, 343, 361, 473, 481, 487, 488, 489, 491, 492, 493, 494, 495, 496, 515, 533, 553, 554, 555, 556, 557, 558, 559, 610, 613, 615, 617, 619, 621, 624, 626, 628, 632, 634, 722, 723, 767, 796, 835, 858, 863, 864, 909, 913, 915, 953, 1072, 1081, 1088, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1117, 1135, 1196, 1197, 1201, 1271, 1295, 1326], "indistinguish": [36, 45, 317, 909], "individu": [39, 48, 172, 249, 274, 275, 279, 317, 549, 656, 696, 796, 817, 858, 909, 915, 984, 1223, 1295], "inequ": [584, 796], "inexact": [156, 157, 158, 159], "inf": [160, 163, 167, 339, 402, 481, 488, 491, 597, 706, 796, 931, 990, 998, 1088, 1091, 1148, 1166, 1171, 1283, 1295, 1320], "infer": [36, 45, 66, 79, 95, 120, 122, 123, 124, 125, 126, 133, 134, 135, 138, 142, 143, 144, 145, 147, 150, 151, 152, 227, 317, 548, 549, 606, 662, 682, 684, 685, 686, 689, 742, 756, 771, 796, 909, 1150, 1179, 1229, 1249, 1251, 1252, 1253, 1256, 1295], "infer_schema": [133, 147], "infer_schema_length": [123, 126, 130, 133, 134, 135, 138, 142, 143, 144, 147, 151, 317, 662, 909, 1229], "inference_length": [686, 1253], "inference_s": [227, 317], "infin": [690, 706, 796, 1257], "infinit": [491, 706, 796, 1091, 1295], "influenc": [138, 845, 909], "influxdb": 135, "info": [137, 148, 149, 155], "inform": [19, 23, 37, 55, 137, 143, 145, 147, 148, 149, 150, 151, 152, 156, 158, 174, 185, 187, 317, 321, 498, 549, 640, 647, 655, 656, 659, 668, 669, 796, 817, 822, 854, 909, 913, 917, 980, 1100, 1208, 1214, 1222, 1223, 1226, 1235, 1236, 1295], "inherit": [250, 317, 404, 796, 823, 909], "init": [172, 1304], "initcap": 1316, "initi": [32, 33, 39, 79, 172, 317, 732, 746, 786, 1323], "initialis": [135, 172, 909], "inject": [39, 50, 317], "inlin": [18, 252, 317, 647, 655, 656, 659, 668, 669, 1214, 1222, 1223, 1226, 1235, 1236, 1313], "inner": [59, 75, 162, 222, 224, 286, 317, 354, 365, 406, 519, 539, 549, 603, 703, 775, 796, 839, 841, 876, 909, 946, 957, 1001, 1121, 1141, 1150, 1278, 1295, 1311, 1323], "inner_dtyp": [162, 165], "innermost": [162, 165], "innter": 945, "inprocessqueri": [817, 909], "input": [0, 50, 56, 95, 123, 125, 133, 134, 179, 189, 207, 224, 227, 231, 240, 242, 246, 255, 256, 260, 263, 267, 280, 291, 292, 296, 317, 326, 386, 391, 457, 460, 472, 486, 544, 548, 549, 561, 590, 604, 605, 637, 643, 660, 670, 672, 678, 679, 680, 681, 683, 685, 697, 705, 713, 715, 717, 719, 722, 725, 726, 727, 735, 742, 744, 752, 753, 756, 757, 758, 760, 762, 765, 774, 778, 780, 786, 792, 796, 808, 812, 824, 834, 841, 856, 860, 861, 864, 867, 872, 879, 880, 885, 909, 913, 986, 1059, 1085, 1146, 1147, 1150, 1169, 1177, 1178, 1201, 1205, 1227, 1239, 1250, 1252, 1295, 1317, 1318, 1320], "input_wildcard_expans": [796, 913], "insensit": [648, 656, 658, 668, 669, 670, 915, 1214, 1215, 1223, 1225, 1226, 1235, 1236, 1237], "insensitive_match": [647, 659], "insert": [37, 133, 134, 139, 141, 143, 145, 147, 150, 151, 152, 213, 281, 283, 317, 632, 646, 661, 692, 796, 874, 909, 1197, 1213, 1228, 1259, 1295], "insert_aft": [39, 317], "insert_befor": [39, 317], "insert_chart": [39, 317], "insert_column": 317, "insid": [57, 548, 796, 818, 909], "inspect": [796, 909], "instal": [32, 33, 99, 125, 133, 134, 136, 139, 141, 185, 276, 317, 409, 724, 865, 909, 1004, 1277, 1295], "instanc": [131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 163, 167, 172, 180, 196, 201, 317, 561, 732, 746, 792, 814, 845, 882, 883, 909, 1064, 1295], "instanti": [37, 39, 135, 165, 255, 273, 274, 291, 317, 860, 879, 909, 914, 1273, 1274, 1295], "instantli": [57, 818, 909], "instead": [36, 38, 42, 43, 50, 57, 58, 122, 123, 126, 133, 134, 135, 138, 144, 145, 147, 152, 153, 160, 161, 162, 163, 167, 178, 179, 206, 219, 220, 223, 227, 233, 238, 240, 250, 251, 252, 255, 256, 257, 260, 274, 275, 276, 280, 292, 293, 317, 320, 321, 342, 361, 386, 387, 402, 416, 457, 460, 470, 533, 563, 597, 604, 634, 646, 654, 664, 665, 677, 678, 679, 680, 681, 692, 705, 712, 719, 721, 723, 729, 737, 738, 740, 741, 742, 752, 753, 768, 771, 775, 778, 783, 784, 787, 796, 811, 812, 818, 827, 840, 849, 860, 861, 862, 864, 872, 880, 881, 882, 884, 909, 915, 934, 953, 962, 977, 998, 1011, 1019, 1020, 1059, 1078, 1135, 1171, 1177, 1196, 1198, 1201, 1210, 1213, 1221, 1231, 1232, 1244, 1245, 1246, 1259, 1276, 1277, 1295, 1300, 1304, 1305, 1309, 1323, 1324], "int": [10, 12, 13, 14, 17, 25, 26, 36, 37, 39, 44, 45, 48, 52, 59, 66, 123, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 179, 181, 187, 194, 197, 198, 202, 204, 206, 209, 210, 211, 213, 218, 220, 221, 223, 226, 227, 237, 238, 247, 249, 250, 253, 259, 260, 262, 265, 268, 273, 277, 280, 285, 288, 290, 293, 294, 300, 311, 317, 326, 349, 353, 361, 363, 366, 368, 369, 385, 386, 401, 405, 409, 456, 458, 459, 463, 464, 465, 471, 473, 474, 476, 479, 480, 481, 502, 508, 510, 515, 516, 517, 518, 528, 533, 534, 536, 538, 539, 540, 542, 589, 591, 594, 595, 597, 600, 603, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 636, 641, 645, 655, 660, 662, 666, 667, 668, 672, 674, 675, 683, 686, 687, 692, 700, 704, 705, 711, 713, 719, 728, 730, 736, 739, 742, 748, 750, 752, 753, 767, 768, 771, 772, 773, 777, 778, 781, 782, 785, 787, 796, 812, 815, 822, 829, 830, 833, 836, 840, 844, 854, 864, 866, 869, 871, 872, 877, 878, 882, 883, 884, 889, 900, 909, 914, 915, 932, 933, 941, 945, 953, 955, 958, 960, 976, 977, 984, 985, 991, 997, 1000, 1001, 1004, 1057, 1058, 1060, 1061, 1065, 1066, 1067, 1072, 1073, 1079, 1080, 1081, 1099, 1103, 1104, 1110, 1112, 1117, 1118, 1119, 1120, 1130, 1135, 1136, 1138, 1140, 1141, 1142, 1144, 1156, 1157, 1159, 1160, 1163, 1165, 1166, 1169, 1170, 1171, 1173, 1179, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1201, 1204, 1209, 1212, 1222, 1227, 1229, 1233, 1234, 1235, 1239, 1241, 1242, 1250, 1253, 1254, 1259, 1266, 1267, 1273, 1280, 1285, 1295, 1307, 1310, 1323, 1326], "int16": [1, 53, 279, 317, 399, 400, 432, 699, 796, 915, 995, 996, 1031, 1266, 1273, 1295], "int32": [1, 39, 53, 58, 120, 123, 160, 162, 163, 208, 221, 249, 274, 317, 352, 353, 355, 387, 412, 422, 423, 424, 425, 430, 452, 457, 610, 703, 771, 796, 835, 858, 909, 914, 915, 941, 944, 945, 947, 1007, 1017, 1021, 1022, 1023, 1029, 1051, 1059, 1148, 1278, 1279, 1295], "int64": [1, 38, 39, 52, 53, 58, 59, 79, 97, 133, 142, 183, 192, 201, 208, 241, 249, 254, 255, 269, 276, 317, 347, 348, 350, 351, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 399, 400, 441, 442, 443, 444, 445, 446, 447, 451, 457, 460, 548, 549, 575, 577, 579, 594, 602, 610, 662, 687, 699, 703, 719, 744, 752, 753, 756, 771, 778, 792, 796, 819, 826, 835, 853, 858, 859, 860, 909, 915, 939, 940, 942, 943, 948, 949, 950, 951, 952, 953, 954, 955, 956, 959, 960, 995, 996, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1050, 1052, 1059, 1150, 1175, 1254, 1266, 1276, 1277, 1278, 1279, 1295], "int64arrai": [1270, 1295], "int8": [1, 53, 79, 201, 317, 365, 366, 399, 400, 417, 420, 426, 427, 433, 436, 449, 450, 539, 699, 768, 771, 787, 796, 914, 957, 958, 995, 996, 1000, 1012, 1015, 1025, 1026, 1032, 1035, 1048, 1049, 1141, 1180, 1266, 1276, 1283, 1295], "int_rang": [208, 285, 294, 303, 317, 719, 755, 835, 845, 883, 892, 909], "integ": [36, 39, 45, 64, 65, 67, 71, 72, 73, 74, 80, 81, 82, 83, 84, 154, 161, 163, 166, 168, 191, 208, 249, 272, 275, 317, 330, 390, 436, 469, 470, 589, 595, 597, 602, 609, 610, 622, 660, 683, 687, 713, 719, 748, 752, 753, 771, 796, 825, 835, 858, 909, 915, 983, 1035, 1071, 1169, 1171, 1175, 1182, 1189, 1196, 1227, 1250, 1254, 1276, 1295, 1317, 1323, 1326], "integer_list": 75, "integr": [39, 279, 317, 1326], "intend": [1, 156, 157, 158, 159, 692, 1259], "intens": [227, 303, 317, 590, 796, 1150, 1295], "interact": [163, 167, 187, 317, 320, 822, 909, 1295, 1300], "interchang": [121, 176], "interest": [134, 437, 440, 1036, 1039], "interfac": [0, 110, 111, 175, 808, 918, 1323], "interleav": 1318, "intermedi": [214, 317, 838, 909, 1326], "intern": [40, 41, 135, 154, 220, 269, 317, 470, 796, 1270, 1295, 1305], "interoper": [174, 917], "interpol": [187, 244, 309, 317, 465, 485, 552, 598, 620, 621, 769, 796, 822, 855, 898, 909, 999, 1084, 1172, 1188, 1295, 1312], "interpolate_bi": [796, 1295], "interpolationmethod": [484, 796, 1083, 1295], "interpret": [124, 126, 133, 134, 147, 317, 909], "intersect": [39, 317, 530, 915, 1132, 1322], "interv": [208, 249, 287, 317, 402, 435, 448, 481, 486, 597, 610, 613, 615, 617, 619, 621, 624, 626, 628, 737, 738, 740, 741, 783, 784, 796, 835, 858, 909, 998, 1012, 1014, 1015, 1021, 1023, 1025, 1026, 1029, 1031, 1032, 1034, 1038, 1047, 1048, 1081, 1085, 1171, 1295, 1312], "intoexpr": [179, 207, 208, 249, 255, 256, 260, 263, 280, 291, 292, 296, 317, 332, 350, 370, 373, 375, 386, 409, 457, 463, 473, 481, 485, 486, 509, 529, 530, 531, 532, 590, 604, 605, 613, 615, 617, 619, 621, 624, 626, 628, 632, 634, 643, 648, 658, 670, 673, 674, 675, 680, 681, 697, 705, 715, 717, 722, 725, 726, 727, 728, 730, 732, 735, 739, 746, 760, 762, 765, 771, 774, 778, 780, 796, 812, 834, 835, 858, 860, 861, 864, 867, 872, 879, 880, 885, 909, 913, 942, 961, 964, 966, 1004, 1059, 1065, 1084, 1085, 1111, 1177, 1178, 1197, 1201, 1240, 1241, 1242, 1247, 1248, 1295], "intoexprcolumn": [199, 213, 317, 349, 353, 354, 361, 385, 386, 391, 435, 463, 466, 508, 516, 519, 528, 533, 591, 595, 631, 634, 655, 660, 663, 672, 677, 678, 679, 683, 687, 692, 704, 705, 719, 724, 737, 738, 740, 741, 752, 753, 783, 784, 786, 796, 831, 864, 909, 941, 945, 946, 953, 986, 1034, 1047, 1065, 1110, 1118, 1121, 1130, 1135, 1166, 1222, 1227, 1230, 1239, 1244, 1245, 1246, 1250, 1259, 1295], "introduc": [49, 88, 682, 684, 685, 1249, 1251, 1252], "introduct": 1322, "intuit": [470, 796, 915], "invalid": [36, 45, 111, 133, 134, 147, 317, 387, 662, 663, 687, 706, 796, 909, 962, 977, 1229, 1230, 1254, 1295], "invalid_valu": 962, "invalidoperationerror": [605, 796, 1178, 1295, 1321], "invari": [845, 909], "invers": [334, 335, 336, 337, 338, 339, 796, 926, 927, 928, 929, 930, 931, 1276, 1295, 1320], "invert": 915, "invok": [548, 796], "involv": [199, 317, 831, 909], "io": [34, 36, 39, 40, 41, 44, 131, 133, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 188, 257, 317, 404, 472, 563, 796, 823, 862, 909], "iobas": [42, 43, 142, 143, 188, 257, 317, 404, 563, 567, 796, 823, 862, 909], "ipc": [40, 41, 46, 139, 140, 141, 150, 153, 317, 808, 909], "ipccompress": [40, 41, 317], "is_between": [796, 1295], "is_dupl": [317, 796, 1295], "is_elementwis": [548, 796, 913], "is_empti": [317, 1295], "is_finit": [796, 1295], "is_first_distinct": [796, 1295], "is_in": [97, 199, 317, 796, 1295], "is_infinit": [796, 1295], "is_last_distinct": [796, 1295], "is_nan": [796, 1295], "is_not_nan": [796, 1295], "is_not_nul": [796, 1295], "is_nul": [191, 317, 796, 825, 909, 1295], "is_numer": 1326, "is_odd": [255, 317, 860, 909, 915], "is_selector": 915, "is_sort": 1295, "is_uniqu": [317, 796, 1295], "isn": 786, "iso": [422, 449, 450, 1017, 1048, 1049, 1318], "iso8601": [133, 134, 147], "iso_lang": 1318, "iso_year": 452, "isodow": 1319, "isoweek": 1319, "isoyear": 1319, "issu": [90, 91, 94, 95, 98, 105, 107, 118, 133, 134, 135, 147, 317, 399, 400, 699, 796, 995, 996, 1266, 1295, 1323], "ital": [39, 317], "item": [13, 58, 134, 206, 250, 253, 317, 349, 353, 354, 405, 462, 508, 510, 517, 519, 528, 631, 675, 796, 941, 945, 946, 1000, 1063, 1110, 1112, 1119, 1121, 1130, 1195, 1242, 1295], "iter": [56, 57, 58, 68, 120, 123, 135, 166, 168, 179, 189, 199, 207, 208, 219, 220, 221, 224, 249, 250, 251, 252, 255, 256, 263, 280, 281, 291, 292, 295, 296, 317, 386, 401, 409, 466, 590, 643, 697, 705, 715, 717, 722, 724, 725, 726, 727, 735, 760, 762, 765, 774, 778, 780, 786, 792, 796, 812, 824, 831, 834, 835, 841, 858, 860, 861, 867, 872, 879, 880, 885, 909, 913, 914, 997, 1004, 1196, 1295, 1326], "iter_batch": 135, "iter_column": 317, "iter_row": [221, 250, 251, 252, 317], "iter_slic": 317, "its": [89, 127, 155, 194, 275, 317, 413, 435, 448, 457, 548, 608, 643, 696, 786, 796, 820, 826, 878, 909, 980, 1008, 1034, 1047, 1057, 1059, 1181, 1276, 1295, 1325], "itself": [161, 317, 320, 321, 549, 612, 614, 616, 618, 620, 622, 623, 625, 627, 772, 773, 796, 843, 909, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1295, 1300, 1304, 1305, 1323], "ix": [242, 317], "j": [281, 317, 1314], "jax": [274, 317, 1274, 1295], "jax_enable_x64": [274, 317], "jaxexporttyp": [274, 317], "jjk": 915, "jkl": [656, 1223], "jklmn": 1318, "job": [813, 909], "join": [45, 46, 47, 48, 49, 50, 56, 57, 58, 88, 199, 223, 224, 286, 317, 466, 484, 590, 646, 775, 796, 817, 818, 827, 831, 840, 841, 854, 865, 876, 881, 909, 1213, 1305, 1307, 1313, 1322, 1323], "join_asof": [222, 317, 839, 909], "join_nul": [222, 317, 839, 909], "join_wher": [317, 909], "joinstrategi": [50, 222, 317, 839, 909], "joinvalid": [222, 317, 839, 909], "jpy": 1326, "json": [2, 3, 5, 6, 42, 43, 130, 142, 143, 149, 151, 188, 257, 317, 404, 472, 563, 567, 662, 663, 694, 796, 808, 823, 862, 909, 913, 1229, 1230, 1262], "json_path": [663, 1230], "json_path_match": [662, 1229], "json_stat": 5, "json_str": [142, 143], "json_val": [663, 1230], "jsonpath": [662, 663, 1229, 1230], "jst": [127, 915], "jul": [682, 1249, 1318], "juli": [1318, 1319], "just": [39, 125, 135, 147, 233, 284, 317, 849, 875, 909, 915], "k": [179, 252, 280, 281, 317, 385, 386, 396, 498, 704, 705, 796, 812, 872, 909, 976, 992, 1100, 1280, 1295], "k_2": [640, 796, 1208, 1295], "k_3": [640, 796, 1208, 1295], "kanji": 915, "karen": [242, 317], "kathmandu": [1010, 1011, 1037], "kb": [194, 317, 374, 965, 1057, 1295], "kde": [1295, 1300], "keep": [50, 133, 134, 143, 147, 150, 151, 199, 282, 286, 287, 317, 472, 548, 566, 574, 604, 725, 796, 831, 873, 876, 909, 1177, 1295], "kei": [39, 44, 48, 50, 55, 58, 143, 145, 147, 149, 150, 151, 152, 177, 208, 220, 222, 223, 234, 240, 242, 246, 248, 251, 252, 286, 317, 466, 549, 604, 605, 670, 737, 740, 778, 796, 835, 839, 840, 850, 856, 857, 876, 909, 915, 919, 1177, 1178, 1237, 1295, 1311], "kept": [282, 317, 873, 909], "keyerror": 16, "keystrok": 792, "keyword": [38, 137, 145, 148, 163, 167, 185, 207, 241, 250, 255, 256, 276, 291, 292, 296, 317, 466, 594, 697, 774, 778, 786, 796, 834, 853, 860, 861, 879, 880, 885, 909, 1277, 1295, 1308], "kl": 669, "kleen": [329, 331, 714, 715, 716, 717, 796, 922, 923, 1295], "klmnoopqrstuvwxyz": [221, 317], "knight": 1304, "know": [50, 135, 242, 284, 317, 540, 548, 796, 875, 909], "known": [139, 366, 540, 892, 958, 1142], "kurtosi": [796, 1295], "kuzu_db_conn": 135, "kwarg": [31, 32, 35, 49, 60, 61, 63, 64, 69, 70, 71, 72, 73, 74, 76, 77, 78, 80, 81, 82, 83, 84, 85, 132, 135, 136, 163, 165, 167, 185, 199, 241, 276, 317, 320, 594, 796, 831, 853, 884, 909, 913, 1277, 1295, 1300, 1308, 1323], "k\u00f9zudb": 135, "l1": 58, "l2": 58, "label": [208, 274, 279, 317, 321, 402, 597, 611, 612, 614, 616, 618, 620, 623, 625, 627, 796, 835, 854, 909, 998, 1171, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1295], "label_column": [279, 317], "lag": [260, 317, 361, 533, 634, 726, 796, 864, 909, 953, 1135, 1201, 1295], "lake": [38, 137, 148, 317, 808], "lambda": [147, 201, 227, 241, 242, 246, 303, 317, 366, 458, 459, 540, 548, 549, 574, 575, 732, 733, 746, 757, 758, 770, 796, 845, 853, 856, 892, 909, 958, 1060, 1061, 1142, 1150, 1295], "land": [409, 1004], "languag": [147, 208, 223, 249, 287, 317, 431, 435, 448, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 737, 738, 740, 741, 783, 784, 796, 835, 840, 858, 909, 1030, 1034, 1047, 1059, 1295], "larg": [10, 11, 14, 50, 135, 138, 144, 152], "large_str": [221, 269, 276, 317], "larger": [10, 45, 46, 47, 48, 56, 57, 470, 728, 796, 817, 818, 909], "largest": [179, 280, 317, 386, 704, 705, 796, 812, 872, 909, 1280, 1295], "last": [38, 143, 147, 150, 151, 156, 157, 158, 159, 210, 223, 226, 242, 252, 263, 268, 275, 282, 311, 317, 342, 353, 362, 401, 417, 428, 432, 449, 471, 492, 517, 535, 538, 540, 573, 574, 576, 578, 580, 581, 605, 642, 643, 660, 675, 683, 700, 722, 781, 792, 796, 840, 867, 871, 873, 900, 909, 915, 934, 945, 954, 997, 1012, 1027, 1031, 1048, 1080, 1092, 1104, 1119, 1137, 1140, 1178, 1210, 1227, 1242, 1250, 1267, 1276, 1295, 1316, 1318], "last_column": [39, 317], "later": [223, 257, 317, 563, 840, 862, 909], "latest": [32, 121, 137, 148, 176, 434, 561, 682, 685, 739, 1033, 1249, 1252], "latt": 915, "latter": [39, 196, 317, 1064, 1295], "lazi": [1, 58, 147, 163, 223, 241, 242, 264, 317, 549, 748, 768, 771, 787, 796, 822, 839, 840, 881, 885, 886, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 909, 915, 1304, 1305, 1306, 1307, 1308, 1310, 1323, 1326], "lazili": [133, 134, 147, 148, 149, 150, 151, 152, 818, 909], "lazy_fram": [56, 57], "lazyfram": [0, 1, 50, 51, 52, 53, 54, 56, 57, 58, 147, 148, 149, 150, 151, 152, 153, 156, 157, 163, 183, 188, 225, 241, 242, 257, 264, 317, 404, 466, 540, 563, 775, 796, 808, 906, 907, 908, 915, 1304, 1305, 1308, 1310, 1323, 1324, 1326], "lazygroupbi": [834, 835, 858, 909], "lbl": [274, 279, 317], "ldf": [1, 885, 886, 888, 890, 893, 894, 895, 896, 897, 898, 899], "ldot": [457, 796, 1059, 1295], "le": [652, 796, 1295], "lead": [14, 44, 127, 153, 231, 258, 260, 267, 317, 361, 473, 476, 533, 548, 549, 633, 634, 677, 679, 728, 796, 845, 863, 864, 892, 909, 953, 1135, 1150, 1199, 1201, 1244, 1246, 1295], "leap": [421, 431, 1016, 1030], "leap_year": 421, "learn": [279, 317], "least": [101, 242, 317, 382, 383, 591, 655, 657, 796, 973, 974, 1166, 1222, 1224, 1295, 1316], "leav": [6, 233, 284, 317, 540, 849, 875, 909], "left": [15, 16, 39, 50, 156, 157, 158, 159, 208, 222, 223, 249, 286, 317, 402, 456, 457, 458, 459, 484, 486, 597, 610, 613, 615, 617, 619, 621, 624, 626, 628, 632, 703, 725, 732, 733, 737, 738, 740, 741, 746, 770, 783, 784, 786, 796, 835, 839, 840, 858, 876, 909, 998, 1058, 1059, 1060, 1061, 1085, 1171, 1197, 1278, 1295, 1307, 1311, 1316], "left_clos": [402, 597, 796, 998, 1171, 1295], "left_on": [222, 223, 286, 317, 839, 840, 876, 909], "leftmost": [632, 796, 1197, 1295, 1318], "len": [12, 39, 163, 167, 183, 221, 242, 294, 298, 303, 317, 395, 549, 560, 562, 608, 729, 752, 796, 819, 878, 883, 887, 892, 909, 914, 991, 1181, 1295], "len_byt": [12, 665, 1232], "len_char": [664, 1231], "length": [58, 59, 75, 138, 144, 147, 161, 165, 206, 208, 249, 262, 317, 320, 401, 435, 448, 534, 540, 561, 604, 605, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 641, 660, 664, 665, 666, 667, 670, 672, 683, 692, 768, 771, 772, 773, 787, 796, 835, 854, 858, 866, 909, 913, 984, 997, 1008, 1034, 1047, 1136, 1142, 1163, 1177, 1178, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1209, 1227, 1231, 1232, 1233, 1234, 1237, 1239, 1250, 1259, 1295, 1312, 1313, 1316], "leq": [456, 458, 459, 796, 1058, 1060, 1061, 1295], "less": [147, 223, 317, 470, 500, 547, 548, 675, 796, 840, 909, 1242, 1326], "letter": [195, 300, 311, 317, 460, 648, 656, 658, 670, 690, 744, 796, 828, 889, 900, 909, 915, 1215, 1223, 1225, 1237, 1257, 1318], "level": [10, 39, 40, 41, 44, 48, 130, 147, 150, 151, 152, 201, 227, 238, 264, 269, 317, 321, 466, 796, 808, 868, 909, 1270, 1295, 1323], "lexic": [62, 915, 981], "lf": [45, 46, 47, 48, 53, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 881, 882, 883, 887, 891, 909, 1312, 1323, 1326], "lf1": [775, 868, 909, 1308, 1310, 1324], "lf2": [775, 868, 909, 1308, 1310, 1324], "lf3": [909, 1308], "lf4": [909, 1308], "lf5": 909, "lf6": 909, "lf_other": [881, 909], "lib": [796, 1270, 1295], "librari": [1, 103, 135, 138, 548, 796, 913, 1326], "life": [456, 458, 459, 796, 1058, 1060, 1061, 1295], "lifetim": [172, 807, 1310], "light": [39, 317], "like": [34, 36, 38, 40, 41, 42, 43, 44, 57, 121, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 188, 208, 215, 217, 222, 252, 257, 274, 275, 317, 320, 404, 410, 472, 512, 548, 566, 600, 655, 678, 679, 710, 792, 796, 813, 818, 823, 835, 909, 913, 1005, 1114, 1173, 1222, 1284, 1295, 1300], "limit": [10, 11, 48, 135, 136, 169, 198, 317, 369, 465, 471, 796, 830, 909, 1067, 1295, 1313, 1322], "line": [10, 20, 39, 133, 134, 138, 147, 206, 215, 217, 317, 320, 655, 1222, 1295, 1300], "line_termin": [36, 45, 317, 909], "linear": [187, 214, 244, 309, 317, 484, 485, 507, 552, 598, 620, 621, 726, 727, 769, 796, 822, 838, 855, 898, 909, 999, 1083, 1084, 1109, 1172, 1188, 1295], "lineitem": [129, 134, 136], "list": [1, 13, 38, 39, 50, 51, 53, 56, 57, 59, 65, 79, 95, 120, 122, 123, 124, 126, 127, 129, 131, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 161, 162, 163, 167, 184, 189, 192, 194, 195, 199, 205, 207, 208, 212, 220, 237, 240, 249, 250, 251, 252, 255, 263, 270, 271, 279, 281, 282, 283, 285, 291, 296, 297, 317, 327, 354, 365, 366, 367, 402, 409, 462, 468, 473, 482, 490, 548, 549, 561, 562, 590, 597, 603, 606, 611, 612, 614, 616, 618, 620, 623, 625, 627, 642, 643, 654, 656, 658, 673, 693, 695, 696, 703, 722, 724, 726, 737, 738, 740, 741, 743, 751, 753, 756, 758, 776, 778, 784, 792, 796, 820, 826, 828, 831, 834, 835, 860, 867, 873, 874, 879, 881, 885, 886, 909, 914, 915, 946, 957, 958, 959, 984, 998, 1004, 1057, 1063, 1068, 1072, 1075, 1081, 1082, 1090, 1150, 1171, 1179, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1215, 1221, 1223, 1225, 1237, 1240, 1275, 1278, 1295, 1304, 1309, 1313, 1315, 1325, 1326], "list_of_seri": 758, "listtostructwidthstrategi": [540, 1142], "lit": [1, 328, 370, 486, 557, 573, 659, 726, 732, 746, 768, 771, 787, 796, 1067, 1295], "liter": [15, 16, 20, 38, 135, 143, 145, 147, 150, 151, 152, 166, 167, 168, 237, 255, 256, 260, 286, 291, 292, 317, 328, 370, 391, 413, 454, 455, 463, 470, 475, 477, 486, 500, 547, 557, 569, 571, 584, 585, 595, 604, 605, 647, 648, 649, 658, 659, 668, 669, 670, 697, 698, 706, 715, 717, 719, 725, 726, 727, 735, 736, 739, 752, 756, 760, 762, 765, 774, 778, 780, 782, 796, 830, 860, 861, 864, 876, 879, 880, 909, 915, 961, 986, 1008, 1055, 1065, 1085, 1162, 1177, 1178, 1196, 1198, 1201, 1214, 1215, 1216, 1225, 1226, 1235, 1236, 1237, 1295, 1318], "littl": [251, 317], "lmn": 915, "ln": [456, 457, 458, 459, 796, 1058, 1059, 1060, 1061, 1295, 1316], "ln_a": 1317, "load": [3, 5, 6, 123, 125, 135, 137, 138, 144, 148, 149, 166, 168, 317, 796, 808, 909, 913, 1326], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 138, "load_workbook": 138, "loader": [279, 317], "lobster": [659, 1226], "loc": [317, 321], "local": [4, 38, 135, 137, 148, 149, 152, 317, 448, 592, 593, 796, 979, 980, 1010, 1011, 1034, 1037, 1047, 1167, 1168, 1295, 1305], "localhost": 135, "localis": [435, 448, 1047], "locat": [39, 145, 147, 150, 152, 196, 247, 277, 283, 317, 632, 796, 874, 909, 1064, 1072, 1196, 1197, 1295], "lock": 169, "log": [29, 52, 386, 453, 545, 571, 595, 705, 796, 1053, 1295, 1316], "log10": [796, 1295, 1316], "log10_a": 1317, "log16_a": 1317, "log1p": [796, 1295, 1316], "log1p_a": 1317, "log2": 1316, "logarithm": [543, 544, 545, 796, 1145, 1146, 1147, 1295, 1317], "logic": [58, 227, 303, 317, 320, 321, 329, 331, 404, 549, 703, 714, 715, 716, 717, 758, 796, 823, 827, 839, 862, 892, 909, 922, 923, 1150, 1276, 1278, 1295, 1300], "london": [414, 418, 434, 1009, 1013, 1033], "london_timezon": [434, 1033], "london_to_amsterdam": [434, 1033], "long": [195, 233, 242, 284, 285, 317, 828, 849, 875, 909], "longer": [133, 134, 147], "longest": 540, "look": [10, 208, 317, 370, 540, 835, 909, 961], "lookup": 792, "loop": [549, 796], "lose": [411, 1006], "lossi": [133, 134, 147], "love": [648, 670, 1215, 1237], "low": [17, 135, 597, 796, 1171, 1295], "low_memori": [133, 134, 143, 145, 147, 151, 152], "lower": [147, 187, 208, 244, 309, 317, 391, 486, 546, 574, 598, 602, 620, 621, 719, 737, 738, 740, 741, 769, 783, 784, 796, 822, 835, 855, 898, 909, 986, 999, 1085, 1148, 1172, 1175, 1188, 1283, 1295, 1313, 1316], "lower_bound": [208, 317, 391, 486, 796, 835, 909, 986, 1085, 1283, 1295], "lowercas": [580, 688, 690, 1255, 1257, 1318], "lowest": [546, 796], "lru_cach": [227, 317, 549, 796, 1150, 1295], "lst": 162, "lt": [155, 466, 712, 796, 1295], "ltrim": 1316, "lyric": [648, 670, 1215, 1237], "lz4": [40, 41, 44, 46, 48, 317, 909], "lzo": [44, 48, 317, 909], "m": [65, 67, 222, 317, 410, 411, 413, 418, 419, 437, 439, 440, 451, 655, 682, 684, 685, 689, 739, 740, 741, 742, 748, 839, 909, 915, 1005, 1006, 1008, 1013, 1014, 1036, 1038, 1039, 1050, 1222, 1249, 1251, 1252, 1256, 1308, 1318, 1319], "m_2": [640, 796, 1208, 1295], "m_3": [640, 796, 1208, 1295], "m_i": [640, 796, 1208, 1295], "machin": 1326, "maco": 155, "made": [39, 135, 317], "mai": [1, 31, 32, 33, 38, 44, 45, 46, 47, 48, 56, 57, 58, 66, 68, 120, 122, 123, 124, 126, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 160, 161, 163, 164, 165, 166, 167, 168, 187, 188, 194, 196, 208, 223, 224, 227, 249, 257, 264, 274, 276, 279, 285, 286, 287, 317, 320, 321, 401, 402, 404, 409, 410, 411, 422, 431, 435, 437, 440, 448, 460, 481, 515, 540, 548, 549, 560, 563, 597, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 658, 662, 664, 669, 724, 732, 733, 737, 738, 740, 741, 746, 770, 772, 773, 783, 784, 796, 817, 818, 822, 823, 827, 835, 840, 841, 845, 858, 862, 868, 876, 882, 883, 892, 909, 980, 981, 997, 998, 999, 1004, 1005, 1006, 1017, 1030, 1034, 1036, 1039, 1047, 1057, 1064, 1081, 1117, 1150, 1171, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1225, 1229, 1231, 1274, 1277, 1279, 1295, 1300, 1326], "main": [155, 818, 909], "maintain": [45, 46, 47, 48, 263, 317, 367, 541, 632, 643, 707, 722, 796, 822, 867, 909, 959, 1143, 1197, 1281, 1295], "maintain_ord": [45, 46, 47, 48, 207, 240, 242, 263, 282, 287, 297, 299, 301, 304, 305, 306, 307, 308, 309, 310, 317, 327, 367, 386, 473, 476, 541, 549, 643, 705, 707, 722, 796, 818, 827, 834, 854, 865, 867, 873, 886, 888, 890, 893, 894, 895, 896, 897, 898, 899, 909, 959, 1143, 1281, 1295], "major": [138, 274, 317], "make": [39, 58, 79, 120, 125, 133, 134, 137, 138, 139, 141, 145, 234, 238, 245, 275, 287, 317, 458, 459, 481, 580, 581, 590, 603, 674, 796, 850, 909, 913, 1060, 1061, 1081, 1241, 1276, 1295], "man": [671, 1238], "manag": [49, 87, 88, 807, 808, 1310, 1323], "mandatori": [39, 317], "mango": [652, 676, 1219, 1243], "mani": [135, 136, 152, 196, 317, 658, 670, 1064, 1225, 1237, 1295, 1299], "manner": 135, "many_to_mani": [222, 317, 839, 909], "many_to_on": [222, 317, 839, 909], "map": [79, 122, 123, 133, 134, 135, 136, 139, 140, 145, 146, 147, 150, 163, 180, 183, 200, 220, 227, 246, 250, 251, 252, 254, 270, 317, 328, 435, 448, 548, 549, 573, 575, 576, 578, 580, 581, 604, 605, 670, 710, 757, 796, 814, 856, 859, 909, 914, 915, 999, 1034, 1047, 1150, 1177, 1178, 1237, 1284, 1295, 1305, 1307, 1308, 1323], "map_": 107, "map_batch": [796, 909], "map_el": [98, 227, 317, 548, 713, 796, 1295], "map_field": [577, 579], "map_row": 317, "mapelementsstrategi": [549, 796], "mapping_strategi": [590, 796], "march": [437, 440, 1036, 1039], "mariadb": 136, "mark": [39, 130, 317, 387, 796, 977, 1295], "mark_area": [1295, 1300], "mark_attr": [317, 320, 1295, 1300], "mark_bar": [317, 320, 1295, 1300], "mark_lin": [317, 320], "mark_point": [317, 320], "markdown": 20, "marker": [39, 317], "mask": [152, 215, 217, 317, 371, 487, 489, 492, 497, 592, 593, 647, 650, 659, 796, 962, 1068, 1085, 1086, 1089, 1092, 1098, 1167, 1168, 1198, 1214, 1217, 1226, 1286, 1295], "mass": [456, 458, 459, 796, 1058, 1060, 1061, 1295], "massag": [233, 284, 317, 849, 875, 909], "match": [38, 39, 58, 65, 109, 120, 122, 123, 124, 126, 133, 135, 142, 143, 145, 151, 152, 156, 157, 158, 159, 180, 198, 222, 223, 250, 286, 317, 556, 557, 558, 604, 605, 622, 647, 648, 649, 652, 655, 656, 658, 659, 662, 663, 668, 669, 670, 676, 682, 684, 685, 786, 792, 796, 814, 830, 839, 840, 876, 909, 915, 1056, 1177, 1178, 1189, 1214, 1215, 1216, 1219, 1222, 1223, 1225, 1226, 1229, 1230, 1235, 1236, 1237, 1243, 1249, 1251, 1252, 1295, 1318], "matches_overlap": 658, "matches_supertyp": [198, 317, 830, 909], "materi": [227, 252, 303, 317, 817, 854, 892, 902, 909, 915, 1150, 1295], "materialis": [220, 221, 250, 251, 317], "math": [1, 10, 54, 242, 317, 403, 796, 988, 990, 1206, 1268, 1295, 1316, 1320, 1322], "mathemat": [706, 743, 796, 1316], "mathshortcut": [1, 54], "matplotlib": [155, 564, 854, 865, 909], "matter": [208, 220, 249, 251, 252, 271, 317, 610, 678, 679, 796, 835, 858, 909], "max": [25, 39, 44, 48, 130, 187, 198, 207, 229, 242, 249, 317, 321, 397, 465, 540, 548, 590, 600, 604, 605, 610, 612, 613, 633, 675, 737, 740, 760, 776, 796, 822, 830, 834, 858, 909, 993, 999, 1067, 1142, 1173, 1184, 1199, 1242, 1295, 1304, 1313, 1316], "max_a": [249, 317, 610, 796, 858, 909], "max_binary_s": 135, "max_col": [161, 163], "max_colname_length": [206, 317], "max_color": [39, 317], "max_data_s": 167, "max_elem": 1313, "max_horizont": [317, 759], "max_items_per_column": [206, 317], "max_level": 130, "max_siz": [162, 163, 165, 167, 1326], "max_text_s": 135, "max_valu": 1326, "max_width": [540, 1142], "maxim": [304, 340, 796, 893, 932, 1295], "maximum": [10, 26, 36, 44, 45, 48, 66, 123, 126, 133, 134, 135, 138, 142, 143, 144, 147, 151, 153, 161, 162, 163, 165, 167, 206, 208, 228, 229, 317, 347, 505, 550, 582, 592, 600, 660, 662, 665, 672, 683, 759, 760, 796, 835, 846, 909, 939, 1018, 1107, 1151, 1159, 1167, 1173, 1227, 1229, 1232, 1239, 1250, 1295, 1312], "mb": [194, 317, 374, 1057, 1295], "me": [648, 670, 690, 1215, 1237, 1257], "mean": [44, 48, 133, 134, 139, 145, 147, 150, 187, 198, 207, 208, 223, 231, 242, 249, 287, 296, 317, 431, 435, 448, 462, 465, 470, 610, 613, 614, 615, 617, 619, 621, 624, 626, 628, 640, 646, 655, 661, 737, 738, 740, 741, 742, 762, 783, 784, 786, 796, 822, 830, 834, 835, 840, 845, 858, 885, 909, 999, 1030, 1034, 1047, 1063, 1067, 1185, 1208, 1213, 1222, 1228, 1295, 1312, 1313], "mean_horizont": [317, 761], "measur": [233, 284, 317, 321, 849, 875, 909], "measure_a": [317, 321], "measure_b": [317, 321], "median": [187, 242, 317, 465, 616, 617, 796, 822, 881, 909, 999, 1186, 1295, 1316], "mediat": 1323, "medium": [39, 317], "megan": [234, 317, 850, 909], "melt": [284, 317, 875, 909], "member": [208, 317, 835, 909, 1090, 1295], "membership": [349, 508, 941, 1110], "memori": [14, 44, 48, 56, 57, 58, 120, 121, 124, 125, 126, 133, 134, 135, 137, 138, 139, 143, 145, 147, 150, 151, 152, 176, 196, 227, 251, 252, 261, 275, 303, 317, 590, 601, 635, 796, 817, 818, 884, 909, 1064, 1150, 1174, 1202, 1203, 1276, 1295], "memory_map": [139, 145, 150], "memory_resourc": 884, "merg": [38, 222, 223, 234, 317, 839, 840, 850, 909], "merge_sort": [317, 909], "messi": [655, 657, 1222, 1224], "met": 786, "meta": [89, 404, 653, 796, 1220], "metadata": [0, 149, 808], "method": [4, 31, 32, 33, 34, 37, 38, 39, 40, 41, 49, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 119, 121, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 153, 160, 163, 167, 172, 174, 183, 187, 188, 191, 196, 203, 207, 214, 220, 227, 238, 244, 250, 251, 252, 260, 282, 291, 298, 303, 309, 317, 326, 329, 330, 361, 391, 404, 437, 440, 454, 455, 463, 470, 472, 475, 477, 484, 500, 533, 547, 549, 567, 569, 571, 573, 574, 576, 578, 580, 581, 584, 585, 586, 589, 595, 598, 600, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 634, 648, 658, 670, 678, 679, 680, 681, 686, 692, 698, 706, 708, 713, 728, 758, 769, 788, 789, 791, 792, 796, 797, 798, 801, 802, 803, 804, 805, 808, 818, 822, 823, 825, 838, 855, 864, 873, 879, 884, 887, 892, 898, 909, 914, 917, 924, 953, 986, 999, 1036, 1039, 1054, 1055, 1064, 1065, 1074, 1076, 1083, 1102, 1135, 1149, 1150, 1161, 1162, 1172, 1173, 1188, 1201, 1215, 1225, 1237, 1253, 1259, 1278, 1287, 1289, 1291, 1295, 1296, 1299, 1301, 1302, 1303, 1305, 1309], "metric": 135, "micro": [436, 1035], "microsecond": [65, 67, 208, 220, 223, 249, 251, 252, 271, 287, 317, 431, 435, 443, 448, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 739, 740, 741, 742, 782, 783, 784, 796, 835, 840, 854, 858, 909, 915, 1030, 1034, 1042, 1047, 1059, 1295, 1319], "microsoft": [39, 317], "mid_color": [39, 317], "midnight": 80, "midpoint": [187, 244, 309, 317, 598, 620, 621, 769, 796, 822, 855, 898, 909, 999, 1172, 1188, 1295], "might": [133, 134, 147, 169, 242, 275, 284, 317, 549, 708, 796, 867, 875, 909], "millennia": 1319, "millennium": 1319, "milli": [436, 1035], "millisecond": [208, 223, 249, 287, 317, 420, 426, 431, 435, 444, 448, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 740, 741, 742, 783, 784, 796, 835, 840, 858, 909, 915, 1030, 1034, 1043, 1047, 1059, 1295, 1319], "milliseconds_diff": [443, 444, 446], "mimic": 726, "min": [39, 44, 48, 187, 198, 236, 242, 249, 317, 398, 465, 549, 590, 600, 610, 618, 619, 737, 740, 765, 774, 796, 822, 830, 858, 909, 913, 994, 999, 1067, 1173, 1187, 1295, 1313, 1316, 1319, 1326], "min_a": [249, 317, 610, 796, 858, 909], "min_col": [161, 163], "min_color": [39, 317], "min_elem": 1313, "min_horizont": [317, 764, 774], "min_period": [401, 456, 458, 459, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 772, 773, 796, 997, 1058, 1060, 1061, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1295], "min_siz": [162, 163, 165, 167, 1326], "min_valu": 1326, "mincol": 161, "minim": [307, 341, 348, 506, 635, 643, 796, 896, 933, 940, 1108, 1154, 1202, 1295], "minimum": [44, 48, 161, 162, 163, 165, 167, 201, 235, 236, 317, 456, 458, 459, 568, 583, 593, 600, 764, 765, 796, 851, 909, 1024, 1058, 1060, 1061, 1160, 1168, 1173, 1295, 1312, 1326], "minu": [431, 586, 796, 1030], "minut": [208, 223, 249, 287, 317, 420, 423, 425, 430, 431, 435, 436, 445, 448, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 739, 740, 741, 742, 782, 783, 784, 796, 835, 840, 858, 909, 915, 1030, 1034, 1044, 1047, 1059, 1295, 1319], "minutes_diff": 445, "misc": 1310, "miscellan": 808, "mismatch": [58, 112, 143, 151, 156, 158], "miss": [58, 133, 134, 147, 197, 203, 317, 369, 456, 458, 459, 464, 471, 493, 494, 540, 796, 829, 909, 1058, 1060, 1061, 1066, 1295], "missing_utf8_is_empty_str": [133, 134, 147], "mix": [11, 223, 275, 317, 775, 840, 868, 909, 915, 999, 1295], "mixin": 1, "mlnm": 424, "mm": [39, 317], "mn": 1318, "mno": [16, 20], "mnop": 1318, "mo": 742, "mocha": 915, "mod": [796, 1316], "mode": [37, 38, 45, 46, 47, 48, 56, 57, 156, 158, 242, 264, 317, 656, 768, 771, 787, 796, 817, 818, 827, 909, 1223, 1295, 1304, 1305, 1323], "model": [279, 317], "modifi": [133, 134, 147, 169, 172, 196, 212, 219, 220, 289, 317, 343, 434, 451, 647, 655, 656, 659, 668, 669, 688, 690, 691, 796, 924, 1033, 1050, 1064, 1214, 1222, 1223, 1226, 1235, 1236, 1255, 1257, 1258, 1295], "modul": [91, 99, 138, 795, 915, 1326], "modulu": [569, 796], "moment": [44, 185, 317, 498, 640, 796, 1100, 1208, 1295], "mon": [317, 320, 1319], "mondai": [208, 317, 409, 448, 450, 724, 835, 909, 1004, 1047, 1049], "monkei": [666, 667, 1233, 1234], "month": [208, 223, 249, 287, 317, 417, 428, 429, 431, 435, 437, 440, 448, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 736, 737, 738, 739, 740, 741, 742, 783, 784, 796, 835, 840, 858, 909, 1012, 1027, 1028, 1030, 1034, 1036, 1039, 1047, 1059, 1295, 1319], "month_nam": [437, 440], "monthbegin": [429, 1028], "monthend": [428, 1027], "moos": 915, "more": [20, 39, 44, 48, 50, 58, 87, 88, 117, 120, 121, 122, 123, 124, 125, 126, 135, 136, 137, 138, 142, 143, 144, 145, 148, 149, 151, 156, 158, 163, 172, 174, 185, 187, 199, 219, 220, 227, 233, 238, 250, 251, 253, 264, 274, 275, 279, 282, 284, 303, 317, 321, 330, 367, 466, 470, 478, 498, 528, 541, 545, 548, 549, 589, 590, 631, 640, 656, 664, 682, 684, 685, 707, 718, 729, 745, 751, 754, 761, 763, 766, 767, 776, 786, 792, 796, 822, 831, 849, 868, 873, 875, 884, 909, 913, 915, 917, 959, 980, 999, 1077, 1078, 1100, 1130, 1143, 1150, 1195, 1208, 1223, 1231, 1249, 1251, 1252, 1274, 1276, 1281, 1295, 1310, 1311, 1321, 1324, 1325, 1326], "more_bi": [240, 263, 317, 643, 796, 867, 909], "more_column": [195, 283, 317, 460, 744, 796, 828, 874, 909, 915], "more_expr": [590, 722, 725, 726, 727, 796], "more_nam": [693, 792], "most": [39, 120, 133, 134, 136, 147, 156, 157, 158, 159, 275, 317, 379, 380, 561, 570, 591, 605, 675, 796, 970, 971, 1155, 1166, 1178, 1242, 1276, 1295, 1307, 1323], "mostli": [269, 317, 466, 796], "move": [18, 242, 252, 317, 409, 456, 457, 458, 459, 612, 614, 618, 625, 796, 1004, 1058, 1059, 1060, 1061, 1184, 1185, 1187, 1191, 1295], "mr": 884, "mssql": [37, 317], "much": [227, 285, 303, 317, 401, 515, 549, 664, 665, 758, 796, 892, 997, 1117, 1150, 1231, 1232, 1295], "mul": 796, "multi": [8, 39, 133, 134, 279, 317, 460, 655, 796, 1222], "multi_fram": [39, 317], "multicolselector": 177, "multiindexselector": [177, 919], "multipl": [39, 56, 57, 58, 104, 133, 134, 138, 144, 147, 150, 151, 152, 161, 163, 167, 189, 194, 196, 199, 207, 208, 212, 221, 224, 240, 242, 252, 255, 258, 263, 286, 291, 296, 317, 386, 515, 548, 554, 561, 570, 571, 590, 604, 606, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 643, 693, 705, 722, 729, 746, 757, 759, 764, 770, 776, 779, 786, 792, 796, 817, 818, 824, 831, 834, 835, 841, 860, 863, 867, 876, 879, 885, 892, 909, 924, 954, 1057, 1064, 1117, 1137, 1155, 1177, 1179, 1210, 1295, 1308, 1313], "multipli": [548, 611, 612, 614, 616, 618, 620, 623, 625, 627, 697, 796, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1295], "multithread": [263, 317, 643, 722, 796, 867, 909, 954, 1137, 1210, 1295], "must": [39, 68, 121, 122, 133, 137, 145, 148, 149, 152, 153, 187, 195, 208, 223, 224, 234, 242, 249, 250, 317, 402, 540, 549, 597, 604, 605, 610, 613, 615, 617, 619, 621, 624, 626, 628, 670, 737, 738, 786, 796, 822, 828, 835, 840, 841, 845, 850, 858, 865, 884, 909, 913, 998, 999, 1171, 1177, 1178, 1237, 1295], "mutual": [250, 317], "my": [149, 153], "my_column": 892, "my_column_": [281, 317], "my_column_0": [281, 317], "my_column_1": [281, 317], "my_column_2": [281, 317], "my_custom_aggreg": 758, "my_fil": 139, "my_holidai": [409, 724, 1004], "my_larger_than_ram_fil": [45, 46, 47, 48, 909], "my_long_fil": 147, "my_struct": 778, "mydf": 147, "myrol": 136, "mysql": 136, "n": [1, 12, 13, 17, 25, 36, 43, 45, 51, 52, 53, 54, 65, 67, 129, 133, 134, 138, 143, 147, 163, 181, 196, 202, 208, 210, 220, 221, 226, 227, 251, 252, 253, 260, 265, 268, 271, 273, 288, 300, 302, 311, 317, 333, 361, 366, 374, 385, 386, 401, 405, 409, 411, 413, 419, 439, 451, 457, 463, 466, 474, 480, 502, 510, 516, 518, 528, 529, 533, 536, 538, 540, 542, 591, 594, 603, 623, 624, 627, 628, 631, 634, 640, 645, 660, 664, 665, 668, 669, 674, 675, 677, 678, 683, 685, 700, 704, 705, 706, 710, 711, 713, 728, 730, 739, 740, 741, 742, 748, 750, 768, 771, 772, 773, 777, 781, 785, 787, 796, 815, 833, 835, 836, 844, 864, 869, 871, 877, 889, 891, 900, 909, 915, 953, 958, 965, 976, 985, 997, 1000, 1004, 1006, 1008, 1014, 1038, 1050, 1059, 1064, 1065, 1073, 1080, 1104, 1112, 1118, 1120, 1130, 1131, 1135, 1140, 1142, 1166, 1190, 1192, 1195, 1201, 1208, 1212, 1227, 1231, 1232, 1235, 1236, 1241, 1242, 1250, 1252, 1267, 1273, 1280, 1284, 1285, 1295, 1307, 1308, 1315, 1318, 1319, 1321, 1323, 1326], "n0": [366, 540], "n00": [958, 1142], "n01": [958, 1142], "n02": [958, 1142], "n1": [366, 540], "n2": [1, 366], "n3": 1, "n_1": [466, 796], "n_2": [466, 796], "n_3": [466, 796], "n_bar": 1312, "n_bit": 1318, "n_byte": [374, 664, 665, 1318], "n_char": [664, 665, 1318], "n_chunk": [317, 924, 1064, 1174, 1295], "n_elem": 1313, "n_even": 915, "n_field_strategi": [540, 1142], "n_film": 1304, "n_foo_uniqu": 1312, "n_kilobyt": 374, "n_row": [131, 133, 134, 139, 141, 143, 145, 147, 150, 151, 152, 221, 317, 909], "n_thread": [133, 134], "n_uniqu": [317, 333, 796, 1295], "na": [276, 317, 676, 1277, 1295], "naiv": [413, 414, 685, 1008, 1009, 1252], "name": [1, 18, 22, 24, 32, 34, 36, 37, 39, 45, 51, 52, 53, 54, 58, 79, 96, 120, 122, 123, 124, 125, 126, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 158, 159, 160, 161, 163, 166, 167, 168, 179, 180, 183, 184, 189, 190, 191, 195, 199, 200, 203, 204, 206, 207, 218, 219, 220, 222, 223, 224, 227, 229, 231, 233, 234, 236, 240, 242, 246, 250, 251, 252, 254, 255, 256, 263, 264, 267, 270, 272, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 295, 296, 302, 317, 321, 328, 366, 370, 371, 373, 375, 386, 402, 437, 440, 460, 466, 486, 493, 494, 495, 496, 540, 549, 554, 558, 560, 562, 566, 590, 597, 607, 643, 656, 657, 668, 669, 670, 693, 695, 697, 705, 710, 714, 715, 716, 717, 718, 720, 721, 722, 725, 726, 727, 728, 729, 730, 731, 734, 735, 744, 745, 750, 751, 754, 759, 760, 761, 762, 763, 764, 765, 766, 769, 772, 773, 774, 775, 777, 778, 779, 780, 781, 785, 786, 792, 796, 812, 814, 819, 820, 824, 825, 828, 831, 834, 839, 840, 841, 849, 850, 856, 859, 860, 861, 867, 868, 872, 873, 874, 875, 876, 879, 880, 881, 882, 883, 885, 891, 909, 913, 914, 915, 921, 958, 985, 998, 1036, 1039, 1056, 1142, 1171, 1176, 1222, 1223, 1224, 1235, 1236, 1260, 1263, 1271, 1272, 1277, 1284, 1295, 1300, 1305, 1306, 1307, 1308, 1309, 1310, 1322, 1323, 1326], "name_gener": [281, 317], "named_agg": [296, 885], "named_bi": [207, 317, 834, 909], "named_expr": [255, 256, 291, 292, 317, 697, 774, 778, 860, 861, 879, 880, 909], "named_fram": [1308, 1323], "nameless": 125, "namespac": [1, 135, 316, 317, 320, 693, 775, 795, 808, 907, 908, 1295, 1300, 1326], "nan": [125, 163, 176, 197, 275, 276, 317, 407, 408, 454, 455, 464, 475, 477, 484, 493, 494, 495, 496, 500, 547, 550, 568, 582, 583, 584, 585, 611, 637, 706, 728, 796, 829, 909, 927, 931, 1002, 1003, 1066, 1093, 1094, 1159, 1160, 1183, 1205, 1276, 1277, 1295, 1326], "nan_as_nul": 176, "nan_max": [796, 1295], "nan_min": [796, 1295], "nan_to_nul": [125, 317, 909, 1295], "nana": 1318, "nanmax": [582, 583, 796, 1159, 1160, 1295], "nanosecond": [80, 208, 223, 249, 287, 317, 431, 435, 436, 446, 448, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 740, 741, 742, 783, 784, 796, 835, 840, 858, 909, 1030, 1034, 1035, 1045, 1047, 1059, 1295, 1319], "nansum": [611, 796, 1183, 1295], "nativ": [10, 37, 133, 135, 138, 139, 141, 145, 220, 227, 251, 252, 271, 275, 303, 317, 549, 758, 775, 796, 802, 868, 892, 909, 1150, 1276, 1295, 1299, 1323, 1326], "natur": [545, 796, 1147, 1295, 1311, 1317], "ndarrai": [124, 174, 199, 275, 317, 473, 632, 796, 831, 909, 917, 1072, 1196, 1197, 1276, 1295], "ndjson": [47, 909], "ne": [585, 796, 1162, 1295], "ne_miss": [199, 317, 796, 831, 909, 1055, 1295], "nearest": [52, 187, 223, 244, 309, 317, 390, 469, 484, 598, 620, 621, 769, 796, 822, 840, 855, 898, 909, 983, 999, 1071, 1083, 1172, 1188, 1295, 1317], "nearest_pow2": 52, "necessari": [36, 37, 45, 49, 88, 138, 275, 317, 909, 1276, 1295], "need": [58, 90, 99, 127, 133, 134, 136, 145, 147, 150, 152, 208, 249, 252, 261, 317, 320, 540, 610, 635, 668, 669, 670, 686, 742, 768, 771, 787, 796, 835, 858, 909, 1202, 1235, 1236, 1237, 1253, 1295, 1300, 1326], "neg": [13, 64, 65, 66, 67, 133, 134, 139, 141, 145, 154, 210, 226, 249, 260, 262, 268, 294, 317, 361, 533, 534, 594, 595, 610, 634, 641, 660, 672, 683, 796, 858, 864, 866, 882, 883, 909, 915, 953, 1080, 1104, 1135, 1136, 1169, 1201, 1209, 1227, 1239, 1250, 1267, 1295], "negat": [587, 796, 1164, 1295], "neither": [127, 138, 144, 253, 317, 366, 540, 958, 1142], "nest": [49, 127, 130, 164, 165, 194, 317, 808, 1057, 1295, 1323, 1326], "nest_asyncio": 155, "nesting_level": 164, "net": [656, 1223], "netherland": [223, 317, 840, 909], "never": [36, 45, 135, 222, 223, 250, 317, 839, 840, 909], "new": [37, 38, 39, 147, 172, 177, 202, 212, 213, 227, 238, 239, 242, 246, 281, 283, 285, 286, 291, 292, 317, 328, 413, 462, 472, 474, 484, 574, 575, 590, 604, 605, 609, 668, 669, 674, 675, 693, 695, 792, 796, 808, 833, 856, 874, 876, 879, 880, 892, 909, 919, 921, 1008, 1063, 1073, 1163, 1176, 1177, 1178, 1182, 1235, 1236, 1241, 1242, 1260, 1263, 1272, 1295, 1323, 1325], "new_column": [133, 134, 138, 147], "new_dat": 431, "new_df": [286, 317, 876, 909], "new_fil": [34, 36, 40, 41, 44, 317], "new_from_index": 1295, "new_id": [281, 317], "new_lf": [876, 909], "new_tabl": 1325, "new_valu": [732, 733, 746, 770], "new_york": 740, "newli": 50, "newlin": [43, 143, 151, 317], "next": [52, 208, 223, 249, 287, 317, 369, 409, 431, 435, 448, 600, 610, 613, 615, 617, 619, 621, 624, 626, 628, 737, 738, 740, 741, 783, 784, 796, 835, 840, 858, 909, 1004, 1030, 1034, 1047, 1173, 1295], "next_batch": 134, "next_pow2": 52, "nfruit": 683, "nl": [409, 724, 1004], "nnel_id": 127, "no1": 915, "no_default": [203, 317, 604, 605, 670, 796, 1177, 1178, 1237, 1295], "no_optim": [45, 46, 47, 48, 56, 57, 817, 818, 845, 854, 909], "nodataerror": [133, 134, 138, 144, 147], "nodd": [655, 1222], "node": [813, 817, 837, 845, 849, 854, 856, 909], "nodefault": [203, 317, 604, 605, 670, 796, 1177, 1178, 1237, 1295], "non": [4, 5, 36, 38, 39, 45, 50, 65, 66, 125, 154, 179, 186, 221, 233, 249, 255, 256, 260, 280, 281, 284, 286, 291, 292, 317, 369, 385, 386, 391, 395, 396, 409, 434, 471, 486, 540, 548, 549, 555, 590, 591, 604, 605, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 649, 656, 664, 668, 669, 670, 690, 692, 697, 704, 705, 715, 717, 725, 726, 727, 729, 731, 735, 742, 760, 762, 765, 772, 773, 774, 778, 780, 796, 812, 821, 849, 858, 860, 861, 864, 872, 875, 876, 879, 880, 909, 913, 915, 976, 986, 991, 992, 999, 1004, 1033, 1085, 1142, 1150, 1166, 1177, 1178, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1201, 1216, 1223, 1231, 1235, 1236, 1257, 1259, 1276, 1280, 1295, 1315, 1323], "non_exist": [434, 1033], "non_numer": [36, 45, 317, 909], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 57, 59, 62, 65, 66, 67, 68, 75, 79, 88, 120, 122, 123, 124, 125, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 174, 175, 181, 186, 187, 191, 197, 198, 199, 201, 203, 206, 208, 209, 214, 218, 222, 223, 225, 227, 230, 233, 238, 239, 242, 249, 250, 253, 257, 260, 262, 263, 269, 270, 272, 274, 275, 276, 279, 281, 282, 283, 284, 285, 286, 287, 298, 302, 317, 329, 331, 332, 344, 345, 346, 353, 354, 366, 369, 391, 395, 396, 397, 400, 402, 407, 408, 416, 431, 434, 455, 456, 457, 458, 459, 460, 463, 464, 465, 471, 478, 479, 481, 484, 485, 486, 493, 494, 495, 496, 501, 503, 504, 511, 517, 519, 521, 528, 529, 530, 531, 532, 534, 540, 548, 549, 560, 563, 564, 565, 567, 572, 585, 586, 587, 588, 590, 591, 597, 600, 601, 604, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 631, 634, 635, 636, 637, 641, 642, 646, 647, 649, 651, 652, 653, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 672, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 687, 689, 692, 693, 694, 695, 696, 703, 710, 715, 716, 717, 719, 725, 726, 727, 729, 731, 735, 737, 738, 739, 740, 741, 742, 744, 745, 752, 753, 754, 755, 756, 757, 758, 760, 762, 765, 771, 772, 773, 778, 780, 782, 783, 784, 786, 796, 815, 816, 818, 821, 822, 825, 827, 829, 830, 831, 835, 838, 839, 840, 843, 845, 849, 852, 858, 862, 864, 865, 866, 867, 873, 874, 875, 876, 881, 884, 887, 891, 892, 901, 902, 909, 913, 914, 915, 917, 918, 922, 923, 925, 932, 933, 937, 938, 945, 946, 958, 967, 972, 975, 985, 986, 991, 992, 998, 999, 1001, 1002, 1003, 1011, 1018, 1019, 1020, 1024, 1033, 1053, 1055, 1058, 1059, 1060, 1061, 1065, 1066, 1067, 1069, 1077, 1079, 1081, 1083, 1084, 1085, 1095, 1096, 1099, 1100, 1101, 1103, 1105, 1106, 1109, 1113, 1119, 1121, 1123, 1130, 1131, 1132, 1133, 1134, 1136, 1142, 1150, 1151, 1152, 1153, 1154, 1162, 1165, 1171, 1172, 1173, 1177, 1178, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1195, 1196, 1197, 1198, 1201, 1204, 1205, 1208, 1209, 1212, 1213, 1214, 1216, 1218, 1219, 1220, 1223, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1249, 1250, 1251, 1252, 1254, 1256, 1259, 1262, 1270, 1272, 1273, 1274, 1276, 1277, 1278, 1284, 1285, 1295, 1304, 1306, 1307, 1308, 1310, 1313, 1315, 1319, 1323], "nonexist": [434, 1033], "nor": [138, 144, 253, 317], "normal": [38, 130, 208, 317, 453, 498, 640, 710, 796, 835, 909, 1053, 1100, 1208, 1284, 1295], "normalised_scor": 135, "norowsreturnederror": [250, 317], "not_": [291, 317, 796, 879, 909, 915, 1295], "not_c": [291, 317, 879, 909], "notabl": 135, "notat": [11, 39, 317], "note": [4, 10, 20, 38, 39, 44, 49, 50, 57, 64, 65, 67, 80, 87, 88, 120, 121, 122, 124, 126, 127, 133, 135, 136, 137, 138, 142, 143, 148, 149, 151, 153, 156, 158, 161, 163, 167, 169, 172, 176, 183, 185, 187, 188, 197, 199, 208, 209, 218, 219, 220, 222, 223, 227, 238, 241, 242, 246, 249, 250, 251, 252, 257, 260, 264, 271, 274, 276, 279, 281, 282, 284, 286, 287, 291, 293, 294, 317, 361, 391, 399, 400, 404, 407, 408, 414, 428, 429, 431, 435, 448, 457, 464, 470, 472, 479, 486, 493, 494, 512, 515, 533, 540, 549, 563, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 604, 605, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 634, 636, 640, 646, 647, 648, 654, 655, 656, 657, 658, 659, 660, 664, 665, 668, 669, 670, 672, 677, 678, 679, 682, 683, 690, 692, 693, 699, 706, 715, 717, 724, 732, 737, 738, 740, 741, 742, 746, 756, 768, 770, 771, 775, 783, 784, 786, 787, 792, 796, 807, 818, 822, 823, 829, 831, 835, 839, 840, 856, 858, 862, 864, 865, 867, 868, 873, 875, 876, 879, 882, 883, 909, 915, 953, 986, 995, 996, 999, 1002, 1003, 1009, 1027, 1028, 1030, 1034, 1047, 1059, 1066, 1079, 1085, 1114, 1117, 1135, 1150, 1177, 1178, 1182, 1189, 1196, 1198, 1201, 1203, 1208, 1213, 1214, 1215, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1231, 1232, 1235, 1236, 1237, 1239, 1244, 1245, 1246, 1249, 1250, 1257, 1259, 1266, 1277, 1279, 1295, 1304, 1305, 1309, 1310, 1321, 1323], "noth": [20, 655, 663, 1222, 1230], "notic": [135, 199, 317, 831, 909, 1295], "notimplementederror": 176, "now": [50, 138, 249, 275, 317, 557, 858, 909, 1276, 1295], "np": [124, 174, 199, 275, 317, 473, 548, 632, 796, 831, 909, 917, 1072, 1088, 1091, 1093, 1094, 1196, 1197, 1295], "npt": [174, 917], "nr": [300, 311, 889, 900], "nth": [202, 317, 474, 675, 792, 796, 833, 909, 1073, 1242, 1295], "nthe": [655, 1222], "nthose": [655, 1222], "nu": 652, "null": [16, 36, 38, 44, 45, 48, 50, 58, 65, 122, 123, 126, 130, 133, 134, 143, 145, 147, 151, 152, 153, 160, 163, 167, 176, 179, 181, 186, 187, 191, 193, 198, 199, 201, 214, 222, 230, 231, 232, 239, 242, 244, 260, 263, 265, 266, 267, 270, 275, 276, 280, 283, 286, 288, 291, 298, 317, 329, 331, 332, 342, 345, 346, 353, 354, 361, 362, 369, 371, 385, 386, 387, 391, 395, 396, 397, 400, 405, 407, 408, 431, 434, 441, 442, 443, 444, 445, 446, 447, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 471, 478, 484, 485, 493, 494, 495, 496, 501, 503, 504, 510, 511, 514, 515, 517, 519, 520, 521, 529, 530, 531, 532, 533, 535, 540, 548, 549, 572, 585, 586, 587, 588, 591, 601, 605, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 634, 635, 637, 642, 643, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 672, 674, 675, 676, 682, 683, 685, 687, 692, 693, 694, 695, 696, 703, 704, 705, 714, 715, 716, 717, 722, 725, 726, 727, 729, 731, 735, 739, 744, 755, 756, 760, 762, 765, 772, 773, 778, 780, 786, 796, 812, 815, 821, 822, 825, 830, 831, 838, 839, 852, 864, 867, 872, 874, 876, 879, 881, 887, 909, 915, 922, 923, 934, 937, 938, 945, 946, 953, 954, 962, 976, 977, 985, 986, 991, 992, 1000, 1002, 1003, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1055, 1056, 1058, 1059, 1060, 1061, 1065, 1067, 1068, 1077, 1078, 1083, 1084, 1095, 1096, 1097, 1103, 1105, 1106, 1109, 1112, 1113, 1116, 1117, 1119, 1121, 1122, 1123, 1132, 1134, 1135, 1137, 1142, 1150, 1162, 1165, 1166, 1178, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1201, 1205, 1210, 1213, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1239, 1241, 1242, 1243, 1249, 1250, 1252, 1254, 1259, 1262, 1273, 1276, 1277, 1278, 1280, 1295, 1307, 1311, 1313, 1315, 1319, 1321, 1323, 1324, 1326], "null_behavior": [405, 510, 796, 1000, 1112, 1295], "null_count": [44, 48, 187, 191, 317, 401, 796, 822, 909, 997, 999, 1295], "null_equ": [193, 317, 1056, 1295], "null_on_oob": [353, 515, 517, 945, 1117, 1119], "null_prob": [160, 163, 167], "null_valu": [36, 45, 133, 134, 147, 317, 909], "nullabl": [38, 317], "nullbehavior": [405, 510, 796, 1000, 1112, 1295], "nullif": 1316, "nulls_last": [263, 317, 342, 362, 535, 642, 643, 722, 796, 867, 909, 934, 954, 1097, 1137, 1210, 1295], "num": [13, 39, 278, 317, 486, 796, 1085, 1295], "num_row": 176, "number": [10, 11, 12, 13, 14, 17, 25, 36, 37, 39, 44, 45, 48, 49, 50, 64, 65, 66, 80, 88, 109, 120, 122, 123, 124, 126, 129, 130, 133, 134, 135, 136, 138, 142, 143, 144, 145, 147, 150, 151, 152, 154, 161, 163, 166, 168, 169, 170, 179, 181, 186, 194, 195, 197, 198, 206, 210, 211, 220, 221, 226, 237, 238, 249, 253, 260, 265, 268, 280, 285, 288, 290, 298, 300, 302, 311, 317, 343, 359, 361, 366, 369, 377, 378, 379, 380, 382, 383, 385, 386, 395, 401, 402, 405, 409, 412, 420, 422, 424, 426, 427, 436, 449, 450, 452, 456, 457, 458, 459, 463, 464, 465, 471, 480, 493, 494, 501, 502, 510, 518, 521, 526, 528, 533, 536, 538, 540, 542, 590, 594, 597, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 636, 645, 660, 662, 664, 665, 668, 672, 674, 675, 683, 686, 700, 704, 705, 711, 724, 728, 729, 730, 742, 750, 755, 772, 773, 777, 781, 785, 796, 812, 815, 821, 828, 829, 830, 836, 844, 854, 864, 869, 871, 872, 877, 878, 887, 889, 891, 900, 909, 914, 951, 953, 958, 968, 969, 970, 971, 973, 974, 976, 985, 991, 997, 998, 1000, 1004, 1007, 1015, 1017, 1022, 1025, 1026, 1035, 1048, 1049, 1051, 1057, 1058, 1059, 1060, 1061, 1065, 1066, 1067, 1080, 1103, 1104, 1112, 1120, 1123, 1128, 1130, 1135, 1140, 1142, 1156, 1157, 1171, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1201, 1204, 1212, 1227, 1229, 1231, 1232, 1235, 1239, 1241, 1242, 1250, 1253, 1267, 1280, 1285, 1295, 1311, 1314, 1317, 1326], "number_of_two": [350, 509], "numbers_decim": 686, "numer": [10, 16, 36, 39, 45, 137, 148, 180, 189, 223, 275, 276, 284, 285, 317, 326, 387, 391, 470, 486, 545, 569, 571, 595, 603, 635, 637, 657, 692, 698, 706, 796, 808, 814, 824, 840, 875, 909, 915, 977, 986, 999, 1085, 1202, 1205, 1224, 1259, 1276, 1295, 1317, 1326], "numeric_dtyp": 1326, "numericliter": [391, 796, 986, 1295], "numpi": [94, 124, 155, 174, 185, 220, 251, 252, 271, 275, 276, 317, 548, 582, 583, 611, 796, 909, 917, 1088, 1091, 1093, 1094, 1159, 1160, 1183, 1276, 1277, 1295], "nworld": 677, "o": [139, 150, 374, 385, 386, 401, 654, 704, 705, 796, 965, 976, 997, 1221, 1244, 1280, 1295, 1308], "oauth": 149, "obj": 915, "object": [34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 58, 79, 97, 121, 122, 127, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 161, 163, 164, 175, 176, 183, 188, 207, 208, 223, 225, 240, 249, 252, 257, 264, 274, 275, 276, 317, 404, 563, 737, 738, 740, 741, 756, 775, 783, 784, 796, 808, 817, 823, 835, 840, 843, 858, 868, 906, 909, 915, 918, 1270, 1295, 1305, 1307, 1310, 1323, 1325], "observ": [402, 456, 457, 458, 459, 597, 796, 998, 1058, 1059, 1060, 1061, 1171, 1295], "obtain": 540, "obvious": 695, "occur": [39, 56, 57, 95, 104, 110, 224, 317, 350, 509, 570, 600, 796, 817, 818, 827, 841, 854, 865, 909, 942, 1111, 1155, 1173, 1276, 1295], "occurr": [481, 489, 492, 710, 796, 1081, 1089, 1092, 1284, 1295], "oct": 1318, "octet_length": 1316, "octob": 1318, "od": [144, 808], "odbc": [37, 135, 317], "odd": 655, "odi": 658, "off": [45, 46, 47, 48, 56, 57, 133, 134, 147, 222, 223, 317, 409, 724, 817, 818, 827, 839, 840, 845, 854, 909, 1004], "offer": [241, 317, 594, 796, 853, 909, 1319, 1323], "offic": [39, 317], "offset": [67, 133, 134, 139, 141, 143, 145, 147, 150, 151, 152, 202, 208, 249, 262, 293, 294, 317, 409, 410, 418, 428, 429, 431, 435, 448, 474, 516, 534, 610, 641, 672, 685, 796, 833, 835, 858, 866, 882, 883, 909, 1004, 1005, 1013, 1027, 1028, 1030, 1034, 1047, 1073, 1118, 1136, 1209, 1239, 1252, 1295, 1322], "offset_bi": 742, "often": [136, 172, 208, 249, 317, 350, 509, 603, 610, 796, 835, 858, 909, 942, 1111, 1310, 1323], "ok": 540, "old": [38, 246, 317, 604, 605, 796, 856, 909, 1177, 1178, 1295], "old_tabl": 1325, "older": [44, 48, 317, 909], "oldw": 678, "omit": [27, 123, 127, 138, 144, 161, 172, 238, 252, 274, 279, 317, 737, 740, 752, 753, 783, 784, 915, 1324], "onc": [133, 134, 169, 227, 251, 253, 296, 317, 528, 548, 549, 631, 680, 681, 796, 813, 885, 909, 1130, 1150, 1195, 1247, 1248, 1295, 1308], "one": [20, 36, 37, 39, 45, 50, 101, 120, 122, 123, 124, 125, 126, 133, 134, 138, 142, 143, 144, 147, 151, 166, 168, 172, 180, 188, 198, 199, 206, 207, 208, 220, 224, 225, 233, 242, 249, 250, 251, 257, 258, 260, 275, 278, 284, 297, 317, 327, 361, 402, 404, 465, 466, 470, 473, 476, 478, 533, 540, 545, 563, 573, 574, 576, 578, 580, 581, 590, 609, 610, 634, 642, 655, 656, 657, 670, 693, 737, 740, 758, 776, 786, 792, 796, 814, 823, 830, 831, 834, 835, 841, 849, 858, 862, 863, 864, 875, 881, 886, 909, 924, 953, 958, 998, 1067, 1077, 1078, 1135, 1142, 1147, 1171, 1182, 1201, 1222, 1223, 1224, 1237, 1260, 1276, 1295, 1310, 1311, 1313, 1317, 1325], "one_to_mani": [222, 317, 839, 909], "one_to_on": [222, 317, 839, 909], "oneormoredatatyp": [39, 161, 317], "ones": 915, "onf": [672, 1239], "onli": [1, 5, 10, 13, 20, 30, 36, 37, 39, 45, 49, 50, 55, 58, 88, 133, 134, 135, 137, 138, 139, 141, 143, 145, 147, 148, 150, 151, 152, 153, 156, 157, 158, 159, 163, 167, 172, 191, 196, 208, 209, 220, 223, 224, 227, 242, 249, 251, 252, 271, 273, 274, 275, 286, 287, 303, 317, 327, 329, 331, 343, 390, 391, 404, 409, 431, 438, 460, 469, 479, 548, 549, 556, 557, 573, 574, 575, 576, 577, 578, 579, 580, 581, 590, 602, 648, 658, 670, 708, 724, 758, 796, 820, 823, 825, 826, 835, 840, 841, 858, 859, 876, 878, 892, 909, 913, 915, 922, 923, 924, 983, 986, 1004, 1030, 1064, 1071, 1079, 1150, 1175, 1215, 1225, 1237, 1270, 1273, 1276, 1295, 1304, 1307, 1323, 1324, 1326], "onlin": [196, 317, 1064, 1295], "ont": [658, 1225], "onto": 163, "oof": [671, 1238, 1313, 1318], "op": [20, 133, 134, 167, 246, 317, 556, 603, 796, 843, 856, 909, 1295], "opaqu": 892, "open": [39, 131, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 188, 317, 404, 796, 823, 909], "openoffic": 144, "openpyxl": [138, 155], "oper": [4, 39, 49, 58, 88, 97, 100, 107, 114, 120, 122, 123, 124, 125, 126, 133, 135, 182, 196, 199, 201, 207, 213, 225, 227, 234, 238, 240, 241, 242, 245, 247, 249, 252, 253, 258, 260, 269, 275, 276, 281, 284, 285, 295, 296, 317, 326, 327, 330, 361, 396, 397, 398, 399, 400, 401, 454, 455, 470, 472, 475, 477, 500, 528, 529, 530, 531, 532, 533, 540, 547, 566, 569, 571, 572, 573, 574, 576, 578, 580, 581, 584, 585, 586, 589, 590, 595, 602, 631, 634, 698, 706, 713, 714, 716, 726, 727, 731, 743, 775, 786, 796, 808, 816, 820, 822, 826, 831, 834, 839, 849, 850, 859, 863, 864, 868, 875, 878, 885, 909, 913, 953, 987, 992, 993, 994, 995, 996, 997, 1054, 1055, 1064, 1074, 1076, 1102, 1130, 1131, 1132, 1133, 1134, 1135, 1149, 1161, 1162, 1175, 1195, 1201, 1235, 1270, 1275, 1276, 1277, 1295, 1314, 1322, 1323], "operand": [706, 796], "opp": 915, "oppos": 724, "opposit": [260, 317, 361, 533, 634, 796, 864, 909, 953, 1135, 1201, 1295], "opt": [279, 317], "optim": [45, 46, 47, 48, 56, 57, 145, 147, 150, 151, 152, 220, 225, 241, 245, 251, 282, 317, 813, 817, 818, 827, 845, 854, 865, 873, 882, 883, 892, 909, 982, 1196, 1295], "optimis": [135, 227, 252, 303, 317, 909, 1150, 1198, 1295, 1326], "optimist": 14, "option": [2, 3, 4, 5, 6, 30, 37, 38, 39, 50, 66, 133, 135, 136, 137, 138, 139, 141, 143, 145, 147, 148, 149, 150, 151, 152, 153, 155, 160, 161, 162, 163, 166, 167, 168, 188, 203, 208, 218, 223, 233, 257, 264, 270, 281, 284, 286, 317, 404, 409, 498, 556, 557, 563, 590, 611, 612, 614, 616, 618, 620, 623, 625, 627, 640, 648, 658, 670, 672, 710, 778, 786, 796, 808, 817, 823, 835, 839, 840, 849, 862, 868, 875, 876, 884, 909, 915, 1004, 1100, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1208, 1215, 1225, 1237, 1239, 1272, 1284, 1295, 1313, 1318], "optional_memb": [490, 796, 1090, 1295], "or_": 796, "oracl": 136, "orang": [184, 298, 299, 301, 302, 304, 305, 307, 309, 310, 317, 386, 705, 796, 887, 888, 890, 891, 893, 894, 896, 898, 899, 1318], "order": [10, 39, 45, 46, 47, 48, 50, 56, 62, 123, 133, 135, 154, 156, 157, 158, 159, 179, 183, 184, 191, 192, 199, 207, 208, 222, 224, 240, 241, 242, 249, 251, 253, 254, 258, 263, 274, 275, 280, 282, 287, 317, 342, 362, 367, 385, 386, 407, 408, 466, 511, 528, 535, 541, 590, 595, 600, 610, 631, 632, 633, 642, 643, 671, 678, 679, 680, 681, 695, 704, 705, 707, 708, 710, 722, 775, 786, 796, 807, 812, 820, 825, 826, 831, 834, 835, 839, 841, 849, 858, 859, 863, 867, 868, 872, 873, 909, 914, 915, 934, 954, 959, 976, 981, 1002, 1003, 1068, 1097, 1113, 1130, 1137, 1143, 1169, 1173, 1180, 1195, 1197, 1199, 1210, 1238, 1263, 1280, 1281, 1282, 1284, 1295, 1304, 1307, 1313, 1322, 1323, 1326], "order_bi": [590, 796], "ordin": [432, 600, 796, 1031, 1173, 1295, 1324], "ordinal_dai": [417, 450], "org": [20, 40, 41, 121, 135, 136, 139, 141, 174, 175, 176, 185, 317, 865, 909, 917, 918], "orient": [51, 53, 95, 124, 126, 238, 317, 909, 1304], "origin": [50, 133, 134, 147, 191, 199, 282, 317, 407, 408, 434, 435, 448, 466, 511, 549, 573, 590, 602, 603, 604, 605, 606, 608, 649, 655, 663, 720, 721, 796, 825, 831, 873, 909, 1002, 1003, 1033, 1034, 1047, 1068, 1113, 1177, 1178, 1179, 1181, 1216, 1222, 1230, 1295], "orld": 1245, "other": [1, 20, 35, 39, 44, 57, 132, 133, 134, 135, 138, 147, 152, 156, 157, 158, 159, 191, 193, 196, 199, 222, 223, 224, 233, 234, 242, 250, 252, 255, 256, 279, 284, 286, 289, 291, 292, 315, 317, 320, 326, 330, 332, 342, 343, 391, 406, 454, 455, 466, 470, 475, 477, 486, 490, 500, 507, 529, 530, 531, 532, 547, 553, 559, 569, 571, 584, 585, 589, 604, 605, 636, 643, 670, 697, 698, 703, 706, 713, 715, 717, 722, 725, 726, 727, 735, 742, 760, 762, 765, 774, 778, 780, 796, 808, 818, 825, 831, 839, 840, 841, 849, 850, 860, 861, 875, 876, 879, 880, 881, 909, 915, 924, 986, 1001, 1054, 1055, 1056, 1064, 1074, 1076, 1090, 1102, 1109, 1131, 1132, 1133, 1134, 1149, 1161, 1162, 1177, 1178, 1278, 1286, 1294, 1295, 1300, 1310, 1323], "other_df": [222, 317], "other_lf": [839, 909], "otherwis": [37, 135, 138, 145, 150, 162, 165, 169, 203, 227, 234, 252, 255, 274, 279, 303, 317, 366, 371, 391, 402, 456, 457, 458, 459, 540, 549, 560, 590, 594, 595, 597, 602, 637, 647, 650, 654, 659, 660, 665, 668, 669, 672, 683, 710, 714, 742, 745, 754, 758, 786, 796, 850, 860, 892, 909, 958, 962, 986, 998, 1058, 1059, 1060, 1061, 1142, 1150, 1169, 1171, 1175, 1196, 1198, 1205, 1214, 1217, 1221, 1226, 1227, 1232, 1235, 1236, 1239, 1250, 1284, 1295, 1315], "our": 177, "out": [8, 14, 37, 45, 46, 47, 48, 102, 127, 152, 155, 199, 249, 252, 317, 353, 371, 515, 517, 647, 650, 659, 786, 831, 858, 909, 945, 962, 1117, 1119, 1214, 1217, 1226, 1321], "outcom": [590, 796], "outer": [50, 58, 286, 317, 876, 909], "outermost": 49, "outlin": 7, "output": [0, 8, 30, 36, 39, 40, 41, 42, 43, 44, 45, 179, 187, 220, 227, 231, 234, 240, 242, 251, 255, 257, 267, 280, 287, 291, 317, 329, 331, 354, 385, 386, 402, 519, 540, 548, 549, 560, 563, 574, 597, 604, 646, 661, 665, 704, 705, 710, 714, 715, 716, 717, 726, 727, 728, 757, 758, 796, 808, 812, 822, 827, 845, 849, 850, 860, 862, 872, 879, 892, 909, 922, 923, 946, 976, 998, 1121, 1150, 1171, 1213, 1228, 1232, 1280, 1284, 1295], "output_path": [564, 865, 909], "outsid": [391, 796, 986, 1295], "over": [129, 133, 134, 135, 137, 138, 144, 147, 152, 163, 164, 179, 196, 219, 220, 221, 227, 250, 251, 252, 264, 280, 281, 295, 303, 317, 321, 385, 386, 401, 404, 457, 465, 548, 549, 560, 562, 563, 564, 565, 566, 574, 575, 600, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 704, 705, 732, 733, 746, 757, 758, 770, 775, 796, 812, 817, 868, 872, 884, 892, 906, 909, 915, 976, 997, 1059, 1064, 1150, 1184, 1185, 1187, 1191, 1280, 1295, 1323], "overflow": [180, 317, 387, 399, 400, 687, 699, 796, 814, 909, 977, 995, 996, 1254, 1266, 1295], "overhead": [49, 88, 147, 150, 151, 152], "overlap": [649, 656, 658, 1216, 1223, 1225], "overrid": [1, 39, 120, 122, 123, 124, 125, 126, 133, 135, 136, 138, 142, 143, 144, 151, 160, 161, 167, 169, 317, 909], "overridden": [39, 120, 122, 124, 126, 142, 143, 151, 169, 317, 909], "overview": [317, 796, 808, 909, 1295, 1322, 1326], "overwrit": [14, 37, 38, 120, 122, 123, 124, 126, 130, 133, 134, 142, 143, 147, 151, 176, 286, 317, 328, 697, 796, 876, 909], "overwrite_schema": [38, 317], "ow": 677, "own": [786, 1276, 1295, 1326], "p": [52, 241, 317, 594, 778, 796, 853, 909, 915, 1226, 1227, 1308], "pa": [38, 120, 153, 317, 775], "pa_tabl": 775, "pacif": [410, 1005], "pack": [238, 317], "packag": [32, 33, 135, 317, 321, 409, 724, 913, 1004], "pad": [666, 667, 692, 1233, 1234, 1259], "pad_end": [667, 1234], "pad_start": [666, 692, 1233, 1259], "page": [44, 48, 139, 145, 150, 152, 317, 796, 808, 909, 1295, 1322], "pair": [120, 122, 123, 124, 126, 142, 143, 151, 246, 317, 856, 909, 1326], "pairwis": [185, 317], "panda": [37, 121, 125, 130, 155, 199, 208, 276, 282, 284, 317, 428, 429, 703, 775, 796, 831, 835, 873, 875, 909, 1027, 1028, 1277, 1278, 1295, 1305, 1307, 1323], "pandas_df": 1323, "pane": [39, 317], "panic": 103, "pap": 1227, "papa": 660, "papai": [660, 1227], "papaya": [660, 672, 683, 1227, 1239, 1250], "parallel": [56, 58, 129, 136, 145, 152, 208, 223, 225, 241, 256, 292, 317, 401, 512, 710, 786, 796, 808, 835, 839, 840, 861, 880, 892, 909, 997, 1114, 1284, 1295], "parallelis": [227, 303, 317, 1150, 1295], "parallelstrategi": [145, 152], "param": [39, 120, 122, 123, 124, 126, 133, 134, 142, 143, 147, 151, 162, 163, 167, 250, 317, 909], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 62, 65, 66, 67, 68, 75, 79, 89, 95, 104, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 176, 177, 179, 180, 181, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 218, 220, 221, 222, 223, 224, 226, 227, 231, 233, 234, 237, 238, 240, 241, 242, 244, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 260, 262, 263, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 300, 302, 303, 309, 311, 317, 326, 328, 329, 330, 331, 332, 342, 349, 350, 353, 354, 361, 362, 366, 367, 369, 370, 371, 372, 373, 374, 375, 385, 386, 387, 391, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 409, 411, 413, 414, 419, 431, 434, 435, 436, 437, 439, 440, 448, 451, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 484, 485, 486, 490, 498, 500, 502, 507, 508, 509, 510, 512, 515, 516, 517, 518, 519, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 547, 548, 549, 556, 557, 563, 564, 565, 569, 571, 574, 575, 576, 577, 578, 579, 584, 585, 589, 590, 591, 594, 595, 597, 598, 600, 602, 603, 604, 605, 606, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 692, 693, 695, 697, 698, 700, 704, 705, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 796, 812, 814, 815, 817, 818, 822, 823, 824, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 839, 840, 841, 844, 845, 849, 850, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 889, 891, 892, 898, 900, 909, 913, 914, 915, 919, 921, 922, 923, 924, 934, 941, 942, 945, 946, 953, 954, 958, 959, 961, 962, 963, 964, 966, 976, 977, 985, 986, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1006, 1008, 1009, 1014, 1030, 1033, 1034, 1035, 1036, 1038, 1039, 1047, 1050, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1065, 1066, 1067, 1068, 1072, 1073, 1079, 1080, 1081, 1083, 1084, 1085, 1097, 1100, 1104, 1109, 1110, 1111, 1112, 1114, 1117, 1118, 1119, 1120, 1121, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1140, 1141, 1142, 1143, 1150, 1162, 1166, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1204, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1233, 1234, 1235, 1236, 1237, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1256, 1259, 1260, 1263, 1267, 1270, 1271, 1272, 1273, 1274, 1276, 1277, 1280, 1281, 1284, 1285, 1286, 1295, 1304, 1305, 1306, 1307, 1308, 1310, 1315, 1318, 1323], "parameteris": 135, "parametr": 808, "paramount": [845, 909], "parent": [39, 201, 317], "parenthes": 18, "parquet": [44, 48, 145, 146, 152, 317, 808, 909], "parquetcompress": [44, 317], "pars": [36, 45, 132, 133, 134, 136, 138, 143, 144, 145, 147, 150, 151, 152, 179, 207, 255, 256, 260, 263, 280, 291, 292, 296, 317, 386, 391, 486, 590, 604, 605, 643, 662, 670, 686, 687, 697, 705, 715, 717, 722, 725, 726, 727, 735, 748, 760, 762, 765, 774, 776, 778, 780, 786, 796, 812, 834, 860, 861, 864, 867, 872, 879, 880, 885, 909, 986, 1085, 1177, 1178, 1201, 1229, 1253, 1254, 1295, 1304], "parseerror": [687, 1254], "parser": [133, 138], "part": [120, 138, 177, 274, 279, 317, 590, 656, 674, 675, 796, 827, 854, 865, 881, 909, 919, 1223, 1241, 1242, 1319], "parti": [548, 796], "partial": [123, 133, 147, 317, 909], "particip": [39, 317], "particular": [133, 139, 141, 179, 194, 280, 317, 385, 386, 704, 705, 796, 812, 872, 909, 976, 1057, 1280, 1295], "partit": [44, 136, 137, 145, 148, 150, 152, 153, 221, 240, 317, 590, 796], "partition_bi": [44, 134, 221, 317, 590, 796], "partition_chunk_size_byt": [44, 317], "partition_col": [44, 136, 317], "partition_df": 134, "partition_num": 136, "partition_on": 136, "partition_rang": 136, "partitioned_object": [44, 317], "pass": [32, 33, 35, 37, 38, 39, 44, 50, 95, 122, 130, 132, 135, 136, 138, 145, 147, 150, 153, 156, 158, 161, 163, 165, 167, 179, 185, 189, 207, 208, 210, 223, 226, 240, 241, 242, 246, 249, 255, 260, 263, 268, 276, 279, 280, 287, 291, 296, 317, 361, 386, 409, 419, 431, 434, 463, 483, 533, 548, 549, 564, 590, 594, 604, 605, 610, 634, 643, 670, 677, 678, 679, 705, 714, 722, 724, 748, 778, 786, 792, 796, 812, 824, 834, 835, 837, 840, 845, 853, 856, 858, 860, 864, 865, 867, 872, 879, 884, 885, 892, 909, 913, 914, 953, 1004, 1014, 1033, 1065, 1080, 1104, 1135, 1150, 1177, 1178, 1201, 1237, 1244, 1245, 1246, 1267, 1277, 1295, 1308, 1323], "pass_nam": [549, 796], "pass_name_to_appli": [796, 913], "password": [133, 136, 139, 141], "past": [35, 317, 845, 909], "pat": [659, 1226], "path": [3, 6, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 131, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 188, 257, 317, 404, 563, 564, 567, 633, 663, 796, 823, 862, 865, 909, 913, 1199, 1230, 1295, 1326], "pathlib": [34, 36, 40, 41, 44, 147, 317], "pattern": [58, 91, 133, 134, 147, 150, 151, 152, 220, 317, 558, 647, 648, 649, 652, 655, 656, 657, 658, 659, 668, 669, 670, 676, 892, 915, 1196, 1198, 1214, 1215, 1216, 1219, 1222, 1223, 1224, 1225, 1226, 1235, 1236, 1237, 1243, 1295, 1318], "paya": 683, "pct": 163, "pct_chang": [796, 1295], "pd": [121, 125, 703, 775, 796, 1277, 1278, 1295, 1305, 1323], "pd_df": 125, "pd_frame": 775, "pd_seri": 125, "pdsh": [129, 134], "pea": 660, "peak": [251, 317, 592, 593, 796, 1167, 1168, 1295], "peak_max": [796, 1295], "peak_min": [796, 1295], "pear": [660, 672, 683, 1227, 1239, 1250], "pearson": [185, 317, 498, 640, 728, 796, 1100, 1208, 1295], "penalti": [682, 684, 685, 1249, 1251, 1252], "per": [14, 36, 39, 45, 138, 161, 163, 179, 206, 238, 239, 242, 256, 263, 280, 292, 306, 308, 309, 317, 353, 386, 512, 515, 517, 548, 549, 573, 574, 576, 578, 580, 581, 643, 705, 710, 722, 796, 812, 861, 867, 872, 880, 895, 897, 898, 909, 913, 945, 1114, 1117, 1119, 1284, 1295], "percent": [591, 796, 1166, 1295], "percentag": [160, 163, 167, 591, 796, 1166, 1295], "percentil": [187, 317, 822, 909, 999, 1295], "perform": [37, 44, 46, 48, 50, 93, 98, 100, 105, 107, 114, 121, 133, 134, 135, 139, 143, 145, 147, 150, 151, 152, 176, 199, 207, 208, 223, 224, 227, 245, 249, 251, 252, 275, 303, 317, 376, 381, 384, 470, 540, 548, 549, 590, 610, 648, 658, 664, 665, 670, 682, 684, 685, 796, 831, 835, 840, 841, 858, 867, 882, 883, 909, 967, 972, 975, 1150, 1215, 1225, 1231, 1232, 1237, 1249, 1251, 1252, 1276, 1295], "perhap": [281, 317], "period": [133, 134, 147, 208, 249, 317, 435, 448, 456, 458, 459, 591, 610, 737, 738, 740, 741, 783, 784, 796, 835, 858, 909, 1034, 1047, 1058, 1060, 1061, 1166, 1295], "persist": 1310, "phase": [37, 285, 317], "philadelphia": [668, 669], "phone": [690, 1257], "physic": [49, 62, 88, 133, 134, 223, 242, 317, 703, 796, 813, 839, 840, 909, 980, 1278, 1295], "pi": [10, 403, 796, 988, 990, 1206, 1268, 1295, 1316, 1320], "pick": [164, 786], "pickl": [404, 796, 823, 909], "pip": [409, 724, 1004], "pipe": [317, 796, 909], "pipelin": [138, 279, 317], "pitfal": 105, "pivot": [285, 317, 915], "pivot_long": [284, 317, 875, 909], "pivot_wid": [242, 317], "pivotagg": [242, 317], "pixel": [39, 317], "pk": [453, 796, 1053, 1295], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 75, 79, 87, 88, 92, 95, 96, 97, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 147, 148, 149, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 169, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 796, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 909, 914, 915, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1075, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1295, 1300, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1323, 1324, 1326], "pl_frame": 775, "place": [10, 11, 36, 45, 190, 196, 212, 213, 242, 247, 252, 263, 289, 317, 321, 342, 354, 362, 519, 535, 642, 643, 722, 796, 867, 909, 924, 934, 946, 954, 1064, 1121, 1137, 1174, 1210, 1295], "placehold": 747, "plai": [12, 727], "plain": [827, 909], "plan": [223, 225, 317, 404, 796, 813, 817, 823, 827, 839, 840, 862, 865, 909, 1325], "plane": [720, 721], "platform": 155, "ple": 1318, "pleas": [125, 135, 136, 199, 208, 233, 317, 321, 457, 729, 742, 796, 831, 835, 849, 909, 1059, 1295], "plenti": 915, "plot": [317, 854, 865, 909, 1295], "plu": [402, 545, 796, 998, 1147, 1171, 1295, 1317], "plugin": [0, 796, 808], "plugin_path": 913, "point": [10, 11, 31, 32, 33, 39, 45, 46, 47, 48, 56, 57, 66, 68, 69, 70, 130, 143, 145, 147, 150, 151, 152, 153, 160, 161, 163, 164, 165, 166, 167, 168, 197, 208, 224, 225, 264, 274, 279, 285, 286, 317, 320, 321, 390, 401, 402, 407, 435, 436, 464, 469, 470, 481, 493, 494, 528, 549, 597, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 772, 773, 796, 817, 818, 827, 829, 835, 841, 845, 856, 868, 876, 909, 981, 983, 997, 998, 1002, 1034, 1035, 1066, 1071, 1081, 1130, 1171, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1274, 1279, 1295, 1300, 1323], "poison": [582, 583, 796, 1159, 1160, 1295], "pola": 317, "polar": [1, 317, 320, 321, 795, 796, 802, 808, 909, 913, 914, 915, 1295, 1299, 1300, 1322, 1323, 1325], "polars_df": 1323, "polars_file_cache_ttl": [143, 147, 150, 151], "polars_hypothesis_profil": [166, 168], "polars_max_thread": 169, "polars_seri": 1323, "polars_verbos": [817, 909], "polarsdatafram": 176, "polarsdataset": [279, 317], "polarsdatatyp": [59, 75, 133, 134, 147, 160, 161, 162, 163, 164, 167, 180, 227, 274, 279, 317, 387, 460, 548, 549, 604, 605, 662, 744, 756, 757, 758, 768, 771, 787, 792, 796, 814, 909, 915, 977, 1150, 1177, 1178, 1229, 1295], "polarsintegertyp": [719, 752, 753], "polarstemporaltyp": [682, 1249], "polarstyp": 58, "pool": [14, 57, 169, 170, 818, 909], "poor": 135, "pop2": [223, 317, 840, 909], "popul": [223, 317, 840, 909], "port": [37, 133, 135, 136, 139, 141, 317], "portion": 1318, "pos_a": 1318, "posit": [39, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 177, 189, 195, 207, 240, 255, 256, 260, 263, 283, 291, 292, 296, 317, 361, 456, 458, 459, 460, 533, 590, 595, 597, 634, 643, 657, 659, 668, 669, 687, 697, 720, 721, 722, 725, 726, 727, 744, 774, 778, 792, 796, 824, 828, 834, 860, 861, 864, 867, 874, 879, 880, 885, 909, 915, 953, 1058, 1060, 1061, 1135, 1169, 1171, 1201, 1224, 1254, 1295, 1324], "position": 1295, "possibl": [39, 44, 48, 95, 97, 122, 123, 126, 133, 138, 160, 163, 167, 207, 220, 227, 251, 282, 303, 317, 546, 549, 560, 611, 675, 709, 796, 817, 834, 867, 873, 909, 1150, 1183, 1242, 1295], "post": 50, "postgresql": [37, 135, 136, 317, 590, 796, 1321], "potenti": [105, 107, 138, 147, 150, 151, 220, 250, 252, 317, 573, 668, 669, 820, 822, 826, 859, 878, 909, 913, 1235, 1236], "pow": [796, 1295, 1316], "pow_n": 52, "power": [776, 1169, 1295, 1317], "powersofn": 52, "pre": [540, 549, 597, 768, 771, 787, 796, 1171, 1295], "preced": [163, 915], "precis": [10, 11, 36, 39, 45, 66, 135, 220, 251, 252, 271, 274, 279, 317, 411, 686, 909, 915, 1006, 1253], "predefin": [242, 317], "predic": [38, 45, 46, 47, 48, 56, 57, 147, 150, 151, 152, 153, 199, 218, 224, 250, 317, 466, 712, 746, 786, 796, 817, 818, 827, 831, 841, 845, 854, 856, 865, 882, 883, 909, 1068, 1196, 1198, 1295], "predicate_pushdown": [45, 46, 47, 48, 56, 57, 817, 818, 827, 845, 854, 865, 909], "predict": [242, 245, 287, 317], "prefer": [133, 134, 137, 138, 147, 168, 179, 196, 220, 227, 250, 251, 280, 303, 317, 385, 386, 460, 549, 704, 705, 796, 812, 872, 909, 976, 1064, 1150, 1280, 1295, 1305, 1326], "prefilt": 152, "prefix": [38, 133, 134, 147, 172, 317, 328, 375, 558, 574, 577, 578, 580, 581, 676, 679, 680, 692, 796, 915, 966, 1243, 1247, 1259], "prefix_": 577, "prefix_a": 577, "prefix_b": 577, "prefix_field": [575, 579], "presenc": [745, 754, 915], "present": [123, 163, 203, 317, 490, 678, 679, 796, 865, 909], "preserv": [191, 199, 207, 222, 224, 227, 275, 276, 317, 407, 408, 409, 428, 429, 466, 511, 590, 604, 637, 654, 796, 825, 831, 839, 841, 909, 1002, 1003, 1004, 1068, 1113, 1177, 1205, 1221, 1277, 1295], "pressur": [48, 133, 134, 143, 145, 147, 151, 152, 635, 796, 909, 1202, 1295], "presum": [548, 796], "prev_pow2": 52, "prevent": [275, 317, 328, 399, 400, 573, 699, 796, 909, 995, 996, 1266, 1295], "preview": [206, 317], "previou": [52, 172, 317, 320, 409, 573, 574, 576, 578, 580, 581, 591, 695, 796, 1004, 1166, 1295, 1300], "previous": [2, 3], "price": [317, 320, 1326], "primari": [138, 1323, 1326], "primarili": 1, "primit": [38, 317, 490, 796], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 134, 155, 156, 158, 192, 206, 207, 221, 225, 273, 295, 317, 483, 565, 737, 740, 796, 817, 837, 909, 915, 1090, 1273, 1295, 1326], "prior": [125, 317, 320, 1295, 1300], "prioriti": 164, "probabl": [453, 597, 796, 1053, 1171, 1295], "process": [14, 36, 45, 46, 47, 48, 56, 57, 133, 134, 135, 147, 169, 251, 317, 817, 818, 909], "process_index": [274, 317], "produc": [2, 3, 163, 167, 222, 317, 350, 509, 560, 757, 839, 845, 909, 942, 1111], "product": [50, 185, 222, 317, 399, 406, 796, 839, 909, 995, 1001, 1295], "profil": [32, 166, 168, 817, 909], "profile_nam": 32, "programmat": [187, 317, 822, 909], "progress": [66, 68], "project": [45, 46, 47, 48, 56, 57, 147, 149, 150, 151, 152, 642, 643, 796, 817, 818, 827, 845, 854, 856, 865, 909], "projection_pushdown": [45, 46, 47, 48, 56, 57, 817, 818, 827, 845, 854, 865, 909], "prompt": 127, "propag": [354, 455, 519, 582, 583, 585, 646, 661, 726, 727, 796, 946, 1055, 1121, 1159, 1160, 1162, 1213, 1228, 1295], "propagate_nan": 728, "proper": [224, 317, 841, 909], "properti": [39, 176, 183, 184, 192, 200, 211, 254, 259, 290, 294, 317, 320, 321, 819, 820, 826, 859, 878, 883, 909, 914, 915, 1052, 1070, 1158, 1200, 1295, 1300, 1326], "proport": [710, 796, 1284, 1295], "protocol": [38, 121, 136, 176, 317], "prototyp": 792, "provid": [31, 32, 33, 37, 39, 133, 134, 136, 137, 138, 143, 145, 147, 148, 149, 150, 151, 152, 163, 167, 199, 203, 218, 264, 274, 317, 320, 371, 372, 460, 481, 540, 548, 549, 650, 651, 655, 662, 663, 678, 679, 680, 681, 748, 778, 796, 808, 817, 831, 868, 884, 906, 909, 962, 963, 1081, 1099, 1150, 1217, 1218, 1222, 1229, 1230, 1274, 1295, 1308, 1315, 1318, 1323, 1326], "provis": 809, "prune": [145, 150, 152, 845, 909], "public": [136, 317, 796, 808, 909, 1295, 1322], "pulp": 1304, "pure": [39, 317], "purpos": [572, 796, 909], "push": [147, 150, 151, 152, 153], "pushdown": [45, 46, 47, 48, 56, 57, 817, 818, 827, 845, 854, 856, 865, 882, 883, 909, 1196, 1198, 1295], "put": [36, 45, 317, 321, 909], "pwd": 135, "py": 149, "pyarrow": [38, 44, 120, 125, 133, 136, 137, 139, 141, 145, 148, 153, 155, 269, 275, 276, 317, 775, 808, 1270, 1276, 1277, 1295, 1305, 1307, 1323], "pyarrow_opt": [44, 137, 145, 148, 317], "pyarrow_t": 1323, "pycapsul": [175, 918], "pycapsuleinterfac": [175, 918], "pydant": 155, "pyiceberg": [149, 155], "pyodbc": [37, 317], "pyodbc_uri": [37, 317], "pyspark": 169, "pytest": [156, 158], "python": [0, 32, 33, 40, 41, 77, 91, 121, 133, 134, 139, 141, 155, 156, 158, 176, 220, 227, 251, 252, 271, 303, 317, 404, 409, 413, 470, 548, 549, 657, 724, 737, 738, 740, 741, 783, 784, 786, 796, 802, 823, 892, 909, 914, 1004, 1008, 1018, 1019, 1020, 1024, 1150, 1224, 1275, 1295, 1299, 1322], "pythondatatyp": [59, 75, 180, 317, 814, 909], "pythonliter": [925, 967, 972, 975, 1069, 1101, 1151, 1152, 1153, 1154, 1196, 1295], "pytorch": [279, 317, 1279, 1295], "q": [252, 317, 778, 1295, 1300, 1308], "q1": [39, 317], "q2": [39, 317], "q3": [39, 317], "q4": [39, 317], "qcut": [402, 796, 998, 1295], "qhoo": 1326, "qmark": 135, "qqr": 915, "quad": [457, 796, 1059, 1295], "qualifi": [37, 317], "quantifi": [656, 1223], "quantil": [317, 597, 620, 621, 796, 909, 1171, 1188, 1295, 1312], "quantile_cont": 1316, "quantile_disc": 1316, "quarter": [208, 223, 249, 287, 317, 431, 435, 448, 610, 613, 615, 617, 619, 621, 624, 626, 628, 737, 738, 740, 741, 783, 784, 796, 835, 840, 858, 909, 1030, 1034, 1047, 1319], "queri": [45, 46, 47, 48, 56, 57, 135, 136, 139, 147, 150, 151, 152, 196, 225, 241, 264, 317, 548, 549, 663, 775, 796, 817, 818, 827, 854, 865, 868, 882, 883, 884, 892, 901, 909, 1064, 1150, 1230, 1295, 1304, 1305, 1307, 1311, 1322, 1324, 1325], "quick": [792, 999, 1295, 1326], "quit": [223, 317, 840, 909], "quot": [36, 37, 45, 133, 134, 136, 147, 317, 690, 909, 1257], "quota_project_id": 33, "quote_char": [36, 45, 133, 134, 147, 317, 909], "quote_plu": 136, "quote_styl": [36, 45, 317, 909], "quotes_titl": 690, "quotient": 1317, "r": [133, 134, 147, 317, 555, 594, 649, 654, 655, 656, 657, 668, 669, 796, 915, 1216, 1221, 1222, 1223, 1224, 1235, 1236, 1250, 1308, 1318], "r1": 58, "r2": 58, "r3": 58, "rab": [647, 671, 1214, 1238, 1313], "rad": 1320, "radian": [403, 720, 796, 1316], "radix": [687, 1254], "rai": [720, 721], "raini": [668, 669, 1235, 1236], "rais": [1, 15, 16, 20, 38, 92, 93, 96, 97, 99, 100, 101, 102, 103, 104, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 133, 134, 138, 144, 145, 147, 152, 156, 158, 176, 203, 242, 250, 275, 317, 353, 371, 409, 434, 515, 517, 560, 595, 597, 605, 647, 650, 659, 682, 684, 685, 687, 689, 739, 756, 796, 884, 945, 962, 1004, 1033, 1117, 1119, 1169, 1171, 1178, 1214, 1217, 1226, 1249, 1251, 1252, 1254, 1256, 1276, 1295], "raise_if_empti": [133, 134, 138, 144, 147], "raise_if_undetermin": 560, "raise_on_fail": 884, "raker": 130, "ram": [45, 46, 47, 48, 909], "ran": [796, 913], "random": [39, 40, 139, 154, 161, 209, 253, 317, 479, 528, 600, 631, 636, 710, 796, 808, 1079, 1130, 1173, 1195, 1204, 1284, 1295], "randomli": 162, "rang": [17, 39, 135, 136, 187, 194, 208, 221, 317, 333, 403, 409, 417, 427, 432, 433, 435, 448, 449, 484, 719, 724, 726, 736, 737, 738, 739, 740, 741, 752, 753, 782, 783, 784, 796, 822, 835, 909, 915, 999, 1004, 1012, 1026, 1031, 1032, 1034, 1047, 1048, 1057, 1166, 1295, 1318], "rank": [342, 512, 722, 728, 743, 796, 934, 1114, 1295], "rankmethod": [600, 796, 1173, 1295], "rare": [410, 1005], "rather": [223, 317, 472, 548, 565, 597, 609, 692, 796, 840, 909, 1171, 1182, 1259, 1295], "raw": 136, "raw_output": [564, 865, 909], "re": [203, 208, 219, 282, 284, 317, 428, 429, 437, 440, 835, 873, 875, 909, 1027, 1028, 1036, 1039, 1323], "reach": [666, 667, 692, 1233, 1234, 1259], "read": [35, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 188, 196, 317, 404, 472, 786, 796, 823, 909, 1064, 1295], "read_arrow_batches_from_odbc": 135, "read_clipboard": [35, 317], "read_csv": [132, 138, 147], "read_csv_batch": 129, "read_databas": 136, "read_database_uri": 135, "read_excel": 144, "read_ndjson": 142, "read_od": 138, "read_opt": 138, "read_parquet": 152, "read_tabl": 145, "readabl": 792, "reader": [44, 48, 129, 133, 134, 139, 141, 145, 317, 909], "readi": 902, "readthedoc": [39, 317], "real": [656, 1223], "realli": [401, 648, 670, 796, 997, 1215, 1237, 1295], "realloc": [143, 147, 150, 151, 196, 317, 1064, 1295], "rearrang": [227, 317], "reason": [169, 187, 317, 540, 548, 796, 822, 909], "receiv": [50, 135, 147, 227, 241, 303, 317, 549, 594, 796, 853, 909, 1326], "recent": [156, 157, 158, 159, 275, 317, 591, 605, 796, 1166, 1178, 1276, 1295, 1307, 1323], "rechunk": [58, 120, 125, 133, 134, 137, 139, 141, 143, 145, 147, 150, 151, 152, 196, 317, 796, 984, 1064, 1075, 1156, 1295], "recognis": [15, 16, 20, 915], "recommend": [39, 169, 187, 220, 225, 241, 317, 813, 822, 909, 915], "record": [36, 41, 45, 130, 141, 153, 317, 909], "record_batch": [221, 317], "recordbatch": [120, 221, 317, 775, 1305, 1307, 1323], "recurs": [456, 458, 459, 796, 1058, 1060, 1061, 1295], "red": [49, 87, 88, 303, 710, 796, 892, 1284, 1295], "redempt": 1304, "redshift": 136, "reduc": [48, 133, 134, 143, 145, 147, 150, 151, 152, 251, 304, 305, 307, 310, 317, 635, 733, 746, 796, 893, 894, 896, 899, 909, 1152, 1170, 1202, 1266, 1295], "reduct": [201, 317, 549, 796], "ref": [655, 657, 1222, 1224], "refer": [0, 32, 39, 91, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 185, 188, 317, 321, 404, 437, 440, 600, 655, 668, 669, 682, 684, 685, 689, 796, 823, 909, 1036, 1039, 1173, 1235, 1236, 1249, 1251, 1252, 1256, 1295], "referenc": [39, 317, 548, 668, 669, 695, 796, 1235, 1236, 1305, 1323], "refin": 138, "reg": 130, "regard": [133, 728], "regardless": [125, 179, 207, 223, 280, 317, 386, 414, 663, 705, 786, 796, 812, 840, 872, 909, 1009, 1230], "regex": [89, 460, 555, 556, 558, 647, 649, 655, 656, 657, 659, 668, 669, 693, 744, 796, 915, 1214, 1216, 1222, 1223, 1224, 1226, 1235, 1236], "regexp_lik": 1316, "region": [39, 149, 317], "regist": [1, 51, 52, 53, 54, 166, 168, 264, 317, 796, 868, 909, 913, 1304, 1305, 1307, 1308, 1309, 1310, 1323, 1325], "register_dataframe_namespac": [1, 52, 53, 54], "register_expr_namespac": [1, 51, 53, 54], "register_glob": [1306, 1308, 1310, 1323], "register_lazyframe_namespac": [1, 51, 52, 54], "register_mani": [1306, 1307, 1310], "register_plugin": 796, "register_plugin_funct": [796, 913], "register_series_namespac": [1, 51, 52, 53], "registr": [264, 317, 775, 808, 868, 909, 1310, 1323], "regrid": [484, 796], "regular": [128, 220, 250, 251, 287, 294, 317, 460, 647, 648, 649, 653, 655, 656, 657, 658, 659, 668, 669, 670, 724, 744, 792, 796, 883, 909, 915, 1214, 1215, 1216, 1220, 1222, 1223, 1224, 1225, 1226, 1235, 1236, 1237, 1321], "reinterpret": [796, 1295], "rel": [39, 136, 137, 148, 149, 156, 157, 158, 159, 317, 431, 456, 458, 459, 710, 796, 1030, 1058, 1060, 1061, 1284, 1295], "relat": [135, 172, 668, 669, 915, 1235, 1236, 1311], "releas": [57, 549, 796, 818, 909, 1326], "release_year": 1304, "relev": 58, "reliabl": [87, 88], "remain": [133, 134, 147, 191, 194, 199, 242, 317, 407, 408, 466, 511, 604, 674, 675, 796, 825, 831, 845, 909, 1002, 1003, 1057, 1068, 1113, 1177, 1241, 1242, 1295, 1310], "remaind": [675, 1242, 1317], "remap": 90, "remot": [133, 134, 139, 141], "remov": [4, 133, 134, 147, 176, 189, 272, 317, 460, 574, 677, 678, 679, 680, 681, 744, 796, 824, 909, 1244, 1245, 1246, 1247, 1248, 1271, 1295, 1325], "removes_pronoun": 670, "renam": [1, 123, 133, 134, 170, 207, 255, 256, 291, 292, 296, 298, 317, 328, 472, 566, 567, 573, 574, 575, 576, 578, 580, 581, 695, 697, 774, 778, 796, 834, 860, 861, 879, 880, 885, 887, 909, 921, 1226, 1263, 1272, 1295, 1323], "rename_field": [674, 675, 1241, 1242], "render": [865, 909], "render_as_str": 135, "reoconstruct": [252, 317], "repeat": [139, 150, 601, 603, 768, 787, 796], "repeat_bi": 796, "replac": [37, 38, 133, 134, 147, 197, 198, 247, 281, 284, 291, 292, 317, 320, 413, 434, 464, 548, 549, 605, 669, 670, 685, 796, 829, 875, 879, 880, 909, 1008, 1033, 1066, 1178, 1196, 1198, 1236, 1237, 1252, 1295, 1300, 1316], "replace_al": [605, 668, 796, 1177, 1178, 1235, 1295], "replace_column": 317, "replace_strict": [604, 796, 1177, 1295], "replace_time_zon": [410, 416, 418, 1010, 1011, 1037], "replace_with": [670, 1237], "replic": [703, 796, 1278, 1295], "report": 135, "repr": 127, "repres": [36, 39, 45, 64, 65, 67, 76, 80, 85, 120, 122, 124, 125, 126, 135, 242, 264, 265, 274, 275, 288, 295, 317, 470, 493, 494, 536, 542, 548, 645, 660, 665, 668, 669, 672, 683, 711, 714, 728, 730, 742, 744, 756, 757, 758, 767, 772, 773, 777, 785, 792, 796, 868, 869, 877, 909, 915, 1196, 1212, 1227, 1232, 1235, 1236, 1239, 1250, 1276, 1285, 1295, 1323], "represent": [10, 42, 43, 64, 65, 67, 80, 127, 257, 273, 317, 412, 417, 420, 422, 423, 424, 425, 426, 427, 430, 432, 433, 436, 449, 450, 452, 563, 703, 796, 827, 843, 862, 909, 980, 1007, 1012, 1015, 1016, 1017, 1021, 1022, 1023, 1025, 1026, 1029, 1031, 1032, 1035, 1048, 1049, 1051, 1273, 1278, 1295, 1314], "request": 33, "requested_schema": [175, 918], "requir": [1, 32, 33, 38, 39, 50, 125, 135, 136, 156, 157, 158, 159, 185, 250, 274, 275, 276, 279, 317, 367, 456, 458, 459, 541, 549, 590, 635, 682, 684, 685, 707, 771, 796, 820, 826, 867, 878, 909, 959, 1056, 1058, 1060, 1061, 1143, 1202, 1235, 1249, 1251, 1252, 1276, 1277, 1281, 1295], "require_al": 915, "rerais": [57, 818, 909], "rerun": [196, 317, 1064, 1295], "resampl": [208, 317, 835, 909], "reset": [4, 172], "reset_index": [125, 208, 317, 835, 909], "reshap": [242, 275, 317, 513, 796, 1115, 1295], "resolv": [413, 819, 820, 826, 859, 878, 909], "resourc": [884, 913], "respect": [39, 317, 648, 658, 670, 915, 1215, 1225, 1237, 1279, 1295], "respons": [136, 234, 317, 850, 909], "rest": [690, 1257], "restor": [172, 317, 320, 1295, 1300], "restore_default": 172, "restrict": [30, 675, 1242], "result": [13, 36, 42, 43, 44, 45, 46, 47, 48, 50, 58, 124, 125, 126, 135, 136, 137, 138, 147, 150, 152, 153, 167, 196, 199, 208, 209, 222, 223, 224, 238, 242, 249, 252, 257, 258, 260, 274, 275, 276, 287, 294, 296, 302, 317, 409, 435, 437, 440, 448, 456, 457, 458, 459, 463, 470, 479, 486, 498, 539, 540, 548, 549, 563, 590, 595, 597, 604, 605, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 633, 634, 654, 669, 673, 674, 685, 706, 710, 732, 733, 737, 739, 740, 741, 742, 756, 757, 768, 771, 772, 773, 775, 787, 796, 813, 817, 822, 831, 835, 839, 840, 841, 845, 854, 858, 862, 863, 864, 883, 885, 891, 902, 903, 909, 915, 924, 1034, 1036, 1039, 1047, 1058, 1060, 1061, 1064, 1065, 1079, 1085, 1100, 1141, 1150, 1169, 1171, 1177, 1178, 1179, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1199, 1201, 1221, 1240, 1241, 1252, 1276, 1277, 1284, 1295, 1305, 1311, 1323, 1324, 1326], "resultset": 135, "retri": [143, 145, 147, 150, 151, 152], "retriev": [203, 274, 317, 347, 348, 505, 506, 693, 767, 939, 940, 1107, 1108, 1260, 1274, 1295, 1311], "return": [1, 5, 6, 30, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 98, 101, 109, 117, 120, 122, 123, 124, 125, 126, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 169, 170, 174, 177, 179, 181, 184, 185, 186, 190, 192, 194, 195, 196, 197, 198, 200, 201, 202, 203, 206, 207, 208, 210, 211, 212, 216, 218, 219, 220, 221, 222, 225, 226, 227, 229, 231, 236, 237, 238, 240, 241, 242, 246, 249, 250, 251, 252, 253, 257, 264, 267, 268, 274, 275, 276, 279, 280, 281, 282, 287, 290, 291, 292, 298, 300, 302, 303, 306, 311, 317, 329, 331, 334, 335, 336, 337, 338, 339, 342, 343, 347, 348, 349, 351, 353, 354, 365, 370, 371, 372, 373, 374, 375, 385, 386, 392, 393, 394, 395, 396, 402, 403, 409, 410, 412, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 457, 462, 470, 473, 474, 476, 480, 481, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 502, 505, 506, 508, 513, 515, 517, 518, 519, 521, 528, 538, 539, 546, 548, 549, 561, 563, 564, 565, 570, 594, 597, 599, 603, 604, 605, 606, 608, 609, 631, 632, 637, 638, 639, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 663, 664, 665, 666, 667, 671, 672, 673, 674, 675, 683, 687, 692, 700, 701, 702, 704, 705, 706, 708, 709, 710, 713, 714, 719, 720, 721, 722, 723, 724, 729, 731, 736, 737, 738, 739, 740, 741, 742, 745, 748, 750, 752, 753, 754, 755, 756, 757, 758, 768, 771, 774, 775, 778, 781, 782, 783, 784, 786, 787, 796, 812, 815, 817, 818, 820, 821, 822, 826, 827, 833, 835, 836, 839, 843, 844, 845, 853, 854, 856, 858, 862, 865, 871, 872, 873, 878, 879, 880, 887, 889, 891, 895, 900, 902, 909, 913, 914, 915, 917, 919, 922, 923, 924, 932, 933, 935, 936, 937, 938, 939, 940, 941, 943, 945, 946, 957, 959, 961, 962, 963, 965, 976, 979, 981, 985, 991, 992, 998, 999, 1004, 1005, 1007, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1057, 1059, 1063, 1064, 1069, 1073, 1080, 1081, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1099, 1101, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1115, 1117, 1119, 1120, 1121, 1123, 1130, 1140, 1141, 1148, 1150, 1155, 1164, 1171, 1177, 1178, 1179, 1180, 1181, 1182, 1195, 1197, 1205, 1213, 1214, 1216, 1217, 1218, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1238, 1239, 1240, 1241, 1242, 1250, 1254, 1259, 1267, 1270, 1277, 1280, 1282, 1283, 1284, 1286, 1295, 1304, 1305, 1309, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1321, 1323, 1324, 1325, 1326], "return_as_str": [206, 317, 565], "return_dtyp": [39, 227, 317, 548, 549, 604, 605, 713, 757, 758, 796, 1150, 1177, 1178, 1295], "return_typ": [274, 279, 317], "returns_scalar": [548, 549, 758, 796, 913], "reus": [56, 57, 817, 818, 827, 854, 865, 909], "rev": [224, 317, 841, 909], "revers": [179, 194, 280, 317, 386, 396, 397, 398, 399, 400, 574, 576, 578, 705, 731, 796, 812, 872, 909, 992, 993, 994, 995, 996, 1295, 1313, 1316], "reverse_": 576, "reverse_a": 576, "reverse_b": 576, "revert": [7, 9, 10], "rhap": 658, "rhapsodi": 658, "right": [9, 10, 15, 16, 18, 27, 39, 66, 133, 134, 156, 157, 158, 159, 208, 222, 223, 249, 286, 317, 402, 456, 457, 458, 459, 486, 529, 530, 531, 532, 597, 610, 613, 615, 617, 619, 621, 624, 626, 628, 632, 640, 725, 737, 738, 740, 741, 783, 784, 796, 835, 839, 840, 858, 876, 909, 998, 1058, 1059, 1060, 1061, 1085, 1131, 1132, 1133, 1134, 1171, 1197, 1208, 1295, 1311, 1316], "right_on": [222, 223, 286, 317, 839, 840, 876, 909], "rightmost": [632, 796, 1197, 1295, 1318], "rld": [677, 679, 1246], "rle": [609, 796, 1182, 1295], "rle_id": [608, 796, 1295], "rle_id_a": [609, 796], "rle_id_ab": [609, 796], "rmm": 884, "rn": [133, 134, 147], "role": [32, 136], "roll": [208, 317, 409, 428, 429, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 726, 772, 773, 796, 835, 909, 1004, 1027, 1028, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1295], "rollback": [429, 1028], "rolled_forward": 409, "rollforward": [428, 1027], "rolling_map": [796, 1295], "rolling_max": [796, 1295], "rolling_max_bi": 796, "rolling_mean": [796, 1295], "rolling_mean_bi": 796, "rolling_median": [796, 1295], "rolling_median_bi": 796, "rolling_min": [796, 1295], "rolling_min_bi": 796, "rolling_quantil": [796, 1295], "rolling_quantile_bi": 796, "rolling_row_max": [613, 796], "rolling_row_mean": [615, 796], "rolling_row_median": [617, 796], "rolling_row_min": [619, 796], "rolling_row_quantil": [621, 796], "rolling_row_std": [624, 796], "rolling_row_sum": [626, 796], "rolling_row_var": [628, 796], "rolling_skew": [796, 1295], "rolling_std": [796, 1295], "rolling_std_bi": 796, "rolling_sum": [611, 796, 1183, 1295], "rolling_sum_bi": 796, "rolling_var": [796, 1295], "rolling_var_bi": 796, "rollinggroupbi": [249, 317], "rollinginterpolationmethod": [187, 244, 309, 317, 598, 620, 621, 769, 796, 822, 855, 898, 909, 999, 1172, 1188, 1295], "ronaldo": [655, 1222], "root": [137, 148, 389, 562, 573, 574, 576, 578, 580, 581, 644, 795, 796, 982, 1211, 1295, 1317], "round": [20, 39, 52, 127, 135, 317, 390, 394, 469, 630, 701, 796, 983, 1071, 1194, 1295, 1316], "round_sig_fig": [796, 1295], "round_str": 1034, "round_td": 1034, "rounded_corn": 20, "row": [14, 20, 25, 36, 37, 39, 44, 45, 48, 50, 51, 53, 58, 95, 101, 109, 117, 123, 124, 125, 126, 127, 130, 133, 134, 135, 138, 139, 141, 142, 143, 144, 145, 147, 150, 151, 152, 153, 156, 157, 163, 177, 179, 181, 191, 196, 199, 201, 202, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 220, 221, 222, 223, 224, 226, 227, 233, 238, 242, 249, 252, 253, 262, 268, 271, 273, 274, 279, 280, 282, 284, 285, 286, 293, 294, 298, 300, 302, 303, 311, 317, 321, 342, 343, 351, 366, 386, 462, 470, 474, 480, 502, 513, 540, 590, 591, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 636, 641, 643, 654, 662, 700, 705, 719, 722, 727, 729, 746, 750, 752, 753, 755, 770, 772, 773, 781, 786, 796, 812, 815, 825, 831, 832, 833, 835, 836, 839, 840, 841, 842, 844, 845, 849, 866, 871, 872, 873, 875, 876, 882, 883, 887, 889, 891, 892, 900, 909, 919, 934, 943, 1063, 1064, 1073, 1080, 1104, 1115, 1166, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1209, 1221, 1229, 1267, 1295, 1304, 1311, 1313, 1324, 1326], "row_group": [145, 152], "row_group_s": [44, 48, 317, 909], "row_height": [39, 317], "row_index": [39, 317], "row_index_nam": [133, 134, 139, 141, 143, 145, 147, 150, 151, 152], "row_index_offset": [133, 134, 139, 141, 143, 145, 147, 150, 151, 152], "row_nr": [293, 317, 882, 909], "row_tot": [39, 317], "rowname_col": [317, 321], "rows_by_kei": [220, 251, 317], "rowserror": [250, 317], "rowtotalsdefinit": [39, 317], "rpc": 135, "rstrip": 574, "rtol": [156, 157, 158, 159], "rtrim": 1316, "ru": 1318, "rule": [133, 145, 147, 152, 201, 317, 648, 670, 685, 1215, 1237, 1252], "run": [45, 46, 47, 48, 56, 57, 65, 135, 163, 166, 167, 168, 207, 225, 227, 256, 282, 292, 303, 317, 401, 512, 548, 549, 608, 609, 665, 774, 796, 817, 818, 827, 834, 845, 849, 854, 861, 865, 873, 880, 884, 909, 915, 997, 1114, 1150, 1181, 1182, 1232, 1295, 1323, 1326], "runtimeerror": [275, 317, 1276, 1295], "rust": [36, 44, 45, 91, 103, 139, 141, 145, 227, 303, 317, 657, 909, 913, 1150, 1224, 1295], "s1": [49, 87, 88, 158, 159, 201, 317, 958, 1055, 1056, 1075, 1099, 1109, 1142, 1162, 1174, 1286, 1295], "s2": [1, 49, 87, 88, 158, 159, 201, 317, 958, 984, 1001, 1055, 1056, 1075, 1090, 1099, 1109, 1142, 1156, 1162, 1174, 1286, 1295], "s3": [1, 38, 137, 148, 149, 152, 153, 317, 958, 1142, 1295], "s_bar": 1313, "s_dt": [1318, 1319], "s_dt1": 1318, "s_dt2": 1318, "s_foo": 1313, "s_from_str_repr": [1273, 1295], "s_head_5": 660, "s_head_n": 660, "s_tail_5": 683, "s_tail_n": 683, "s_tm": [1318, 1319], "safe": [602, 796, 1175, 1295], "sale": [590, 796], "sam": 12, "same": [20, 38, 39, 49, 50, 56, 57, 58, 87, 88, 104, 139, 147, 156, 157, 158, 159, 161, 172, 199, 207, 227, 242, 251, 252, 263, 282, 291, 292, 296, 303, 317, 325, 332, 365, 407, 408, 466, 470, 472, 473, 476, 539, 553, 559, 590, 604, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 636, 643, 654, 664, 695, 792, 796, 817, 818, 831, 834, 843, 845, 867, 873, 879, 880, 885, 909, 915, 920, 957, 1002, 1003, 1008, 1141, 1150, 1177, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1221, 1231, 1286, 1295, 1309, 1311, 1319], "samoa": [410, 1005], "sampl": [133, 134, 303, 317, 636, 640, 796, 892, 1208, 1295, 1312], "sample_s": [133, 134], "sampled_from": 1326, "sandwich": [204, 317], "sat": [317, 320], "satisfi": [486, 796, 1085, 1295], "saturdai": [208, 317, 835, 909], "save": [2, 3, 6, 208, 223, 249, 287, 317, 410, 418, 431, 435, 448, 610, 613, 615, 617, 619, 621, 624, 626, 628, 737, 738, 740, 741, 742, 783, 784, 792, 796, 808, 835, 840, 858, 909, 1013, 1030, 1034, 1047], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [177, 218, 227, 250, 317, 548, 632, 660, 665, 672, 683, 756, 758, 796, 913, 919, 1099, 1197, 1227, 1232, 1239, 1250, 1295], "scale": [28, 66, 194, 317, 374, 549, 594, 686, 796, 915, 1057, 1253, 1295], "scale_negative_even": [594, 796], "scan": [123, 126, 133, 134, 135, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 317, 662, 909, 1229], "scan_csv": [45, 46, 47, 48, 133, 134, 909], "scan_parquet": [145, 153], "scan_pyarrow_dataset": [145, 152], "scansourc": [145, 152], "scatter": [317, 320, 1295], "scenario": 1295, "schedul": [57, 818, 909], "schema": [0, 1, 14, 28, 34, 37, 38, 51, 52, 53, 58, 95, 112, 113, 120, 122, 123, 124, 126, 130, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 150, 151, 152, 181, 182, 183, 189, 192, 194, 221, 225, 227, 234, 238, 246, 275, 279, 317, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 416, 539, 540, 549, 560, 575, 577, 579, 662, 713, 778, 796, 808, 815, 816, 819, 820, 824, 826, 845, 850, 856, 878, 892, 909, 915, 987, 1229, 1295, 1304], "schema_mod": [38, 317], "schema_overrid": [120, 122, 123, 124, 125, 126, 133, 134, 135, 136, 138, 142, 143, 144, 147, 151, 221, 275, 317, 909, 915], "schemadefinit": [120, 122, 123, 124, 126, 142, 143, 151, 317, 909], "schemadict": [79, 120, 122, 123, 124, 125, 126, 133, 135, 136, 138, 144, 145, 147, 150, 152, 317, 778, 845, 892, 909], "schemainitdatatyp": 914, "schindler": 1304, "scientif": [11, 36, 45, 317, 909], "scikit": [279, 317], "scipi": [498, 640, 796, 1100, 1208, 1295], "scope": [33, 172, 807, 915, 1307, 1310, 1323], "score": [39, 242, 317], "script": [317, 320, 1295, 1300], "scroll": [39, 317], "sdiff": 531, "search": [223, 317, 540, 648, 658, 670, 840, 867, 909, 1215, 1225, 1237], "search_sort": [796, 1295], "searchsortedsid": [632, 796, 1197, 1295], "searchstrategi": [160, 162, 163, 164, 165, 167], "season": [668, 669], "sec": [1319, 1326], "second": [36, 45, 143, 147, 150, 151, 156, 157, 158, 159, 208, 223, 249, 287, 317, 420, 423, 425, 426, 430, 431, 435, 447, 448, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 668, 669, 682, 685, 739, 740, 741, 742, 782, 783, 784, 786, 796, 835, 840, 858, 909, 915, 1030, 1034, 1046, 1047, 1059, 1235, 1236, 1249, 1252, 1295, 1318, 1319, 1324, 1326], "second_part": [674, 675, 1241, 1242], "seconds_diff": 447, "secret": [149, 152], "section": [242, 317, 647, 655, 656, 659, 668, 669, 737, 738, 740, 741, 783, 784, 1214, 1222, 1223, 1226, 1235, 1236], "secur": [404, 796, 823, 909], "see": [38, 39, 40, 41, 56, 57, 65, 135, 136, 137, 139, 141, 143, 145, 147, 148, 149, 150, 151, 152, 156, 157, 158, 159, 163, 167, 174, 185, 199, 208, 222, 241, 242, 317, 321, 379, 380, 382, 383, 391, 465, 498, 548, 640, 647, 655, 656, 659, 660, 668, 669, 683, 737, 738, 740, 741, 770, 783, 784, 792, 796, 817, 818, 831, 835, 884, 909, 913, 915, 917, 970, 971, 973, 974, 980, 986, 1100, 1208, 1214, 1222, 1223, 1226, 1227, 1235, 1236, 1250, 1295, 1326], "seed": [154, 209, 253, 317, 479, 528, 600, 631, 636, 796, 1079, 1130, 1173, 1195, 1204, 1295], "seed_1": [209, 317, 479, 796, 1079, 1295], "seed_2": [209, 317, 479, 796, 1079, 1295], "seed_3": [209, 317, 479, 796, 1079, 1295], "seen_group": 134, "select": [1, 8, 37, 50, 51, 52, 53, 92, 131, 133, 134, 135, 136, 137, 139, 141, 145, 147, 153, 162, 177, 178, 218, 219, 223, 227, 238, 241, 250, 256, 262, 264, 277, 283, 287, 294, 317, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 351, 356, 357, 358, 363, 364, 365, 366, 367, 368, 369, 370, 373, 375, 385, 386, 388, 389, 390, 392, 393, 394, 395, 401, 403, 405, 406, 407, 408, 411, 413, 414, 422, 428, 429, 431, 434, 441, 442, 443, 444, 445, 446, 447, 448, 451, 453, 456, 458, 459, 460, 461, 462, 463, 467, 469, 471, 474, 478, 479, 480, 481, 482, 483, 484, 487, 488, 491, 497, 498, 499, 501, 502, 512, 513, 540, 543, 544, 545, 546, 548, 549, 550, 551, 552, 556, 568, 570, 572, 573, 575, 577, 579, 582, 583, 587, 588, 589, 590, 592, 593, 596, 598, 599, 600, 601, 602, 603, 606, 607, 608, 611, 622, 629, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 654, 655, 656, 657, 658, 659, 661, 682, 693, 695, 696, 699, 700, 701, 702, 704, 705, 707, 708, 709, 710, 711, 714, 716, 718, 721, 722, 723, 726, 728, 729, 730, 731, 734, 741, 742, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 759, 761, 763, 764, 766, 767, 770, 771, 775, 776, 777, 778, 779, 781, 785, 792, 796, 811, 817, 820, 840, 853, 861, 866, 868, 874, 881, 883, 884, 909, 915, 919, 1033, 1072, 1114, 1196, 1198, 1209, 1230, 1249, 1295, 1304, 1305, 1306, 1307, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325], "select_from": [162, 165, 167], "select_seq": [317, 909], "selector": [0, 39, 180, 189, 191, 195, 233, 240, 242, 263, 272, 274, 279, 282, 284, 285, 317, 321, 460, 556, 796, 808, 814, 824, 825, 828, 849, 867, 873, 875, 909], "selectortyp": [39, 317, 915], "self": [1, 51, 52, 53, 54, 56, 57, 264, 295, 317, 775, 796, 817, 818, 827, 854, 865, 868, 881, 909, 924, 968, 969, 970, 971, 973, 974, 977, 987, 992, 1064, 1068, 1082, 1148, 1150, 1163, 1167, 1168, 1174, 1177, 1178, 1196, 1198, 1199, 1210, 1283, 1286, 1295, 1306, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1323], "semi": [130, 222, 317, 839, 909, 1311], "semigraph": 20, "sens": [133, 139, 141, 234, 287, 317, 590, 796, 850, 909], "sensit": [647, 656, 659, 668, 669, 1214, 1223, 1226, 1235, 1236], "sep": 130, "separ": [9, 10, 24, 27, 35, 36, 45, 129, 130, 132, 133, 134, 138, 147, 240, 242, 272, 281, 283, 317, 351, 354, 513, 519, 549, 654, 727, 732, 733, 796, 874, 909, 943, 946, 1115, 1121, 1221, 1265, 1271, 1295, 1318], "seq": 26, "seq1": 26, "seq2": 26, "sequenc": [39, 44, 50, 79, 120, 122, 123, 124, 126, 130, 133, 134, 135, 138, 142, 143, 144, 147, 151, 161, 162, 163, 164, 165, 179, 187, 195, 196, 222, 223, 233, 238, 240, 241, 242, 252, 263, 272, 274, 279, 280, 284, 285, 286, 287, 317, 366, 386, 402, 473, 490, 540, 548, 594, 597, 604, 605, 643, 670, 680, 681, 695, 705, 722, 732, 733, 746, 748, 757, 758, 767, 770, 776, 796, 812, 822, 828, 839, 840, 849, 853, 867, 872, 875, 876, 909, 915, 958, 998, 999, 1064, 1142, 1171, 1177, 1178, 1237, 1263, 1295], "sequenti": [56, 57, 256, 292, 317, 817, 818, 827, 854, 861, 865, 880, 909], "ser": [1010, 1011, 1037], "seri": [0, 1, 11, 25, 39, 49, 51, 52, 53, 54, 58, 59, 68, 79, 87, 88, 97, 120, 122, 125, 127, 158, 159, 163, 177, 190, 199, 201, 203, 205, 208, 209, 212, 213, 215, 217, 219, 229, 231, 236, 247, 249, 253, 267, 270, 273, 275, 277, 278, 297, 317, 332, 343, 366, 370, 388, 390, 434, 463, 466, 469, 473, 474, 483, 488, 490, 491, 493, 494, 495, 496, 507, 513, 515, 540, 546, 548, 549, 600, 601, 602, 603, 604, 605, 610, 611, 622, 633, 635, 660, 670, 682, 683, 684, 685, 689, 693, 704, 709, 719, 723, 732, 733, 737, 738, 740, 741, 746, 748, 752, 753, 756, 757, 758, 768, 770, 771, 774, 775, 778, 783, 784, 787, 796, 808, 831, 835, 858, 886, 909, 913, 1287, 1289, 1291, 1294, 1296, 1299, 1300, 1301, 1302, 1303, 1305, 1307, 1323, 1326], "serial": [42, 43, 188, 317, 404, 567, 796, 823, 909], "serializ": [796, 913], "serializationformat": [188, 257, 317, 404, 563, 796, 823, 862, 909], "seriesplot": [1295, 1300], "server": [37, 135, 136, 317], "servic": 32, "service_account": [137, 148], "service_account_json_absolute_path": [137, 148], "session": 135, "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 56, 57, 62, 65, 66, 68, 121, 122, 123, 126, 133, 134, 135, 138, 139, 141, 142, 143, 144, 145, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 176, 184, 191, 200, 203, 207, 209, 220, 223, 231, 233, 251, 253, 255, 257, 262, 267, 272, 274, 275, 279, 281, 282, 284, 285, 286, 291, 317, 329, 331, 353, 354, 366, 377, 379, 380, 382, 383, 391, 402, 434, 451, 479, 490, 515, 517, 519, 528, 529, 530, 531, 532, 534, 540, 548, 549, 556, 557, 563, 594, 597, 604, 605, 611, 612, 614, 616, 618, 620, 623, 625, 627, 631, 636, 640, 641, 646, 661, 662, 668, 669, 672, 677, 678, 679, 680, 681, 682, 684, 685, 689, 710, 714, 716, 719, 723, 727, 737, 738, 739, 740, 741, 742, 752, 753, 756, 768, 771, 772, 773, 778, 783, 784, 786, 787, 796, 808, 817, 818, 825, 827, 834, 839, 840, 845, 849, 860, 862, 866, 873, 875, 876, 879, 892, 909, 913, 922, 923, 945, 946, 958, 962, 968, 970, 971, 973, 974, 986, 998, 1033, 1050, 1070, 1079, 1090, 1097, 1117, 1119, 1121, 1130, 1131, 1132, 1133, 1134, 1136, 1142, 1150, 1171, 1177, 1178, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1195, 1196, 1197, 1204, 1208, 1209, 1213, 1228, 1229, 1235, 1236, 1239, 1244, 1245, 1246, 1249, 1251, 1252, 1256, 1276, 1284, 1295, 1314, 1322, 1326], "set_": 172, "set_ascii_t": 172, "set_auto_structifi": [255, 291, 317, 860, 879, 909], "set_decimal_separ": 27, "set_environ": 166, "set_except": [57, 818, 909], "set_fmt_float": 30, "set_fmt_str_length": [648, 658, 670, 1215, 1237], "set_index": [208, 317, 835, 909], "set_legend": [39, 317], "set_sort": [249, 287, 317, 610, 796, 858, 909, 1295], "set_stat": 30, "set_streaming_chunk_s": [817, 909], "set_styl": [39, 317], "set_tbl_column_data_type_inlin": 24, "set_tbl_format": 50, "set_tbl_row": 172, "set_tbl_width_char": 670, "set_thousands_separ": 9, "set_titl": [39, 317], "set_verbos": 172, "setosa": [317, 320], "setup": 1326, "sever": [120, 122, 123, 124, 126, 142, 143, 151, 317, 909, 1326], "sfu": 136, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 49, 50, 51, 52, 53, 54, 58, 59, 75, 79, 87, 88, 95, 114, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133, 142, 143, 147, 153, 160, 163, 167, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 201, 202, 203, 205, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 253, 255, 257, 260, 262, 263, 264, 265, 266, 267, 268, 270, 272, 273, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 568, 569, 570, 571, 572, 573, 574, 576, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 796, 811, 812, 814, 815, 817, 818, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 862, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 909, 914, 915, 919, 920, 921, 924, 926, 927, 928, 929, 930, 931, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 976, 977, 978, 980, 982, 983, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1055, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1072, 1073, 1075, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1099, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1155, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1201, 1202, 1204, 1205, 1206, 1207, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1265, 1267, 1268, 1269, 1271, 1272, 1273, 1278, 1280, 1281, 1282, 1283, 1284, 1286, 1295, 1304, 1305, 1306, 1307, 1309, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1323, 1324], "share": [156, 157, 158, 159, 194, 317, 1057, 1295], "shawshank": 1304, "sheet": [39, 138, 144, 317], "sheet1": [39, 317], "sheet_id": [138, 144], "sheet_nam": [138, 144], "sheet_zoom": [39, 317], "sheetnam": [138, 144], "shift": [208, 317, 369, 405, 471, 510, 591, 726, 796, 835, 909, 1000, 1112, 1166, 1295], "short": [156, 158], "shorten": [156, 158], "shorter": [133, 134, 147, 540, 752, 753], "shorthand": [317, 320, 1295, 1300], "should": [10, 37, 39, 44, 45, 46, 47, 48, 58, 120, 122, 124, 126, 130, 137, 138, 142, 143, 147, 151, 153, 160, 161, 163, 167, 189, 220, 223, 227, 250, 251, 252, 263, 271, 272, 283, 303, 317, 327, 401, 404, 451, 457, 460, 493, 494, 512, 549, 563, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 632, 640, 643, 668, 669, 710, 722, 742, 744, 756, 758, 772, 773, 786, 792, 796, 817, 823, 824, 839, 840, 845, 862, 867, 874, 909, 915, 997, 1050, 1059, 1114, 1150, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1197, 1208, 1235, 1236, 1284, 1295, 1305], "show": [30, 39, 187, 191, 206, 225, 239, 317, 481, 564, 796, 822, 825, 854, 865, 909, 1081, 1295, 1309, 1322], "show_graph": [225, 317, 909], "show_plot": [854, 909], "shrink": [261, 317, 635, 796, 1202, 1203, 1295], "shrink_dtyp": [796, 1295], "shrink_to_fit": [317, 1295], "shuffl": [154, 253, 279, 303, 317, 528, 631, 796, 892, 1130, 1195, 1295], "side": [39, 208, 249, 317, 486, 529, 530, 531, 532, 610, 613, 615, 617, 619, 621, 624, 626, 628, 632, 737, 738, 740, 741, 783, 784, 796, 835, 858, 909, 913, 1085, 1131, 1132, 1133, 1134, 1197, 1295], "sign": [64, 65, 67, 71, 72, 73, 74, 80, 431, 602, 668, 669, 692, 796, 915, 1030, 1175, 1235, 1236, 1259, 1295, 1316], "sign_x": 1317, "signed_integ": 915, "signific": [152, 220, 227, 317, 379, 380, 382, 383, 549, 630, 796, 970, 971, 973, 974, 1150, 1194, 1295], "significantli": [138, 227, 303, 317, 1150, 1295, 1326], "silenc": 95, "silent": [687, 1254], "similar": [35, 44, 132, 169, 201, 223, 260, 282, 284, 317, 361, 437, 440, 533, 590, 634, 697, 755, 786, 796, 840, 864, 873, 875, 909, 953, 1036, 1039, 1135, 1201, 1295], "similarli": [39, 123, 208, 223, 249, 287, 317, 431, 435, 448, 610, 613, 615, 617, 619, 621, 624, 626, 628, 737, 738, 740, 741, 783, 784, 796, 835, 840, 858, 909, 1030, 1034, 1047], "simpl": [39, 238, 317], "simpler": [915, 1235], "simpli": [147, 732, 746], "simplifi": [45, 46, 47, 48, 56, 57, 817, 818, 827, 854, 865, 909], "simplify_express": [45, 46, 47, 48, 56, 57, 817, 818, 827, 854, 865, 909], "sin": [796, 1295, 1316], "sinc": [38, 64, 65, 80, 133, 134, 135, 137, 143, 147, 148, 150, 151, 160, 161, 162, 163, 167, 170, 178, 233, 275, 293, 298, 317, 416, 419, 451, 472, 548, 567, 604, 646, 654, 712, 721, 748, 796, 811, 827, 849, 867, 881, 882, 887, 909, 1011, 1014, 1019, 1020, 1050, 1078, 1177, 1213, 1221, 1276, 1295], "sind": 1316, "sine": [336, 337, 548, 638, 639, 796, 928, 929, 1206, 1207, 1295, 1320], "singl": [39, 44, 50, 56, 57, 58, 132, 133, 134, 135, 136, 137, 138, 145, 147, 150, 161, 180, 189, 190, 191, 196, 203, 209, 218, 227, 240, 250, 252, 263, 274, 275, 317, 350, 391, 409, 431, 473, 476, 479, 509, 515, 548, 549, 601, 604, 606, 608, 643, 646, 660, 661, 665, 672, 683, 712, 722, 726, 727, 753, 757, 758, 776, 784, 792, 796, 814, 817, 818, 824, 825, 867, 909, 915, 942, 986, 1004, 1030, 1064, 1079, 1111, 1117, 1174, 1177, 1179, 1181, 1213, 1227, 1228, 1232, 1239, 1250, 1270, 1276, 1295, 1306], "singlecolselector": 177, "singleindexselector": [177, 919], "sinh": [796, 1295], "sink_csv": 909, "sink_ipc": 909, "sink_ndjson": 909, "sink_parquet": 909, "site_id": [317, 321], "six": [632, 796], "size": [14, 44, 48, 133, 134, 135, 160, 161, 162, 163, 167, 169, 194, 285, 317, 606, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 719, 752, 753, 772, 773, 796, 817, 909, 1057, 1179, 1189, 1295, 1326], "sizeunit": [194, 317, 374, 965, 1057, 1295], "skew": [622, 796, 1189, 1295], "skewtest": [640, 796, 1208, 1295], "skip": [133, 134, 138, 145, 147, 152, 223, 285, 317, 840, 909, 1150, 1295, 1311], "skip_empty_lin": 138, "skip_nul": [549, 796, 1150, 1295], "skip_row": [133, 134, 147], "skip_rows_after_head": [133, 134, 147], "sklearn": [279, 317], "slice": [45, 46, 47, 48, 51, 56, 57, 194, 210, 221, 268, 317, 518, 538, 549, 560, 562, 611, 612, 614, 616, 618, 620, 623, 625, 627, 660, 683, 796, 817, 818, 827, 845, 854, 865, 909, 913, 1057, 1080, 1120, 1140, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1227, 1250, 1267, 1295, 1318], "slice_pushdown": [45, 46, 47, 48, 56, 57, 817, 818, 827, 845, 854, 865, 909], "slide": [401, 796, 997, 1295], "slightli": [45, 46, 47, 48, 91, 470, 796, 909, 1319], "slot": [401, 405, 510, 796, 997, 1000, 1112, 1295], "slow": [107, 123, 126, 133, 134, 135, 138, 142, 143, 144, 147, 151, 152, 317, 401, 549, 611, 662, 796, 892, 909, 997, 1183, 1229, 1295], "slower": [124, 126, 138, 207, 227, 240, 287, 303, 317, 549, 758, 796, 834, 892, 909, 1150, 1295], "small": [11, 136, 435, 909, 1326], "smaller": [44, 48, 194, 317, 909, 1057, 1295], "smallest": [179, 280, 317, 385, 386, 705, 796, 812, 872, 909, 976, 1295, 1312, 1315], "smooth": [456, 458, 459, 796, 1058, 1060, 1061, 1295], "snappi": [34, 44, 48, 317, 909], "snapshot": 149, "snapshot_id": 149, "snippet": [825, 909], "snowflak": [135, 136], "snowi": [668, 669], "so": [1, 39, 136, 147, 169, 206, 208, 224, 242, 249, 317, 343, 353, 404, 470, 486, 517, 540, 549, 610, 668, 669, 670, 677, 678, 679, 693, 796, 823, 835, 841, 858, 909, 915, 945, 1119, 1235, 1236, 1237, 1244, 1245, 1246], "softwar": [35, 132, 317], "solut": [37, 317], "some": [14, 30, 39, 49, 88, 123, 133, 134, 135, 147, 176, 191, 242, 252, 275, 317, 321, 668, 669, 792, 825, 909, 1090, 1235, 1236, 1295, 1326], "some_account": [656, 1223], "some_t": 1325, "someth": [548, 796], "sometim": [742, 795], "somewher": [656, 1223], "sort": [50, 51, 179, 208, 223, 234, 241, 242, 249, 258, 280, 287, 300, 311, 317, 342, 385, 386, 457, 466, 549, 590, 610, 633, 643, 704, 705, 710, 712, 722, 737, 740, 758, 796, 812, 827, 835, 840, 850, 853, 854, 858, 863, 865, 872, 889, 900, 909, 915, 934, 976, 1059, 1097, 1199, 1280, 1281, 1284, 1295, 1311, 1324, 1326], "sort_bi": 796, "sort_column": [242, 317], "sorted_asc": [1070, 1295], "sorted_desc": [1070, 1295], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 796, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 909, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1295, 1300, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1323], "source_ac": 127, "source_actor_id": 127, "source_alia": [38, 317], "source_cha": 127, "source_channel_id": 127, "space": [20, 208, 317, 835, 909, 915], "spam": [230, 317, 656, 1223], "span": [456, 458, 459, 796, 1058, 1060, 1061, 1295], "spanner": [317, 321], "spark": [44, 317], "sparklin": [39, 317], "speak": [640, 796, 1208, 1295], "spearman": 728, "speci": [317, 320], "special": [37, 133, 134, 136, 147, 279, 294, 317, 611, 656, 668, 669, 796, 883, 909, 1150, 1183, 1223, 1235, 1236, 1295], "specif": [1, 30, 38, 39, 40, 41, 91, 120, 122, 124, 126, 133, 136, 137, 138, 142, 143, 144, 148, 149, 151, 180, 220, 222, 269, 274, 317, 437, 440, 682, 684, 685, 689, 710, 796, 814, 839, 909, 914, 915, 1036, 1039, 1249, 1251, 1252, 1256, 1270, 1274, 1284, 1295, 1311, 1323, 1326], "specifi": [36, 37, 38, 39, 44, 45, 50, 92, 95, 98, 113, 116, 133, 138, 144, 145, 147, 152, 164, 179, 180, 194, 195, 198, 203, 207, 208, 222, 240, 242, 249, 250, 252, 255, 256, 260, 263, 274, 280, 283, 291, 292, 296, 317, 386, 391, 456, 458, 459, 460, 465, 590, 603, 605, 612, 614, 616, 618, 620, 623, 625, 627, 634, 643, 697, 705, 722, 725, 726, 727, 737, 738, 740, 741, 742, 744, 774, 778, 783, 784, 792, 796, 812, 814, 828, 830, 834, 835, 839, 858, 860, 861, 864, 867, 872, 874, 879, 880, 885, 909, 915, 986, 1057, 1058, 1060, 1061, 1067, 1178, 1201, 1274, 1295, 1311, 1325], "speed": [48, 258, 317, 549, 796, 863, 909, 1326], "speedup": [50, 152, 220, 227, 317, 549, 796, 1150, 1295], "split": [1, 39, 44, 51, 221, 317, 654, 674, 675, 1221, 1241, 1242], "split_by_column_dtyp": 53, "split_inclus": 673, "splitfram": [1, 51], "spreadsheet": [35, 132, 138, 144, 242, 317], "spring": [668, 669], "sql": [0, 37, 110, 111, 119, 135, 136, 222, 260, 317, 361, 533, 634, 755, 776, 796, 808, 864, 909, 953, 1135, 1201, 1295, 1304, 1305, 1307, 1309, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1324, 1325], "sql_expr": 1323, "sqlalchemi": [37, 135, 155, 317], "sqlcontext": [264, 317, 775, 868, 909, 1322], "sqlite": [37, 135, 317], "sqrt": [549, 640, 697, 796, 1150, 1208, 1295, 1316], "sqrt_x": 1317, "squar": [1, 54, 303, 498, 606, 644, 796, 892, 1100, 1179, 1211, 1295, 1317], "st": [32, 1326], "stabil": [209, 317, 479, 796, 1079, 1295], "stabl": [145, 174, 185, 187, 188, 209, 253, 257, 264, 317, 404, 479, 545, 563, 703, 796, 822, 823, 849, 862, 867, 868, 909, 917, 1079, 1278, 1295], "stack": [58, 212, 289, 317, 1305], "stai": [548, 636, 796], "standalon": [161, 915], "standard": [10, 39, 265, 274, 279, 317, 422, 458, 623, 624, 640, 645, 663, 777, 792, 796, 869, 909, 1017, 1055, 1060, 1162, 1208, 1212, 1230, 1295, 1312, 1326], "standardis": [39, 317], "start": [39, 131, 133, 134, 136, 138, 139, 141, 143, 144, 145, 147, 150, 151, 152, 169, 202, 207, 208, 225, 262, 287, 293, 294, 317, 370, 373, 375, 409, 417, 427, 432, 435, 448, 449, 460, 474, 516, 534, 609, 613, 615, 617, 619, 621, 624, 626, 628, 641, 647, 652, 656, 667, 672, 676, 677, 679, 680, 683, 692, 719, 724, 732, 736, 737, 738, 739, 740, 741, 744, 746, 752, 753, 783, 784, 786, 792, 796, 833, 834, 835, 854, 866, 882, 883, 909, 915, 966, 1004, 1006, 1009, 1012, 1014, 1015, 1021, 1023, 1025, 1026, 1029, 1031, 1034, 1038, 1047, 1048, 1073, 1118, 1136, 1182, 1209, 1219, 1223, 1234, 1239, 1243, 1244, 1246, 1250, 1259, 1295, 1311, 1318, 1326], "start_bi": [208, 317, 835, 909], "startbi": [208, 317, 835, 909], "starts_a": 1318, "starts_with": [51, 242, 317, 321, 370, 373, 556, 647, 652, 775, 868, 909, 915, 1219, 1316], "starts_with_expr": 375, "starts_with_lit": 375, "startup": [274, 317], "stat": [498, 640, 796, 1100, 1208, 1295], "state": [4, 5, 103, 732, 808, 827, 854, 865, 909, 1323], "statement": [590, 786, 796, 1309, 1324], "static": [85, 892], "statist": [44, 48, 133, 134, 145, 150, 152, 187, 317, 458, 459, 498, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 640, 796, 822, 909, 999, 1060, 1061, 1100, 1189, 1208, 1295], "std": [187, 317, 623, 624, 796, 822, 909, 999, 1190, 1295], "std_dev": [39, 317], "stddev": 1316, "stddev_samp": 1312, "stdev": [39, 317, 1312], "stdev_samp": 1312, "stdout": [172, 206, 317, 565], "step": [285, 317, 470, 719, 752, 753, 796], "steve": [234, 317, 850, 909], "still": [135, 136], "stock": [317, 320], "stop": [131, 133, 134, 139, 141, 143, 145, 147, 150, 151, 152, 613, 615, 617, 619, 621, 624, 626, 628, 796, 1006, 1009, 1014, 1015, 1021, 1023, 1025, 1029, 1034, 1038], "storag": [38, 133, 137, 139, 141, 143, 145, 147, 148, 149, 150, 151, 152, 317], "storage_opt": [38, 133, 137, 139, 141, 143, 145, 147, 148, 149, 150, 151, 152, 317], "store": [38, 133, 149, 196, 220, 251, 317, 388, 608, 796, 978, 1064, 1181, 1295], "store_id": [590, 796], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 65, 68, 89, 120, 121, 122, 123, 124, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 160, 161, 163, 166, 167, 168, 172, 179, 180, 184, 187, 188, 189, 190, 191, 192, 194, 195, 199, 200, 201, 203, 204, 206, 207, 208, 210, 212, 215, 217, 218, 220, 222, 223, 224, 226, 228, 230, 232, 233, 234, 235, 238, 240, 242, 244, 246, 247, 248, 249, 250, 251, 253, 257, 258, 262, 263, 264, 265, 266, 268, 270, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 326, 327, 328, 349, 354, 366, 370, 371, 372, 373, 375, 386, 388, 396, 402, 404, 406, 414, 431, 434, 435, 437, 440, 448, 457, 460, 466, 468, 472, 473, 476, 483, 486, 507, 508, 517, 518, 519, 534, 538, 540, 549, 560, 562, 563, 564, 565, 567, 574, 575, 576, 577, 578, 579, 580, 581, 587, 590, 594, 597, 603, 604, 605, 607, 609, 610, 613, 615, 617, 619, 621, 624, 626, 628, 635, 642, 643, 693, 694, 695, 696, 705, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 726, 727, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 792, 796, 803, 812, 814, 817, 818, 820, 822, 823, 824, 825, 827, 828, 831, 834, 835, 837, 839, 840, 841, 849, 850, 853, 854, 856, 857, 858, 862, 863, 865, 866, 867, 868, 872, 873, 874, 875, 876, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 909, 913, 914, 915, 921, 941, 946, 958, 963, 977, 978, 998, 999, 1009, 1030, 1033, 1034, 1036, 1039, 1047, 1059, 1067, 1070, 1109, 1110, 1121, 1142, 1158, 1159, 1160, 1171, 1176, 1177, 1178, 1198, 1260, 1262, 1263, 1271, 1272, 1273, 1274, 1284, 1295, 1301, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1315, 1318, 1319, 1323, 1324, 1326], "str_date": 1318, "str_timestamp": 1318, "strategi": [36, 45, 50, 58, 133, 152, 160, 161, 162, 163, 164, 165, 167, 198, 208, 222, 223, 237, 286, 317, 465, 540, 549, 796, 830, 835, 839, 840, 876, 909, 1067, 1142, 1295], "stream": [14, 40, 41, 45, 46, 47, 48, 56, 57, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 207, 222, 282, 317, 548, 796, 817, 818, 827, 834, 839, 845, 849, 854, 865, 867, 873, 909], "streamabl": [845, 849, 875, 909], "strftime": [91, 440, 1039, 1316, 1318], "strict": [122, 123, 126, 130, 180, 189, 246, 317, 371, 387, 647, 650, 659, 682, 684, 685, 687, 689, 796, 814, 824, 856, 909, 915, 962, 977, 1214, 1217, 1226, 1249, 1251, 1252, 1254, 1256, 1295], "strictli": [36, 45, 49, 88, 317, 909], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 34, 36, 37, 38, 39, 42, 43, 45, 49, 62, 65, 68, 79, 86, 87, 88, 89, 91, 97, 115, 123, 127, 130, 133, 134, 135, 136, 147, 156, 157, 158, 159, 160, 167, 171, 179, 180, 183, 188, 192, 194, 201, 203, 206, 207, 208, 223, 240, 242, 249, 252, 254, 255, 256, 257, 263, 273, 274, 280, 281, 285, 287, 291, 292, 296, 317, 326, 349, 354, 371, 372, 373, 386, 404, 431, 435, 437, 440, 448, 457, 460, 468, 472, 486, 519, 563, 565, 590, 594, 604, 605, 610, 613, 615, 617, 619, 621, 624, 626, 628, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 697, 705, 713, 715, 717, 722, 725, 726, 727, 735, 737, 738, 740, 741, 747, 760, 762, 765, 774, 778, 780, 783, 784, 786, 792, 796, 808, 812, 814, 819, 823, 826, 827, 834, 835, 840, 858, 859, 860, 861, 862, 867, 872, 879, 880, 885, 909, 914, 915, 946, 962, 963, 964, 979, 1030, 1034, 1036, 1039, 1047, 1059, 1085, 1121, 1177, 1178, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1262, 1273, 1274, 1295, 1304, 1305, 1313, 1316, 1319, 1322, 1326], "stringcach": [87, 88, 222, 317, 808, 979, 980], "stringio": [142, 143, 472, 796], "strings_hex": 651, "strip": [28, 677, 678, 679, 680, 681, 1244, 1245, 1246, 1318], "strip_chars_end": [679, 681], "strip_chars_start": [678, 680], "strip_prefix": [679, 681], "strip_suffix": [678, 680], "strongli": [39, 169, 227, 250, 303, 317, 549, 796, 1150, 1295], "strpo": 1316, "strpost": 1318, "strptime": [249, 317, 434, 610, 796, 858, 909, 1033, 1316], "struct": [8, 116, 127, 238, 255, 278, 283, 291, 317, 366, 402, 481, 540, 548, 549, 575, 577, 579, 597, 608, 609, 657, 662, 674, 675, 703, 710, 732, 733, 735, 757, 796, 860, 874, 879, 892, 909, 958, 998, 1142, 1150, 1171, 1181, 1224, 1229, 1241, 1242, 1276, 1278, 1295], "struct_col": [693, 695, 696], "struct_seri": 892, "structarrai": [194, 317, 1057, 1295], "structfieldnotfounderror": 695, "structur": [39, 40, 41, 97, 100, 114, 130, 196, 241, 252, 269, 275, 317, 594, 796, 853, 909, 1064, 1270, 1295, 1323], "student": [242, 317], "style": [7, 20, 39, 135, 242, 317], "sub": [303, 347, 348, 349, 352, 353, 354, 355, 356, 357, 358, 359, 363, 364, 368, 519, 526, 796, 939, 940, 941, 944, 945, 946, 947, 948, 949, 950, 951, 955, 956, 960, 1121, 1128], "subarrai": [345, 346, 937, 938], "subclass": [1, 317], "subexpress": [56, 57, 817, 818, 827, 854, 865, 909], "subinterv": 1312, "subject": [44, 242, 317], "sublist": [353, 505, 506, 508, 510, 514, 515, 516, 517, 518, 519, 520, 529, 534, 538, 540, 945, 1090, 1107, 1108, 1110, 1112, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1131, 1136, 1140, 1142, 1295], "subplan": [56, 57, 817, 818, 827, 854, 865, 909], "subsequ": [39, 145, 152, 245, 276, 317, 540, 775, 786, 827, 909, 1277, 1295, 1310], "subset": [191, 238, 282, 317, 825, 873, 909], "substr": [370, 373, 375, 647, 652, 659, 668, 669, 672, 673, 674, 675, 676, 915, 961, 964, 966, 1214, 1219, 1226, 1235, 1236, 1239, 1240, 1241, 1242, 1243, 1316], "subtl": [39, 317], "subtli": [470, 796], "subtract": [498, 698, 796, 1100, 1295], "succe": [133, 134, 147], "success": [649, 656, 1216, 1223], "successfulli": [817, 909], "suffix": [222, 223, 224, 255, 291, 296, 317, 328, 373, 386, 493, 494, 495, 496, 554, 574, 576, 579, 580, 581, 607, 652, 678, 681, 705, 796, 839, 840, 841, 860, 879, 881, 885, 909, 915, 964, 1219, 1248], "suffix_field": [575, 577], "sugar": [286, 317, 604, 605, 670, 714, 716, 718, 729, 731, 734, 744, 749, 750, 751, 759, 761, 763, 764, 766, 768, 769, 774, 777, 779, 781, 785, 787, 796, 876, 909, 1177, 1178, 1211, 1237, 1295], "suitabl": [50, 58, 135, 161, 227, 317, 549, 632, 796, 1150, 1197, 1295], "sum": [39, 194, 201, 207, 208, 218, 242, 249, 267, 296, 317, 399, 400, 404, 453, 466, 540, 549, 560, 562, 563, 564, 565, 566, 604, 605, 610, 625, 626, 712, 714, 732, 734, 735, 746, 758, 770, 780, 796, 817, 818, 823, 827, 834, 835, 852, 854, 858, 862, 865, 885, 909, 913, 915, 995, 996, 1053, 1057, 1191, 1295, 1304, 1311, 1313, 1316, 1323], "sum_": [640, 796, 1208, 1295], "sum_a": [249, 317, 610, 796, 858, 909], "sum_horizont": [50, 317, 779], "summari": [187, 317, 822, 909, 999, 1295, 1311], "summer": [668, 669], "sun": [317, 320, 682, 1249], "sundai": [208, 317, 409, 437, 440, 450, 724, 835, 909, 1004, 1036, 1039, 1049], "sunni": [668, 669, 1235, 1236], "supercast": [201, 317], "supertyp": [58, 198, 275, 279, 317, 332, 726, 796, 830, 909, 913, 1295], "suppli": [37, 39, 120, 122, 123, 124, 126, 135, 142, 143, 151, 199, 250, 274, 317, 466, 594, 796, 831, 909, 1274, 1295], "support": [1, 37, 38, 39, 44, 58, 120, 121, 122, 123, 124, 125, 126, 127, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 160, 164, 167, 172, 220, 221, 222, 223, 251, 252, 262, 263, 271, 276, 279, 317, 457, 534, 590, 604, 605, 641, 643, 648, 658, 660, 668, 669, 670, 672, 683, 792, 796, 802, 817, 839, 840, 866, 867, 909, 915, 1059, 1136, 1177, 1178, 1209, 1215, 1225, 1227, 1235, 1236, 1237, 1239, 1250, 1277, 1279, 1295, 1299, 1313, 1318, 1319, 1321, 1322, 1323], "supportsinterchang": 121, "suppos": [177, 242, 317, 549, 796, 1150, 1295], "sure": [58, 120, 125, 133, 134, 137, 139, 141, 145, 245, 317, 796, 913], "surreal": 135, "surreal_query_to_fram": 135, "surrealdb": 135, "surrealhttp": 135, "surrealql": 135, "suscept": 909, "swap": [856, 909], "swim": 727, "switch": [410, 817, 909, 1005], "sy": 172, "sydnei": 739, "symbol": [35, 36, 45, 317, 796, 909], "symmetr": [531, 915, 1133], "symmetri": [820, 826, 859, 878, 909], "synchron": 903, "syntact": [286, 317, 604, 605, 670, 714, 716, 718, 729, 731, 734, 744, 749, 750, 751, 759, 761, 763, 764, 766, 768, 769, 774, 777, 779, 781, 785, 787, 796, 876, 909, 1177, 1178, 1211, 1237, 1295], "syntax": [39, 111, 199, 227, 238, 317, 564, 647, 655, 656, 659, 668, 669, 752, 753, 792, 831, 865, 909, 1214, 1222, 1223, 1226, 1235, 1236, 1295, 1319, 1321], "system": [35, 133, 134, 317, 414, 817, 909, 1009], "t": [35, 36, 38, 45, 58, 132, 133, 138, 144, 147, 208, 223, 227, 241, 282, 285, 317, 401, 410, 418, 434, 453, 456, 458, 459, 512, 549, 590, 594, 655, 659, 668, 669, 679, 682, 685, 690, 786, 796, 835, 840, 853, 873, 909, 915, 997, 1033, 1053, 1058, 1060, 1061, 1114, 1150, 1222, 1226, 1235, 1236, 1245, 1246, 1249, 1252, 1257, 1295, 1307, 1308, 1318], "t_": [283, 317, 457, 796, 874, 909, 1059, 1295], "t_0": [249, 317, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 796, 858, 909, 1059, 1295], "t_1": [249, 317, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 796, 858, 909, 1059, 1295], "t_a": [283, 317, 874, 909], "t_b": [283, 317, 874, 909], "t_c": [283, 317, 874, 909], "t_d": [283, 317, 874, 909], "t_i": [457, 796, 1059, 1295], "t_id": [224, 317, 841, 909], "t_n": [249, 317, 610, 613, 615, 617, 619, 621, 624, 626, 628, 796, 858, 909], "t_struct": [283, 317, 874, 909], "tab_spann": [317, 321], "tab_stub": [317, 321], "tab_styl": [317, 321], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 37, 38, 39, 120, 127, 130, 137, 138, 144, 148, 149, 222, 224, 242, 264, 269, 276, 285, 286, 317, 321, 775, 808, 839, 841, 868, 876, 909, 1305, 1306, 1307, 1308, 1310, 1311, 1322, 1323], "table_nam": [37, 39, 264, 317, 868, 909], "table_path": [38, 137, 148, 149, 317], "table_styl": [39, 317], "tablemerg": [38, 317], "tablenotfounderror": [38, 317], "tables_scale_100": [129, 134], "tail": [206, 210, 317, 332, 640, 796, 909, 1080, 1208, 1295], "take": [39, 130, 138, 144, 163, 164, 172, 201, 202, 208, 231, 234, 241, 242, 246, 317, 342, 409, 431, 466, 473, 474, 515, 516, 548, 575, 577, 579, 643, 722, 724, 743, 745, 754, 796, 833, 835, 850, 856, 909, 934, 1004, 1030, 1072, 1073, 1117, 1118, 1286, 1295, 1313], "taken": [534, 672, 1136, 1239], "talkin": [690, 1257], "tan": [796, 1295, 1316], "tand": 1316, "tangent": [338, 339, 701, 702, 796, 930, 931, 1268, 1269, 1295, 1320], "tanh": [242, 317, 796, 1295], "target": [1, 37, 38, 39, 55, 138, 279, 317, 655, 668, 669, 682, 684, 685, 915, 1222, 1235, 1236, 1249, 1251, 1252, 1318], "target_alia": [38, 317], "target_t": [37, 317], "task": [57, 818, 909], "tau": [456, 457, 796, 1058, 1059, 1295], "tb": [156, 158, 194, 317, 374, 1057, 1295], "tbl": [129, 134, 1325], "tbl0": 1310, "tbl1": [1308, 1310], "tbl2": [1308, 1310], "tbl3": 1308, "tbl4": 1308, "tbl_cell_numeric_align": [9, 10, 27], "tbl_col": 17, "tbl_format": 20, "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "tbl_row": [25, 187, 317, 822, 909], "tbl_width_char": 742, "td1": 915, "td2": 915, "td3": 915, "tdf": [241, 317], "technic": 792, "tell": [648, 670, 1215, 1237], "tempor": [91, 180, 208, 220, 249, 251, 252, 271, 317, 391, 486, 610, 613, 615, 617, 619, 621, 624, 626, 628, 796, 808, 814, 835, 858, 909, 915, 986, 1085, 1295, 1316, 1322], "temporalliter": [391, 796, 986, 1019, 1020, 1295], "temporari": [37, 317], "temporarili": [169, 172, 208, 249, 317, 610, 796, 835, 858, 909], "tend": [156, 158], "tensor": [279, 317, 1279, 1295], "tensordataset": [279, 317], "term": [456, 458, 459, 660, 672, 683, 796, 1058, 1060, 1061, 1227, 1239, 1250, 1295], "termin": [36, 45, 317, 909], "test": [0, 37, 135, 136, 138, 144, 193, 242, 317, 808, 1056, 1295], "test1": 1310, "test2": 1310, "test3": 1310, "test_1": [242, 317], "test_1_math": [242, 317], "test_1_phys": [242, 317], "test_2": [242, 317], "test_2_math": [242, 317], "test_2_phys": [242, 317], "test_data": 135, "test_df_height": 163, "test_func": 757, "test_lf": [881, 909], "test_miscellan": 1326, "test_numer": 1326, "test_price_calcul": 1326, "test_series_len": 167, "test_tabl": 136, "test_unique_xyz": 161, "testdb": 136, "testing1234": 1310, "text": [132, 135, 653, 660, 664, 665, 668, 669, 671, 672, 683, 776, 1227, 1231, 1232, 1238, 1239, 1250, 1310, 1326], "text1": 669, "text2": 669, "textclaus": 135, "texttt": [640, 796, 1208, 1295], "th": [202, 317, 474, 516, 529, 640, 660, 683, 796, 833, 909, 1073, 1118, 1131, 1208, 1227, 1250, 1295], "than": [39, 45, 46, 47, 48, 56, 57, 94, 117, 124, 126, 133, 134, 135, 138, 144, 147, 153, 181, 207, 220, 222, 223, 227, 240, 250, 251, 253, 285, 303, 317, 470, 472, 475, 477, 486, 500, 528, 547, 548, 549, 565, 597, 609, 631, 640, 660, 664, 666, 667, 675, 683, 692, 728, 758, 796, 817, 818, 834, 839, 840, 892, 909, 1085, 1130, 1150, 1171, 1182, 1195, 1208, 1227, 1231, 1233, 1234, 1242, 1250, 1259, 1276, 1295, 1326], "the_aws_access_key_id": [38, 137, 148, 149, 317], "the_aws_region": [38, 317], "the_aws_secret_access_kei": [38, 137, 148, 149, 317], "thei": [36, 39, 45, 49, 57, 58, 87, 88, 123, 147, 172, 223, 225, 252, 317, 590, 670, 678, 679, 796, 817, 840, 909, 913, 915, 1237], "them": [57, 120, 122, 123, 124, 126, 135, 136, 138, 142, 143, 144, 145, 147, 150, 151, 152, 195, 196, 208, 223, 234, 242, 249, 279, 287, 317, 354, 457, 486, 519, 582, 583, 590, 610, 726, 737, 738, 740, 741, 783, 784, 796, 818, 828, 835, 840, 850, 858, 909, 915, 946, 1059, 1064, 1121, 1159, 1160, 1295, 1313, 1323], "therebi": [147, 150, 151], "therefor": [194, 317, 549, 786, 796, 1057, 1295], "theta": [456, 458, 459, 796, 1058, 1060, 1061, 1295], "thi": [1, 4, 5, 10, 12, 14, 30, 31, 32, 33, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 64, 65, 66, 67, 68, 80, 88, 95, 120, 122, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 174, 176, 177, 178, 179, 182, 183, 185, 187, 188, 191, 194, 196, 200, 201, 206, 207, 208, 209, 213, 215, 217, 218, 219, 220, 222, 223, 224, 225, 227, 228, 230, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 260, 262, 264, 265, 266, 269, 271, 274, 275, 276, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 298, 303, 316, 317, 320, 321, 329, 332, 333, 342, 354, 360, 361, 362, 367, 385, 386, 388, 391, 401, 402, 404, 410, 411, 422, 428, 429, 431, 434, 435, 437, 440, 451, 455, 462, 472, 479, 481, 483, 484, 486, 490, 512, 513, 519, 528, 529, 530, 531, 532, 533, 535, 540, 541, 545, 546, 548, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 567, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 590, 597, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 633, 634, 635, 636, 641, 642, 643, 646, 648, 655, 658, 661, 662, 666, 667, 670, 677, 678, 679, 680, 681, 686, 690, 692, 694, 697, 704, 705, 707, 708, 709, 710, 714, 718, 726, 729, 731, 732, 745, 746, 748, 750, 751, 754, 755, 758, 761, 763, 766, 768, 772, 773, 774, 777, 781, 785, 786, 787, 792, 796, 808, 811, 812, 813, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 834, 835, 837, 839, 840, 841, 843, 845, 849, 850, 854, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 872, 873, 875, 876, 878, 879, 880, 881, 882, 883, 884, 887, 892, 906, 907, 908, 909, 913, 915, 917, 924, 925, 934, 946, 952, 953, 954, 959, 976, 978, 980, 981, 986, 987, 997, 998, 1005, 1006, 1008, 1017, 1027, 1028, 1030, 1033, 1034, 1036, 1039, 1050, 1052, 1055, 1057, 1063, 1064, 1073, 1075, 1079, 1081, 1090, 1099, 1114, 1115, 1121, 1130, 1131, 1132, 1133, 1134, 1135, 1137, 1143, 1148, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1162, 1165, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1195, 1196, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1209, 1210, 1212, 1213, 1215, 1222, 1225, 1228, 1229, 1233, 1234, 1237, 1244, 1245, 1246, 1253, 1257, 1259, 1260, 1262, 1265, 1266, 1270, 1272, 1274, 1275, 1276, 1277, 1279, 1280, 1281, 1283, 1284, 1285, 1295, 1300, 1304, 1305, 1306, 1310, 1318, 1321, 1322, 1323, 1324, 1326], "thing": [147, 154], "think": [428, 429, 1027, 1028], "third": [548, 796], "thoma": [234, 317, 850, 909], "those": [5, 30, 39, 133, 252, 276, 286, 317, 470, 600, 655, 758, 796, 876, 909, 915, 1173, 1222, 1277, 1295], "though": [37, 135, 208, 317, 792, 835, 909], "thousand": [9, 27], "thousands_separ": [9, 10, 27], "thread": [14, 36, 45, 57, 129, 133, 134, 136, 169, 170, 263, 317, 512, 549, 643, 722, 796, 818, 867, 909, 954, 1114, 1137, 1210, 1295], "thread_loc": [549, 796], "thread_pool_s": 170, "threadpool": 56, "three": [39, 177, 249, 278, 317, 402, 597, 610, 632, 660, 668, 683, 796, 858, 909, 958, 998, 1142, 1171, 1227, 1236, 1250, 1295], "threshold": [255, 317, 860, 909], "through": [121, 135, 792, 915, 1295, 1310], "throw": [38, 122, 123, 126, 180, 189, 246, 317, 662, 663, 814, 824, 856, 909, 1229, 1230, 1295], "thu": [39, 196, 317, 320, 728, 1064, 1295], "thursdai": [208, 317, 409, 724, 835, 909, 1004], "ti": [600, 796, 1173, 1295], "time": [12, 38, 55, 56, 57, 65, 67, 104, 137, 143, 145, 147, 148, 150, 151, 152, 163, 164, 167, 187, 196, 208, 223, 224, 249, 287, 317, 349, 385, 386, 410, 411, 413, 414, 415, 418, 419, 428, 429, 431, 434, 435, 437, 439, 440, 448, 451, 457, 507, 508, 540, 609, 610, 613, 615, 617, 619, 621, 624, 626, 628, 636, 682, 685, 689, 703, 704, 705, 726, 727, 737, 738, 739, 740, 741, 742, 748, 783, 784, 796, 817, 818, 822, 835, 840, 841, 854, 858, 909, 915, 941, 976, 1005, 1006, 1008, 1009, 1013, 1014, 1030, 1033, 1034, 1036, 1038, 1039, 1047, 1050, 1059, 1064, 1109, 1110, 1182, 1204, 1249, 1252, 1256, 1278, 1280, 1295, 1304, 1310, 1319, 1326], "time_column": [287, 317], "time_format": [36, 45, 317, 909], "time_unit": [65, 67, 411, 413, 419, 439, 451, 685, 739, 740, 741, 742, 748, 914, 915, 1006, 1008, 1014, 1038, 1050, 1252], "time_unit_m": [411, 1006], "time_unit_n": [411, 1006], "time_unit_u": 451, "time_zon": [65, 414, 416, 434, 685, 739, 740, 741, 914, 915, 1005, 1009, 1013, 1033, 1252], "timedelta": [208, 223, 249, 287, 317, 431, 435, 448, 457, 610, 613, 615, 616, 617, 619, 620, 621, 623, 624, 625, 626, 627, 628, 737, 738, 740, 741, 783, 784, 796, 835, 840, 858, 909, 914, 915, 1018, 1024, 1030, 1034, 1047, 1059, 1159, 1160, 1212, 1285, 1295], "timeout": [57, 818, 909], "timestamp": [127, 137, 148, 208, 317, 434, 435, 448, 748, 835, 909, 1033, 1034, 1047, 1316], "timestamp_m": 439, "timestamp_n": 1038, "timestamp_u": [439, 1038], "timestep": 748, "timeunit": [36, 45, 65, 67, 317, 411, 413, 439, 451, 685, 739, 740, 741, 742, 909, 915, 1006, 1008, 1038, 1050, 1252], "timezon": [65, 137, 148, 416, 915, 1319], "tip": [549, 796], "titl": [39, 317, 1304], "titlecas": [690, 1257], "tm": [413, 915, 1319], "to_arrow": [221, 317, 1276, 1295, 1323], "to_batch": [221, 317], "to_dict": [180, 317, 814, 909, 915], "to_dummi": [274, 279, 317, 1295], "to_fram": [388, 419, 435, 439, 448, 682, 998, 1171, 1196, 1198, 1241, 1242, 1249, 1295, 1300], "to_init_repr": [127, 317, 1295], "to_jax": [279, 317, 1295], "to_list": [127, 249, 317, 1214, 1226, 1295], "to_lowercas": 581, "to_numpi": [274, 279, 317, 548, 796, 1295], "to_panda": [317, 1295], "to_phys": [796, 980, 1295], "to_python": 914, "to_seri": [51, 203, 317, 682, 723, 771, 1249], "to_sql": [37, 317], "to_str": [437, 1036], "to_struct": [317, 656], "to_torch": [274, 317, 1295], "to_uppercas": [328, 580, 657, 796], "togeth": 1318, "token": [143, 145, 147, 149, 150, 151, 152], "tokyo": [127, 915], "tokyo_tz": 915, "toler": [156, 157, 158, 159, 223, 317, 840, 909], "tone": [39, 317], "tonight": [648, 670, 1215, 1237], "too": [14, 242, 317, 590, 796, 909], "tooltip": [317, 320, 1295, 1300], "toomanyrowsreturnederror": [250, 317], "top": [39, 264, 280, 317, 320, 705, 796, 868, 872, 909, 1295, 1300, 1323], "top_col": [39, 317], "top_k": [179, 317, 385, 386, 705, 796, 812, 909, 976, 1295], "top_k_bi": [385, 386, 704, 796], "top_row": [39, 317], "tor_id": 127, "torch": [155, 279, 317, 1279, 1295], "torchexporttyp": [279, 317], "total": [39, 194, 298, 317, 441, 442, 443, 444, 445, 446, 447, 501, 521, 796, 887, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1057, 1103, 1123, 1295], "total_gross": 1304, "toward": [298, 501, 521, 796, 887, 1103, 1123, 1295], "tp": [1, 53], "tpu": [274, 317, 1274, 1295], "traceback": [156, 157, 158, 159, 275, 317, 605, 796, 1178, 1276, 1295], "tracebacktyp": 1323, "track": [137, 148, 149, 227, 317, 540, 1323], "trail": [28, 206, 317, 677, 678, 1244, 1245], "train": [279, 317], "train_lf": [881, 909], "transfer": 136, "transferencod": [371, 372, 650, 651, 962, 963, 1217, 1218], "transform": [227, 264, 317, 548, 690, 775, 796, 868, 909, 1257], "transform_dens": [1295, 1300], "transit": [199, 317, 831, 909], "translat": 135, "transpar": [817, 909], "transpos": [242, 317], "travel": [137, 148], "travers": [612, 614, 616, 618, 620, 623, 625, 627, 796, 1184, 1185, 1187, 1190, 1191, 1192, 1295], "treat": [133, 134, 147, 174, 457, 647, 649, 659, 668, 669, 786, 796, 917, 1059, 1214, 1216, 1226, 1235, 1236, 1295], "tree": [565, 827, 909], "tree_format": [827, 909], "trend": [39, 317], "tri": [227, 317], "triangl": [303, 892], "trigger": [38, 225, 276, 317, 796, 913, 1277, 1295], "trigonometri": [1316, 1322], "trim": [127, 1318], "trim_decimal_zero": 28, "trip": 135, "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 36, 37, 38, 39, 44, 45, 46, 47, 48, 56, 57, 58, 120, 121, 122, 123, 125, 126, 127, 129, 130, 133, 134, 135, 137, 138, 139, 141, 144, 145, 147, 148, 150, 152, 153, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 172, 176, 180, 181, 182, 187, 189, 193, 198, 199, 201, 203, 205, 206, 207, 208, 213, 215, 216, 217, 220, 222, 223, 224, 225, 230, 231, 237, 238, 240, 242, 243, 246, 250, 251, 252, 253, 255, 263, 264, 267, 270, 272, 274, 275, 276, 279, 281, 282, 283, 285, 286, 287, 291, 297, 299, 301, 304, 305, 306, 307, 308, 309, 310, 317, 320, 327, 328, 329, 330, 331, 332, 343, 345, 346, 349, 353, 354, 362, 366, 370, 371, 373, 375, 386, 387, 396, 397, 398, 399, 400, 402, 409, 411, 414, 417, 419, 421, 428, 429, 431, 432, 434, 435, 436, 439, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 456, 458, 459, 466, 473, 475, 476, 477, 478, 481, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 503, 504, 508, 515, 517, 519, 535, 540, 547, 548, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 584, 585, 587, 589, 592, 593, 597, 602, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 635, 636, 640, 642, 643, 646, 647, 648, 649, 650, 652, 658, 659, 661, 662, 663, 668, 669, 673, 674, 676, 682, 684, 685, 687, 689, 693, 695, 696, 705, 707, 710, 713, 714, 715, 716, 717, 719, 722, 723, 724, 728, 737, 740, 746, 752, 758, 768, 771, 775, 778, 783, 786, 787, 796, 814, 815, 816, 817, 818, 822, 824, 827, 830, 831, 834, 835, 839, 840, 841, 843, 845, 849, 854, 856, 860, 865, 867, 868, 873, 874, 875, 876, 879, 884, 886, 888, 890, 893, 894, 895, 896, 897, 898, 899, 908, 909, 913, 914, 915, 922, 923, 935, 937, 938, 941, 945, 946, 954, 961, 962, 964, 966, 977, 979, 981, 984, 985, 998, 1004, 1005, 1006, 1009, 1012, 1013, 1014, 1015, 1016, 1020, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053, 1055, 1056, 1058, 1060, 1061, 1068, 1077, 1081, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1105, 1106, 1110, 1117, 1119, 1121, 1137, 1150, 1156, 1162, 1164, 1167, 1168, 1171, 1174, 1175, 1189, 1208, 1210, 1213, 1214, 1215, 1216, 1217, 1219, 1225, 1226, 1228, 1229, 1230, 1235, 1236, 1240, 1241, 1243, 1249, 1251, 1252, 1254, 1256, 1271, 1276, 1277, 1284, 1286, 1295, 1300, 1304, 1305, 1307, 1309, 1313, 1315, 1318, 1323, 1326], "truediv": [470, 796], "truncat": [20, 127, 133, 134, 147, 206, 208, 220, 251, 252, 271, 317, 835, 854, 909, 1322], "truncate_nod": [854, 909], "truncate_ragged_lin": [133, 134, 147], "truncate_str": 448, "truncate_td": 448, "trust": [404, 796, 823, 909], "try": [56, 57, 114, 133, 134, 139, 143, 145, 147, 150, 151, 152, 817, 818, 827, 854, 865, 909], "try_cast": 1316, "try_parse_d": [129, 133, 134, 147], "try_parse_hive_d": [145, 150, 152], "ts_local": [434, 1033], "tseri": [428, 429, 1027, 1028], "tstamp": 915, "tstamp_tokyo": 915, "tstamp_utc": 915, "tue": [317, 320], "tuesdai": [208, 317, 835, 909], "tupl": [39, 59, 136, 138, 144, 177, 220, 227, 240, 250, 251, 252, 259, 279, 295, 317, 564, 606, 796, 854, 865, 909, 914, 915, 1179, 1200, 1295], "turn": [8, 45, 46, 47, 48, 56, 57, 133, 134, 147, 222, 223, 317, 817, 818, 827, 839, 840, 845, 854, 909], "twice": [39, 317], "two": [39, 49, 87, 88, 122, 124, 126, 136, 177, 199, 201, 223, 224, 233, 234, 251, 278, 284, 297, 303, 317, 321, 327, 406, 413, 470, 473, 476, 540, 597, 642, 720, 721, 726, 728, 730, 737, 740, 772, 773, 775, 796, 831, 840, 841, 849, 850, 875, 886, 892, 909, 915, 958, 1001, 1008, 1142, 1171, 1295, 1310, 1311, 1312, 1315, 1324], "two_a": 1323, "tworld": [679, 1244, 1246], "txt": [1, 12, 147, 647, 659, 1226], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 38, 39, 45, 46, 47, 48, 51, 52, 53, 54, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 120, 122, 123, 124, 125, 126, 128, 133, 134, 135, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 174, 177, 183, 192, 195, 201, 206, 208, 209, 221, 222, 227, 249, 254, 269, 274, 275, 278, 279, 282, 294, 317, 329, 331, 334, 335, 336, 337, 338, 339, 342, 347, 348, 349, 351, 354, 365, 366, 370, 371, 372, 373, 374, 375, 387, 388, 391, 392, 393, 394, 395, 402, 403, 409, 410, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 457, 460, 462, 473, 476, 479, 486, 487, 488, 489, 490, 491, 492, 501, 505, 506, 508, 513, 519, 521, 539, 540, 548, 549, 597, 599, 603, 604, 605, 606, 608, 609, 610, 637, 638, 639, 646, 649, 650, 651, 654, 655, 656, 657, 660, 661, 663, 664, 665, 672, 673, 674, 675, 682, 683, 687, 701, 702, 703, 710, 719, 726, 729, 736, 737, 738, 739, 740, 741, 742, 744, 752, 753, 755, 756, 757, 758, 768, 771, 782, 783, 784, 787, 792, 796, 808, 817, 818, 826, 827, 828, 835, 839, 854, 858, 859, 865, 873, 883, 909, 914, 917, 922, 923, 935, 937, 938, 939, 940, 941, 943, 945, 946, 957, 958, 959, 961, 962, 963, 965, 977, 978, 986, 998, 999, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1056, 1059, 1063, 1079, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1105, 1106, 1107, 1108, 1110, 1115, 1121, 1123, 1141, 1142, 1164, 1171, 1177, 1178, 1179, 1181, 1182, 1203, 1205, 1213, 1214, 1216, 1217, 1218, 1220, 1221, 1222, 1223, 1224, 1227, 1228, 1230, 1231, 1232, 1239, 1240, 1241, 1242, 1249, 1250, 1254, 1275, 1276, 1278, 1286, 1295, 1304, 1311, 1316, 1318, 1322, 1323], "type_coercion": [45, 46, 47, 48, 56, 57, 817, 818, 827, 854, 865, 909], "typeerror": [38, 317], "typenam": [39, 317], "typic": [123, 135, 152, 227, 317, 418, 637, 796, 915, 1013, 1150, 1205, 1295], "tz": [685, 1252], "tzinfo": [137, 148, 915], "u": [39, 65, 67, 152, 165, 223, 317, 411, 413, 419, 439, 451, 682, 685, 715, 717, 739, 740, 741, 742, 748, 840, 909, 914, 915, 1006, 1008, 1014, 1038, 1050, 1249, 1252, 1308, 1319], "u1": [275, 317], "u16": [147, 1321, 1326], "u32": [12, 135, 178, 180, 186, 239, 293, 294, 298, 302, 308, 310, 317, 327, 333, 340, 341, 342, 343, 344, 347, 348, 350, 359, 374, 395, 396, 481, 501, 505, 506, 509, 521, 526, 572, 588, 600, 608, 609, 613, 615, 617, 619, 621, 624, 626, 628, 632, 649, 659, 664, 665, 703, 708, 710, 714, 718, 722, 723, 729, 731, 752, 755, 766, 796, 811, 814, 821, 852, 882, 883, 887, 891, 897, 899, 909, 915, 934, 935, 936, 939, 940, 942, 951, 977, 980, 992, 1081, 1107, 1108, 1111, 1123, 1128, 1173, 1181, 1182, 1197, 1216, 1226, 1231, 1232, 1278, 1282, 1284, 1295, 1304, 1312, 1313, 1314, 1318, 1323], "u64": [209, 294, 317, 479, 602, 796, 854, 883, 909, 915, 1079, 1175, 1295], "u8": [180, 272, 273, 285, 317, 605, 713, 796, 814, 909, 915, 1178, 1271, 1295, 1326], "udf": [169, 227, 241, 303, 317, 404, 549, 594, 758, 796, 823, 853, 892, 909, 1150, 1295], "ufunc": 94, "uid": 135, "uint": 1326, "uint16": [147, 399, 400, 699, 796, 915, 995, 996, 1266, 1276, 1279, 1295], "uint2": 1321, "uint32": [128, 155, 180, 194, 249, 294, 317, 342, 347, 348, 374, 395, 457, 473, 476, 501, 505, 506, 521, 603, 608, 609, 610, 649, 664, 665, 703, 729, 752, 755, 796, 814, 858, 883, 909, 915, 935, 939, 940, 965, 977, 1057, 1059, 1107, 1108, 1123, 1181, 1182, 1216, 1231, 1232, 1278, 1279, 1295], "uint4": 1323, "uint64": [128, 209, 249, 294, 317, 347, 348, 457, 479, 505, 506, 602, 610, 796, 858, 883, 909, 915, 939, 940, 1059, 1079, 1107, 1108, 1175, 1279, 1295], "uint8": [135, 180, 273, 274, 275, 285, 317, 399, 400, 605, 699, 713, 796, 814, 909, 914, 915, 995, 996, 1178, 1266, 1279, 1295, 1326], "uint8_pair": 1326, "uit": [672, 1239], "uk": [656, 1223], "unabl": [96, 138], "unalias": 555, "unari": [586, 796], "unbias": [458, 459, 796, 1060, 1061, 1295], "unchang": [194, 317, 604, 703, 796, 845, 892, 909, 1057, 1177, 1278, 1295], "uncompress": [34, 40, 41, 44, 48, 139, 150, 317, 909], "undefin": [706, 796], "under": [49, 51, 52, 53, 54, 87, 88, 143, 145, 147, 150, 151, 152, 242, 264, 317, 788, 789, 791, 792, 797, 798, 801, 803, 804, 805, 868, 909, 1287, 1289, 1291, 1296, 1301, 1302, 1303], "underli": [1, 49, 64, 65, 67, 80, 88, 93, 103, 120, 122, 123, 124, 126, 135, 136, 138, 142, 143, 145, 151, 160, 163, 167, 195, 196, 220, 221, 251, 269, 275, 317, 371, 411, 412, 413, 417, 420, 421, 422, 423, 424, 425, 426, 427, 430, 432, 433, 434, 436, 449, 450, 451, 452, 602, 629, 647, 650, 659, 796, 828, 909, 915, 962, 980, 1006, 1007, 1008, 1012, 1015, 1016, 1017, 1021, 1022, 1023, 1025, 1026, 1029, 1031, 1032, 1033, 1035, 1048, 1049, 1050, 1051, 1064, 1175, 1193, 1203, 1214, 1217, 1226, 1270, 1276, 1295, 1323], "understood": 758, "undo": [566, 573, 574, 576, 578, 580, 581], "unexpect": [103, 112, 135, 548, 549, 796, 1150, 1295], "unhelpfulli": [156, 158], "unicod": [20, 660, 665, 672, 683, 915, 1227, 1232, 1239, 1250], "unifi": [39, 274, 279, 317, 915], "uniform": [39, 317, 597, 796, 1171, 1295], "unimod": [640, 796, 1208, 1295], "unintend": [199, 317, 831, 909], "union": [56, 57, 58, 532, 817, 818, 827, 854, 865, 909, 915, 1134, 1322, 1323], "uniqu": [44, 48, 50, 160, 161, 162, 165, 167, 178, 217, 222, 238, 242, 252, 308, 317, 333, 344, 359, 402, 497, 526, 572, 597, 682, 684, 685, 689, 708, 710, 718, 766, 796, 811, 839, 897, 909, 913, 925, 936, 951, 998, 1098, 1128, 1157, 1171, 1249, 1251, 1252, 1256, 1282, 1284, 1295, 1311, 1313], "unique_column_valu": [242, 317], "unique_count": [796, 1295], "uniquekeepstrategi": [282, 317, 873, 909], "unit": [39, 65, 67, 156, 157, 158, 159, 163, 167, 194, 317, 374, 411, 413, 419, 439, 451, 457, 463, 546, 561, 682, 685, 709, 739, 740, 741, 742, 748, 796, 854, 909, 913, 915, 965, 1006, 1008, 1014, 1038, 1050, 1057, 1059, 1065, 1148, 1249, 1252, 1283, 1295, 1326], "univers": [174, 917], "unix": [64, 65, 419, 748, 1014], "unknown": [655, 756, 1222], "unless": [39, 50, 122, 274, 279, 317, 677, 678, 771, 909, 1244, 1318], "unlik": [130, 208, 317, 835, 909], "unnam": [657, 1224], "unnest": [130, 317, 402, 597, 608, 656, 657, 674, 675, 695, 697, 710, 796, 909, 958, 998, 1142, 1171, 1181, 1241, 1242, 1295, 1316, 1322], "unpivot": [233, 317, 849, 909], "unregist": [1306, 1307, 1308, 1323, 1325], "unsaf": [796, 913], "unset": [37, 145, 150, 162, 302, 317, 378, 379, 380, 382, 383, 434, 540, 796, 891, 969, 970, 971, 973, 974, 1033, 1295, 1304], "unsign": [81, 82, 83, 84, 602, 796, 915, 1175, 1295], "unsigned_integ": 915, "unstabl": [31, 32, 33, 44, 45, 46, 47, 48, 56, 57, 66, 68, 118, 130, 135, 143, 145, 147, 150, 151, 152, 153, 160, 161, 163, 164, 165, 166, 167, 168, 264, 274, 279, 285, 286, 317, 320, 321, 401, 402, 435, 481, 549, 597, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 772, 773, 796, 817, 818, 827, 868, 876, 909, 981, 997, 998, 1034, 1081, 1171, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1274, 1279, 1295, 1300], "unstack": 317, "unstackdirect": [285, 317], "unsuit": 119, "unsupport": [38, 317], "until": [87, 208, 225, 317, 666, 667, 692, 835, 909, 1233, 1234, 1259], "up": [10, 39, 79, 136, 220, 223, 242, 251, 252, 258, 271, 317, 390, 549, 660, 668, 669, 683, 796, 839, 840, 845, 863, 909, 915, 983, 1227, 1235, 1236, 1250, 1295], "upcast": [332, 796], "upcast_integer_typ": [1, 53], "updat": [38, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 187, 317, 822, 909], "upgrad": 99, "upheld": [845, 909], "upon": 134, "upper": [133, 134, 135, 194, 208, 317, 391, 481, 486, 540, 575, 709, 719, 737, 738, 740, 741, 783, 784, 796, 835, 909, 986, 1057, 1081, 1085, 1148, 1283, 1295, 1313, 1316], "upper_bound": [208, 317, 391, 486, 540, 796, 835, 909, 986, 1085, 1148, 1295], "uppercas": [581, 691, 1258, 1318], "upsampl": [208, 317, 835, 909], "urandom": [374, 965], "uri": [37, 38, 135, 136, 137, 148, 149, 317], "url": [135, 136, 145, 150, 152, 655, 657, 1222, 1224], "urllib": 136, "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 35, 36, 37, 38, 39, 40, 41, 44, 45, 48, 49, 50, 56, 57, 58, 65, 79, 87, 88, 91, 95, 118, 121, 123, 124, 126, 128, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 178, 179, 180, 183, 187, 189, 191, 197, 198, 199, 201, 207, 208, 215, 217, 219, 220, 221, 223, 227, 233, 237, 238, 240, 241, 242, 249, 250, 251, 252, 253, 255, 256, 258, 263, 264, 265, 269, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 284, 285, 286, 287, 288, 291, 292, 293, 294, 296, 303, 317, 327, 329, 331, 333, 342, 343, 366, 371, 372, 386, 401, 404, 407, 408, 416, 434, 435, 437, 440, 448, 451, 453, 456, 457, 458, 459, 460, 464, 465, 466, 470, 481, 484, 485, 486, 498, 512, 528, 536, 540, 542, 548, 549, 552, 573, 576, 578, 580, 581, 590, 597, 600, 602, 604, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 631, 633, 635, 636, 640, 642, 643, 645, 646, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 664, 665, 668, 669, 670, 672, 674, 676, 678, 679, 680, 681, 682, 684, 685, 689, 692, 693, 697, 705, 711, 712, 714, 715, 716, 717, 718, 721, 722, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 746, 748, 752, 753, 755, 756, 758, 759, 760, 762, 764, 765, 768, 771, 772, 773, 774, 775, 777, 778, 779, 780, 783, 784, 785, 786, 787, 792, 795, 796, 807, 808, 811, 812, 813, 814, 817, 818, 820, 822, 823, 824, 825, 826, 827, 829, 830, 831, 834, 835, 840, 843, 849, 858, 859, 860, 861, 863, 867, 868, 869, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 892, 909, 914, 915, 922, 923, 925, 954, 958, 962, 963, 981, 997, 999, 1002, 1003, 1011, 1019, 1020, 1033, 1034, 1036, 1039, 1047, 1050, 1053, 1058, 1059, 1060, 1061, 1066, 1067, 1072, 1078, 1081, 1083, 1084, 1085, 1100, 1114, 1130, 1137, 1142, 1150, 1171, 1173, 1175, 1177, 1179, 1181, 1182, 1183, 1195, 1196, 1198, 1199, 1202, 1208, 1210, 1212, 1213, 1214, 1215, 1217, 1218, 1221, 1222, 1223, 1225, 1226, 1231, 1232, 1235, 1236, 1237, 1239, 1241, 1249, 1251, 1252, 1256, 1259, 1270, 1271, 1273, 1276, 1277, 1285, 1295, 1304, 1305, 1306, 1307, 1308, 1310, 1311, 1318, 1319, 1323, 1326], "usag": [163, 167, 261, 317, 915, 1203, 1295], "usd": [206, 317, 1326], "use_pyarrow": [44, 48, 133, 139, 141, 145, 275, 317, 909, 1276, 1295], "use_pyarrow_extension_arrai": [276, 317, 1277, 1295], "use_pyarrow_write_to_dataset": [44, 317], "use_statist": [145, 152], "user": [37, 135, 136, 174, 227, 241, 303, 317, 548, 549, 594, 633, 758, 796, 853, 892, 909, 913, 917, 1150, 1199, 1295], "user_conn": 135, "usernam": [133, 136, 139, 141], "userwarn": 1, "usr": 135, "usual": [95, 136, 279, 317, 410, 1005], "utc": [137, 148, 410, 414, 416, 418, 434, 682, 685, 914, 915, 1005, 1009, 1013, 1033, 1249, 1252], "utc_tz": 915, "utf": [36, 45, 78, 317, 909], "utf8": [20, 133, 134, 147, 660, 672, 683, 1227, 1239, 1250], "utf8_borders_onli": 20, "utf8_ful": [20, 50, 127], "utf8_full_condens": [7, 20, 127], "utf8_horizontal_onli": 20, "utf8_no_bord": 20, "util": [279, 317, 748, 909, 913], "uvw": [656, 1223], "v": [8, 9, 44, 194, 317, 632, 715, 717, 796, 1197, 1295, 1307, 1308], "v1": 32, "v2": [8, 139, 150], "val": [39, 248, 317, 549, 594, 703, 786, 796, 857, 909], "valid": [36, 39, 45, 65, 135, 139, 141, 145, 167, 172, 189, 194, 222, 246, 317, 401, 647, 649, 655, 656, 657, 659, 663, 668, 669, 786, 796, 824, 839, 856, 884, 909, 915, 997, 1057, 1214, 1216, 1222, 1223, 1224, 1226, 1230, 1235, 1236, 1295, 1304, 1305], "validate_output_schema": [845, 909], "vals_phys": [703, 796], "valu": [4, 5, 10, 11, 12, 13, 17, 20, 28, 30, 35, 36, 39, 44, 45, 48, 49, 50, 58, 59, 62, 75, 76, 85, 88, 97, 122, 123, 125, 126, 133, 134, 135, 136, 145, 147, 150, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 172, 176, 178, 179, 187, 191, 193, 196, 197, 198, 199, 203, 206, 208, 209, 210, 214, 218, 220, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 240, 242, 243, 244, 246, 249, 250, 251, 252, 253, 260, 263, 265, 266, 267, 268, 270, 271, 275, 276, 280, 281, 284, 285, 286, 287, 288, 295, 298, 299, 301, 304, 305, 307, 308, 317, 320, 321, 325, 326, 327, 329, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 367, 368, 369, 371, 372, 373, 374, 375, 385, 386, 387, 389, 390, 391, 392, 393, 394, 396, 397, 400, 401, 402, 405, 407, 408, 413, 417, 427, 432, 449, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 533, 535, 536, 537, 538, 540, 541, 542, 544, 546, 547, 548, 549, 550, 551, 552, 557, 568, 569, 570, 571, 572, 582, 583, 584, 585, 588, 590, 591, 594, 595, 597, 598, 600, 603, 604, 605, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 637, 638, 639, 640, 642, 643, 644, 646, 647, 649, 650, 651, 652, 653, 655, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 683, 692, 694, 698, 699, 701, 702, 704, 705, 706, 707, 708, 709, 710, 713, 714, 715, 716, 717, 718, 722, 725, 726, 727, 729, 731, 732, 733, 734, 735, 745, 746, 751, 752, 753, 754, 756, 759, 760, 761, 762, 763, 764, 765, 766, 770, 771, 772, 773, 779, 780, 786, 796, 811, 812, 822, 825, 829, 830, 831, 835, 837, 838, 839, 840, 846, 847, 848, 849, 851, 852, 855, 856, 858, 864, 867, 869, 870, 872, 875, 876, 877, 887, 888, 890, 893, 894, 896, 897, 909, 915, 920, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 942, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 959, 960, 962, 963, 964, 965, 966, 977, 983, 986, 988, 989, 990, 992, 997, 998, 999, 1000, 1002, 1003, 1008, 1012, 1026, 1031, 1048, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1065, 1066, 1067, 1071, 1072, 1073, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1103, 1104, 1105, 1106, 1107, 1108, 1111, 1112, 1113, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1135, 1137, 1138, 1139, 1140, 1143, 1144, 1150, 1151, 1152, 1154, 1155, 1157, 1159, 1160, 1162, 1163, 1165, 1166, 1170, 1171, 1172, 1173, 1177, 1178, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1195, 1196, 1197, 1198, 1201, 1205, 1206, 1207, 1208, 1210, 1213, 1214, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1250, 1259, 1262, 1266, 1267, 1268, 1269, 1276, 1277, 1278, 1282, 1284, 1286, 1295, 1304, 1309, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1321, 1323, 1325, 1326], "value1": [643, 796], "value2": [643, 796], "value_a": 1323, "value_b": 1323, "value_count": [708, 796, 1295], "value_cum_sum": [400, 796], "value_cum_sum_all_fil": [400, 796], "value_nam": [233, 284, 317, 849, 875, 909], "value_var": [233, 284, 317, 849, 875, 909], "valueerror": [15, 20], "valueexcept": 756, "var": [39, 168, 317, 627, 628, 796, 909, 1295, 1312], "var_samp": 1312, "vari": [410, 1005, 1326], "variabl": [30, 75, 143, 145, 147, 150, 151, 152, 166, 169, 233, 272, 284, 317, 849, 875, 909, 1271, 1295, 1305, 1307, 1323], "variable_nam": [233, 284, 317, 849, 875, 909], "variad": 135, "varianc": [288, 317, 459, 498, 627, 628, 711, 785, 796, 877, 909, 1061, 1100, 1192, 1285, 1295, 1316], "variou": [135, 177, 183, 317, 796, 819, 909, 914, 915, 1295], "vector": [612, 614, 616, 618, 620, 623, 625, 627, 796, 1184, 1185, 1187, 1190, 1191, 1192, 1295], "vectoris": [428, 429, 1027, 1028], "vein": 172, "verbos": [29, 156, 158, 172, 656, 1223], "veri": [135, 220, 281, 317, 549, 796, 892, 1317], "verifi": [223, 317, 840, 909], "versicolor": [317, 320], "version": [37, 38, 55, 133, 134, 137, 138, 148, 155, 160, 161, 162, 163, 167, 170, 176, 178, 188, 209, 233, 257, 264, 274, 275, 279, 293, 298, 317, 320, 404, 416, 428, 429, 451, 472, 479, 556, 557, 563, 567, 604, 646, 654, 697, 712, 721, 770, 775, 796, 811, 823, 827, 849, 862, 868, 881, 882, 887, 909, 915, 1011, 1019, 1020, 1027, 1028, 1050, 1078, 1079, 1177, 1213, 1221, 1274, 1276, 1279, 1295, 1300], "versu": [187, 317, 822, 909], "vertic": [58, 196, 285, 289, 317, 646, 661, 1213, 1228], "vertical_relax": 58, "via": [30, 133, 134, 135, 145, 147, 150, 151, 152, 175, 177, 188, 220, 251, 317, 404, 549, 657, 796, 823, 909, 918, 1224], "view": [549, 796], "visibl": [17, 194, 317, 1057, 1295], "visit": [401, 796, 997, 1295], "visual": [215, 217, 317, 865, 909], "volk": 130, "vote": [655, 657, 1222, 1224], "vowel": [668, 669, 1235, 1236], "vstack": [58, 196, 317], "w": [39, 135, 208, 252, 317, 649, 653, 655, 657, 715, 717, 835, 909, 915, 1216, 1220, 1222, 1224, 1245, 1307, 1308, 1311], "w_i": [456, 458, 459, 796, 1058, 1060, 1061, 1295], "wa": [37, 55, 95, 138, 188, 274, 275, 317, 320, 404, 605, 670, 742, 796, 823, 909, 915, 1178, 1237, 1276, 1295, 1300], "wai": [87, 88, 120, 122, 123, 124, 126, 142, 143, 151, 207, 221, 241, 263, 296, 317, 435, 594, 643, 655, 729, 792, 796, 820, 826, 834, 853, 859, 867, 878, 885, 892, 909, 1034, 1222], "walk": 727, "want": [57, 123, 125, 138, 196, 227, 238, 249, 264, 317, 409, 466, 548, 549, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 636, 648, 664, 668, 669, 670, 724, 732, 737, 740, 746, 768, 771, 787, 796, 818, 868, 884, 909, 915, 1004, 1064, 1150, 1215, 1231, 1235, 1236, 1237, 1295, 1310], "warehous": 136, "warn": [90, 91, 94, 95, 98, 105, 107, 108, 118, 590, 796, 1295], "watermark": [44, 317], "wb": [39, 317], "we": [44, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 177, 187, 188, 208, 223, 242, 249, 287, 317, 404, 431, 435, 448, 481, 512, 540, 548, 549, 610, 613, 615, 617, 619, 621, 624, 626, 628, 657, 668, 669, 687, 736, 737, 738, 739, 740, 741, 756, 783, 784, 786, 796, 822, 823, 835, 840, 845, 858, 909, 1030, 1034, 1047, 1081, 1114, 1150, 1224, 1236, 1254, 1295, 1307], "weather": [668, 669, 1235, 1236], "wed": [317, 320], "wednesdai": [208, 317, 437, 440, 835, 909, 1036, 1039], "week": [208, 223, 249, 287, 317, 409, 431, 435, 448, 450, 457, 610, 613, 615, 617, 619, 621, 624, 626, 628, 724, 737, 738, 740, 741, 742, 783, 784, 796, 835, 840, 858, 909, 915, 1004, 1030, 1034, 1047, 1049, 1059, 1295, 1319], "week_mask": [409, 724, 1004], "weekdai": [417, 432], "weekend": [409, 724, 1004], "weekli": [208, 317, 448, 835, 909, 1047], "weghorst": [657, 1224], "weight": [130, 456, 457, 458, 459, 611, 612, 614, 616, 618, 620, 623, 625, 627, 640, 796, 1058, 1059, 1060, 1061, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1208, 1295], "wei\u00df": 1318, "well": [39, 133, 134, 135, 147, 317, 486, 775, 796, 1085, 1295, 1323], "were": [172, 604, 605, 792, 796, 1177, 1178, 1295], "west": [224, 317, 841, 909], "what": [177, 238, 317, 409, 548, 648, 670, 796, 1004, 1215, 1237], "whatev": 172, "when": [10, 14, 17, 19, 23, 36, 37, 38, 39, 40, 41, 44, 45, 48, 49, 65, 79, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 130, 133, 134, 135, 136, 138, 139, 141, 143, 144, 145, 147, 148, 150, 151, 152, 153, 156, 157, 158, 159, 163, 167, 179, 187, 192, 194, 196, 198, 201, 208, 222, 224, 227, 241, 246, 250, 252, 255, 256, 260, 263, 269, 272, 274, 275, 279, 280, 282, 286, 292, 317, 361, 391, 409, 456, 458, 459, 465, 533, 540, 561, 594, 604, 605, 634, 642, 643, 648, 654, 658, 660, 664, 665, 670, 672, 677, 678, 679, 682, 683, 722, 724, 732, 746, 796, 812, 822, 830, 835, 839, 841, 845, 856, 860, 861, 864, 867, 872, 873, 876, 880, 906, 909, 953, 986, 999, 1004, 1057, 1058, 1060, 1061, 1064, 1067, 1135, 1177, 1178, 1196, 1198, 1201, 1215, 1221, 1225, 1227, 1231, 1232, 1237, 1239, 1244, 1245, 1246, 1249, 1250, 1270, 1271, 1276, 1295, 1310, 1323], "when_matched_update_al": [38, 317], "when_not_matched_insert_al": [38, 317], "where": [39, 50, 95, 135, 136, 138, 191, 196, 199, 208, 220, 224, 233, 242, 251, 264, 265, 274, 279, 284, 286, 288, 317, 343, 450, 453, 455, 457, 466, 536, 542, 548, 585, 603, 632, 640, 643, 645, 670, 690, 711, 723, 728, 730, 772, 773, 775, 777, 785, 786, 796, 825, 831, 835, 841, 849, 868, 869, 875, 876, 877, 909, 935, 1049, 1053, 1055, 1059, 1064, 1068, 1162, 1197, 1208, 1212, 1237, 1257, 1285, 1286, 1295, 1304, 1312, 1322, 1323, 1325], "wherea": [133, 147, 249, 317, 435, 448, 582, 583, 610, 796, 858, 909, 1034, 1047, 1159, 1160, 1295], "wherev": [39, 227, 303, 317, 549, 796, 1150, 1295], "whether": [36, 45, 124, 126, 130, 138, 144, 145, 150, 152, 167, 171, 193, 219, 223, 258, 263, 317, 329, 331, 345, 346, 421, 436, 478, 503, 504, 633, 643, 658, 722, 796, 840, 845, 863, 867, 909, 915, 922, 923, 937, 938, 979, 981, 1016, 1035, 1056, 1077, 1078, 1105, 1106, 1225, 1295, 1307, 1323], "which": [1, 6, 10, 20, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 123, 125, 133, 134, 135, 136, 137, 138, 143, 144, 145, 147, 148, 149, 150, 151, 152, 163, 166, 168, 179, 180, 187, 188, 191, 196, 197, 207, 208, 213, 223, 242, 249, 257, 274, 275, 280, 282, 287, 317, 329, 366, 404, 409, 431, 435, 437, 448, 457, 463, 486, 488, 491, 493, 494, 495, 496, 540, 548, 549, 561, 563, 610, 613, 615, 617, 619, 621, 624, 626, 628, 669, 687, 724, 737, 738, 740, 741, 742, 783, 784, 786, 796, 812, 814, 817, 820, 822, 823, 825, 826, 827, 835, 840, 858, 862, 872, 873, 878, 909, 915, 958, 1004, 1030, 1034, 1036, 1047, 1059, 1064, 1065, 1085, 1088, 1091, 1093, 1094, 1095, 1096, 1142, 1198, 1254, 1274, 1276, 1295, 1305, 1311, 1323, 1326], "while": [38, 57, 134, 137, 138, 148, 152, 163, 167, 172, 220, 233, 281, 284, 286, 317, 604, 665, 796, 818, 849, 875, 876, 909, 1177, 1232, 1295], "white": [39, 317], "whitespac": [127, 677, 678, 679, 1244, 1245, 1246, 1318], "whole": [548, 642, 643, 655, 796, 892, 909, 1222], "whose": [50, 223, 242, 317, 460, 744, 796, 840, 909, 915], "why": [817, 909], "wide": [135, 206, 233, 242, 284, 285, 317, 849, 875, 909], "width": [26, 39, 59, 133, 134, 147, 317, 320, 539, 909, 1141], "wiki": 20, "wikipedia": 20, "wildcard": [460, 693, 732, 733, 746, 770, 792, 796, 913], "win_loss": [39, 317], "window": [133, 134, 147, 208, 249, 317, 401, 456, 458, 459, 549, 590, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 726, 772, 773, 796, 835, 858, 909, 997, 1058, 1060, 1061, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1295], "window_s": [611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 772, 773, 796, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1295], "windowmappingstrategi": [590, 796], "winter": [658, 668, 669, 1225], "wise": [39, 50, 135, 201, 317, 334, 335, 336, 337, 338, 339, 392, 393, 394, 461, 544, 637, 638, 639, 701, 702, 746, 770, 796, 926, 927, 928, 929, 930, 931, 988, 989, 990, 1062, 1146, 1147, 1205, 1206, 1207, 1268, 1269, 1295], "wish": [179, 280, 317, 385, 386, 704, 705, 796, 812, 872, 909, 976, 1280, 1295], "with_column": [1, 12, 53, 56, 57, 208, 241, 249, 279, 285, 292, 317, 326, 328, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 359, 360, 361, 362, 366, 371, 372, 374, 387, 391, 396, 397, 398, 399, 400, 402, 405, 409, 410, 412, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 449, 450, 452, 454, 455, 457, 464, 465, 470, 475, 477, 479, 484, 485, 486, 489, 490, 492, 493, 494, 495, 496, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 569, 571, 573, 574, 576, 578, 580, 581, 584, 585, 586, 590, 591, 594, 595, 597, 600, 604, 605, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 630, 634, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 686, 687, 688, 690, 691, 692, 694, 697, 698, 703, 706, 713, 715, 717, 720, 724, 725, 726, 727, 732, 733, 735, 736, 738, 739, 743, 753, 757, 760, 762, 765, 776, 780, 782, 784, 786, 792, 796, 817, 818, 827, 835, 837, 853, 854, 858, 865, 880, 909, 915, 998, 1033, 1171, 1295, 1323], "with_column_nam": 147, "with_columns_seq": [317, 909], "with_context": 909, "with_field": [549, 796], "with_replac": [253, 317, 528, 631, 796, 1130, 1195, 1295], "with_row_count": [317, 909], "with_row_index": [1, 249, 293, 317, 613, 615, 617, 619, 621, 624, 626, 628, 796, 882, 909, 1196, 1295, 1300], "within": [44, 59, 75, 156, 157, 158, 159, 207, 208, 209, 223, 249, 287, 317, 479, 600, 643, 796, 835, 840, 858, 909, 1079, 1295, 1323], "without": [1, 31, 32, 33, 45, 46, 47, 48, 55, 56, 57, 66, 68, 95, 98, 127, 130, 137, 140, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 160, 161, 163, 164, 165, 166, 167, 168, 224, 264, 274, 275, 279, 285, 286, 317, 320, 321, 401, 402, 435, 481, 549, 597, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 648, 658, 670, 729, 772, 773, 774, 796, 817, 818, 827, 841, 868, 876, 909, 979, 981, 997, 998, 1034, 1081, 1171, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1215, 1225, 1237, 1274, 1276, 1279, 1295, 1300, 1325], "without_fil": [137, 148, 149], "wod": [679, 1246], "womp": [283, 317, 874, 909], "word": [136, 668, 669, 678, 679, 690, 1257], "work": [39, 66, 68, 134, 153, 256, 292, 317, 329, 331, 367, 390, 391, 460, 469, 512, 541, 548, 549, 573, 574, 576, 578, 580, 581, 590, 660, 664, 665, 672, 683, 707, 796, 861, 880, 909, 915, 922, 923, 959, 983, 986, 1071, 1114, 1143, 1227, 1231, 1232, 1239, 1250, 1281, 1295], "workaround": 317, "workbook": [39, 138, 144, 317], "working_with_conditional_format": [39, 317], "working_with_sparklin": [39, 317], "worksheet": [39, 138, 144, 317], "world": [1, 20, 648, 670, 677, 678, 679, 915, 1121, 1215, 1237, 1244, 1245, 1246, 1306, 1309], "wors": [867, 909], "worth": [512, 1114], "worthwhil": [156, 158], "would": [94, 133, 134, 147, 177, 275, 279, 317, 320, 342, 353, 409, 517, 548, 549, 560, 590, 600, 722, 724, 796, 934, 945, 1004, 1119, 1173, 1276, 1295, 1300, 1321], "wrap": [77, 127, 387, 486, 548, 796, 977, 1295], "wrap_numer": [387, 796, 977, 1295], "wrapper": [57, 818, 909], "writabl": [34, 36, 40, 41, 42, 43, 44, 257, 275, 317, 1276, 1295], "write": [34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 132, 134, 139, 172, 183, 317, 391, 564, 567, 796, 843, 865, 909, 915, 986, 1295], "write_ascii_frame_to_stdout": 172, "write_avro": 317, "write_clipboard": [132, 317], "write_csv": [35, 134, 147, 317], "write_databas": 317, "write_delta": 317, "write_excel": 317, "write_ipc": [139, 317], "write_ipc_stream": 317, "write_json": 317, "write_ndjson": [42, 317], "write_parquet": 317, "write_t": [44, 317], "write_to_dataset": [44, 317], "writeabl": [275, 317, 1276, 1295], "written": [6, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 257, 317, 563, 862, 909], "ww": [1318, 1325], "www": 695, "x": [27, 50, 58, 79, 97, 121, 127, 133, 134, 136, 138, 144, 147, 160, 161, 163, 176, 194, 212, 215, 217, 222, 242, 251, 252, 281, 284, 285, 317, 320, 326, 328, 330, 349, 354, 374, 396, 403, 454, 455, 470, 475, 477, 479, 500, 507, 519, 545, 547, 548, 549, 569, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 589, 595, 603, 604, 605, 609, 637, 640, 674, 697, 698, 703, 706, 713, 715, 717, 720, 721, 726, 732, 733, 735, 746, 756, 757, 760, 762, 765, 770, 775, 780, 786, 796, 839, 845, 866, 868, 875, 909, 914, 915, 946, 980, 992, 1067, 1150, 1177, 1178, 1205, 1208, 1241, 1274, 1278, 1279, 1295, 1300, 1307, 1308, 1311, 1317, 1323, 1325], "x00": [370, 371, 372, 373, 375, 650, 961, 962, 963, 964, 966, 1217], "x00fvalu": [257, 317], "x07": 374, "x1": 374, "x80": 374, "x81": 563, "x82": [257, 317], "x83": [257, 317, 374], "x88": 374, "x8e": 374, "x99": 374, "x_": [457, 796, 1059, 1295], "x_0": [285, 317, 456, 457, 458, 459, 796, 1058, 1059, 1060, 1061, 1295], "x_1": [285, 317, 457, 796, 1059, 1295], "x_2": [456, 458, 459, 796, 1058, 1060, 1061, 1295], "x_i": [457, 796, 1059, 1295], "x_invers": [595, 796], "x_pow_8": 1317, "x_round": 1317, "x_round_1": 1317, "x_squar": [595, 796], "x_t": [456, 458, 459, 796, 1058, 1060, 1061, 1295], "x_uniqu": [572, 796], "x_y": [354, 519], "xa1cagg": 563, "xa1csum": 563, "xa1fcolumncfoolpartition_bi": 563, "xa1fwindow": 563, "xa1gcolumn": [257, 317], "xa4dnamecfoohdatatypeeint64lbit_set": [257, 317], "xa4hfunct": 563, "xb": 374, "xb9neq": 374, "xbd": 374, "xc14": 374, "xd3": 374, "xdist": 1326, "xee": 374, "xf4v": 374, "xf9": 374, "xfb": 374, "xff": [370, 371, 372, 373, 375, 650, 961, 962, 963, 964, 966, 1217], "xi": [656, 1223], "xl": 138, "xlog2": [571, 595, 796], "xlsb": 138, "xlsx": [39, 138, 317], "xlsx2csv": [138, 155], "xlsxwriter": [39, 155, 317], "xor": [384, 796, 975, 1295, 1314], "xor_xi": [713, 796], "xx": [10, 51, 53, 167, 187, 264, 317, 822, 909, 915, 1311, 1318, 1325], "xxx": 695, "xy": [51, 53], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 326, 649, 656, 796, 1216, 1223, 1272, 1295], "y": [27, 50, 58, 79, 97, 121, 127, 160, 161, 163, 176, 194, 215, 217, 222, 242, 251, 252, 281, 284, 285, 317, 320, 326, 328, 330, 349, 354, 374, 437, 440, 454, 455, 475, 477, 500, 507, 519, 547, 549, 572, 574, 576, 578, 580, 581, 584, 585, 589, 603, 604, 605, 609, 682, 684, 685, 697, 706, 713, 715, 717, 720, 721, 735, 742, 756, 760, 762, 765, 775, 780, 796, 839, 866, 868, 875, 909, 914, 915, 946, 980, 1036, 1039, 1177, 1178, 1249, 1251, 1252, 1295, 1300, 1311, 1318, 1319, 1325], "y_": [456, 457, 458, 459, 796, 1058, 1059, 1060, 1061, 1295], "y_0": [285, 317, 456, 457, 458, 459, 796, 1058, 1059, 1060, 1061, 1295], "y_1": [285, 317], "y_i": [457, 796, 1059, 1295], "y_mul": 697, "y_t": [456, 458, 459, 796, 1058, 1060, 1061, 1295], "y_uniqu": [572, 796], "ya": [672, 1239], "ya29": 149, "year": [137, 148, 208, 223, 249, 264, 287, 317, 409, 421, 422, 431, 432, 435, 448, 449, 610, 613, 615, 617, 619, 621, 624, 626, 628, 724, 736, 737, 738, 739, 740, 741, 783, 784, 796, 835, 840, 858, 909, 915, 1004, 1016, 1017, 1030, 1031, 1034, 1047, 1048, 1319], "yellow": [317, 321, 370, 371, 372, 373, 375], "yield": [124, 126, 133, 134, 135, 147, 194, 196, 219, 281, 317, 470, 548, 590, 796, 909, 1057, 1064, 1295], "you": [1, 10, 14, 39, 44, 48, 50, 57, 58, 120, 122, 123, 124, 125, 126, 133, 134, 135, 136, 138, 139, 142, 143, 147, 151, 153, 172, 179, 196, 199, 208, 219, 220, 223, 227, 238, 242, 249, 250, 251, 252, 264, 271, 274, 280, 281, 282, 284, 303, 317, 320, 385, 386, 409, 428, 429, 431, 434, 437, 440, 460, 466, 486, 512, 540, 548, 549, 590, 595, 602, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 636, 648, 664, 668, 669, 670, 690, 693, 704, 705, 724, 732, 737, 740, 742, 746, 758, 768, 771, 775, 787, 796, 812, 818, 825, 831, 835, 840, 858, 865, 868, 872, 873, 875, 884, 892, 909, 913, 915, 976, 1004, 1027, 1028, 1033, 1036, 1039, 1064, 1085, 1114, 1150, 1169, 1175, 1215, 1231, 1235, 1236, 1237, 1257, 1274, 1280, 1295, 1300, 1305, 1310, 1326], "your": [37, 39, 49, 50, 88, 133, 134, 135, 136, 138, 153, 220, 227, 251, 252, 255, 271, 291, 296, 303, 317, 320, 414, 457, 472, 549, 657, 682, 684, 685, 692, 758, 796, 845, 860, 879, 885, 892, 909, 1009, 1059, 1150, 1224, 1249, 1251, 1252, 1259, 1295, 1300, 1326], "yy": [10, 51, 53, 167, 187, 264, 317, 822, 909, 915, 1311, 1318, 1325], "yyi": 695, "yyyi": [39, 317], "yz": [51, 53], "z": [39, 58, 79, 127, 161, 194, 215, 217, 222, 251, 252, 281, 284, 285, 317, 326, 328, 330, 479, 507, 549, 574, 576, 578, 580, 581, 589, 603, 604, 605, 648, 656, 658, 670, 682, 685, 715, 717, 735, 760, 762, 765, 771, 775, 780, 796, 839, 866, 868, 875, 909, 914, 915, 1067, 1177, 1178, 1215, 1223, 1225, 1237, 1249, 1252, 1295, 1307, 1311, 1323, 1325], "z_0": [285, 317], "z_1": [285, 317], "zap": 915, "zero": [28, 39, 120, 121, 131, 133, 134, 139, 141, 145, 162, 165, 176, 198, 208, 220, 250, 264, 269, 275, 276, 317, 465, 540, 545, 632, 640, 692, 706, 796, 815, 830, 835, 909, 985, 1067, 1142, 1208, 1259, 1270, 1276, 1277, 1295, 1317, 1323], "zero_copy_onli": [1276, 1295], "zfill": [667, 713, 796, 1234], "zip": 1326, "zip_with": [201, 317, 1295], "zone": [65, 163, 164, 167, 410, 414, 434, 457, 685, 739, 740, 741, 796, 915, 1005, 1009, 1033, 1059, 1252, 1295], "zoneinfo": [65, 915], "zoom": [39, 317], "zstd": [40, 41, 44, 46, 48, 317, 909], "zz": [167, 187, 264, 317, 822, 909, 1311, 1318, 1325], "zzz": 695, "\u03bc": [127, 180, 208, 220, 249, 251, 252, 271, 287, 317, 410, 411, 413, 414, 415, 416, 418, 420, 423, 425, 426, 428, 429, 430, 431, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 610, 613, 615, 617, 619, 621, 624, 626, 628, 682, 685, 739, 740, 741, 742, 748, 796, 814, 835, 858, 909, 915, 1005, 1006, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1020, 1021, 1025, 1027, 1028, 1029, 1030, 1033, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1249, 1252, 1318], "\u0441\u0438\u043d\u0438\u0439": 1318, "\u0967\u096f\u096f\u096f": 915, "\u0968\u0966\u096d\u096d": 915, "\u4eac\u90fd": 915, "\u5927\u962a": 915, "\u6771\u4eac": [664, 665, 915, 1231, 1232], "\u90fd\u5e02": 915, "\ud835\udf0b": 1317}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.json_normalize", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Temporal", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1311, 1324], "IF": 1315, "__array__": [174, 917], "__arrow_c_stream__": [175, 918], "__dataframe__": 176, "__getitem__": [177, 919], "__iter__": 295, "ab": [325, 920, 1317], "aco": 1320, "acosd": 1320, "add": 326, "add_business_dai": [409, 1004], "agg": [296, 885], "agg_group": 327, "aggreg": [173, 324, 810, 916, 1312], "alia": [328, 921], "alias": [1312, 1317, 1318], "align_fram": 50, "all": [297, 329, 345, 503, 714, 886, 922, 937, 1105, 1324], "all_horizont": 715, "and_": 330, "ani": [331, 346, 504, 716, 923, 938, 1106], "any_horizont": 717, "api": [1, 51, 52, 53, 54, 808, 1323], "append": [332, 924], "approx_n_uniqu": [178, 333, 718, 811, 925], "arang": 719, "arcco": [334, 926], "arccosh": [335, 927], "arcsin": [336, 928], "arcsinh": [337, 929], "arctan": [338, 930], "arctan2": 720, "arctan2d": 721, "arctanh": [339, 931], "arg_max": [340, 347, 505, 932, 939, 1107], "arg_min": [341, 348, 506, 933, 940, 1108], "arg_sort": [342, 934], "arg_sort_bi": 722, "arg_tru": [343, 935], "arg_uniqu": [344, 936], "arg_wher": 723, "arr": [345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960], "arrai": [59, 788, 1287, 1313], "array_agg": 1313, "array_contain": 1313, "array_get": 1313, "array_length": 1313, "array_low": 1313, "array_mean": 1313, "array_revers": 1313, "array_sum": 1313, "array_to_str": 1313, "array_uniqu": 1313, "array_upp": 1313, "asin": 1320, "asind": 1320, "assert": 1326, "assert_frame_equ": 156, "assert_frame_not_equ": 157, "assert_series_equ": 158, "assert_series_not_equ": 159, "atan": 1320, "atan2": 1320, "atan2d": 1320, "atand": 1320, "attribut": [312, 904, 1288], "avail": 1, "avg": 1312, "avro": 809, "backward_fil": 369, "base_utc_offset": [410, 1005], "batched_read": 129, "batchedcsvread": 129, "bin": [370, 371, 372, 373, 374, 375, 961, 962, 963, 964, 965, 966], "binari": [60, 789, 802, 1289], "bit_and": 1314, "bit_count": 1314, "bit_length": 1318, "bit_or": 1314, "bit_xor": 1314, "bitwise_and": [376, 967], "bitwise_count_on": [377, 968], "bitwise_count_zero": [378, 969], "bitwise_leading_on": [379, 970], "bitwise_leading_zero": [380, 971], "bitwise_or": [381, 972], "bitwise_trailing_on": [382, 973], "bitwise_trailing_zero": [383, 974], "bitwise_xor": [384, 975], "boolean": [61, 790, 1290], "bottom_k": [179, 385, 812, 976], "bottom_k_bi": 386, "build_info": 55, "business_day_count": 724, "cach": 813, "cancel": 901, "cast": [180, 387, 814, 977, 1321], "cast_time_unit": [411, 1006], "cat": [388, 978, 979, 980, 981], "categor": 62, "categori": [791, 1291], "categoricalremappingwarn": 90, "cbrt": [389, 982, 1317], "ceil": [390, 983, 1317], "centuri": [412, 1007], "chronoformatwarn": 91, "chunk_length": 984, "claus": 1311, "clear": [181, 815, 985], "clip": [391, 986], "clipboard": 809, "clone": [182, 816, 987], "cloud": 809, "co": [392, 988, 1320], "coalesc": [725, 1315], "col": 792, "collect": 817, "collect_al": 56, "collect_all_async": 57, "collect_async": 818, "collect_schema": [183, 819], "column": [160, 161, 184, 793, 820], "columnnotfounderror": 92, "combin": [413, 1008], "comparison": [802, 1299], "comput": [313, 794, 1292], "computeerror": 93, "concat": [58, 507, 646, 1109, 1213, 1318], "concat_list": 726, "concat_str": 727, "concat_w": 1318, "condit": 1315, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 172], "conjunct": 802, "contain": [349, 370, 508, 647, 941, 961, 1110, 1214], "contains_ani": [648, 1215], "context": 172, "convers": 807, "convert_time_zon": [414, 1009], "corr": [185, 728], "cosd": 1320, "cosh": [393, 989], "cot": [394, 990, 1320], "cotd": 1320, "count": [186, 298, 395, 729, 821, 887, 991, 1312], "count_match": [350, 509, 649, 942, 1111, 1216], "cov": 730, "creat": 1325, "create_list_strategi": 162, "credenti": 809, "credentialprovid": 31, "credentialprovideraw": 32, "credentialprovidergcp": 33, "csv": [129, 809], "cum_count": [396, 731, 992], "cum_fold": 732, "cum_max": [397, 993], "cum_min": [398, 994], "cum_prod": [399, 995], "cum_reduc": 733, "cum_sum": [400, 734, 996], "cum_sum_horizont": 735, "cumulative_ev": [401, 997], "customufuncwarn": 94, "cut": [402, 998], "dai": [417, 1012], "data": 322, "databas": 809, "datafram": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 163, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317], "dataorientationwarn": 95, "dataset": 809, "datatyp": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 322], "date": [64, 415, 736, 1010, 1318], "date_part": 1319, "date_rang": [737, 738], "datetim": [65, 416, 739, 1011], "datetime_rang": [740, 741], "decim": 66, "decod": [371, 650, 962, 1217], "decor": 172, "degre": [403, 1320], "delta": 809, "describ": [187, 822, 999], "descript": [314, 905, 1293], "deseri": [188, 404, 823], "diff": [405, 510, 1000, 1112], "disable_string_cach": 87, "distinct": 1311, "div": 1317, "document": 1323, "dot": [406, 1001], "drop": [189, 824, 1325], "drop_in_plac": 190, "drop_nan": [407, 1002], "drop_nul": [191, 408, 511, 825, 1003, 1113], "dst_offset": [418, 1013], "dt": [409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "dtype": [164, 192, 826, 1052], "duplicateerror": 96, "durat": [67, 742], "element": 743, "enable_string_cach": 88, "encod": [372, 651, 963, 1218], "ends_with": [373, 652, 964, 1219, 1318], "engine_config": 884, "entropi": [453, 1053], "enum": 68, "epoch": [419, 1014], "eq": [454, 553, 1054], "eq_miss": [455, 1055], "equal": [193, 1056], "error": 323, "escape_regex": [89, 653, 1220], "estimated_s": [194, 1057], "eval": [512, 1114], "ewm_mean": [456, 1058], "ewm_mean_bi": [457, 1059], "ewm_std": [458, 1060], "ewm_var": [459, 1061], "exampl": [1, 915, 1326], "excel": 809, "except": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 323, 1324], "exclud": [460, 744], "execut": 1304, "execute_glob": 1305, "exp": [461, 1062, 1317], "explain": [827, 1325], "explod": [195, 351, 462, 513, 654, 828, 943, 1063, 1115, 1221], "export": [315, 1294], "expr": [325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713], "express": [796, 1323], "extend": [1, 196, 1064], "extend_const": [463, 1065], "extract": [655, 1222, 1319], "extract_al": [656, 1223], "extract_group": [657, 1224], "extract_mani": [658, 1225], "feather": 809, "fetch": 902, "fetch_block": 903, "field": [693, 1260, 1261], "fill_nan": [197, 464, 829, 1066], "fill_nul": [198, 465, 830, 1067], "filter": [199, 466, 831, 1068], "find": [659, 1226], "first": [299, 352, 467, 514, 745, 832, 888, 944, 1069, 1116, 1312], "flag": [200, 1070], "flatten": 468, "float32": 69, "float64": 70, "floor": [469, 1071, 1317], "floordiv": 470, "fold": [201, 746], "format": 747, "forward_fil": 471, "frame": 1323, "from": 1311, "from_arrow": 120, "from_datafram": 121, "from_dict": [122, 123], "from_epoch": 748, "from_json": 472, "from_numpi": 124, "from_panda": 125, "from_record": 126, "from_repr": 127, "function": [1, 795, 807, 915, 1316], "gather": [473, 515, 1072, 1117], "gather_everi": [202, 474, 516, 833, 1073, 1118], "ge": [475, 1074], "get": [353, 476, 517, 945, 1119], "get_categori": [388, 978], "get_chunk": 1075, "get_column": [203, 205], "get_column_index": 204, "get_index_typ": 128, "glimps": 206, "global": 1323, "gpuengin": [884, 906], "greatest": 1315, "group": [749, 1311], "group_bi": [207, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 834, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900], "group_by_dynam": [208, 835], "groupbi": [295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 907], "gt": [477, 1076], "has_multiple_output": 554, "has_nul": [478, 1077], "has_valid": 1078, "hash": [479, 1079], "hash_row": 209, "have": 1311, "head": [210, 300, 480, 518, 660, 750, 836, 889, 1080, 1120, 1227], "height": 211, "helper": 1326, "hist": [481, 1081], "hour": [420, 1015], "hstack": 212, "iceberg": 809, "ifnul": 1315, "implod": [482, 751, 1082], "import": 915, "in_process": [901, 902, 903], "index": 0, "initcap": 1318, "inprocessqueri": [901, 902, 903, 908], "input": 809, "insert_column": 213, "inspect": [483, 837], "int16": 71, "int32": 72, "int64": 73, "int8": 74, "int_rang": [752, 753], "interfac": 1322, "interpol": [214, 484, 838, 1083], "interpolate_bi": [485, 1084], "intersect": 1324, "introduct": 1323, "invalidoperationerror": 97, "io": 129, "ipc": 809, "is_between": [486, 1085], "is_column": 555, "is_column_select": 556, "is_dupl": [215, 487, 1086], "is_empti": [216, 1087], "is_finit": [488, 1088], "is_first_distinct": [489, 1089], "is_in": [490, 1090], "is_infinit": [491, 1091], "is_last_distinct": [492, 1092], "is_leap_year": [421, 1016], "is_liter": 557, "is_loc": 979, "is_nan": [493, 1093], "is_not_nan": [494, 1094], "is_not_nul": [495, 1095], "is_nul": [496, 1096], "is_regex_project": 558, "is_sort": 1097, "is_uniqu": [217, 497, 1098], "iso_year": [422, 1017], "item": [218, 1099], "iter_column": 219, "iter_row": 220, "iter_slic": 221, "join": [222, 354, 519, 661, 839, 946, 1121, 1228, 1311], "join_asof": [223, 840], "join_wher": [224, 841], "json": 809, "json_decod": [662, 1229], "json_encod": [694, 1262], "json_norm": 130, "json_path_match": [663, 1230], "keep": 573, "kurtosi": [498, 1100], "lake": 809, "last": [301, 355, 499, 520, 754, 842, 890, 947, 1101, 1122, 1312], "lazi": [225, 843], "lazyfram": [45, 46, 47, 48, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 909], "lazygroupbi": [885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900], "le": [500, 1102], "least": 1315, "left": 1318, "len": [302, 501, 521, 755, 891, 1103, 1123], "len_byt": [664, 1231], "len_char": [665, 1232], "length": 1318, "limit": [226, 502, 844, 1104, 1311], "list": [75, 165, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 797, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1296], "lit": 756, "ln": 1317, "load": [2, 172], "load_from_fil": 3, "load_profil": 166, "log": [543, 1145, 1317], "log10": [544, 1146, 1317], "log1p": [545, 1147, 1317], "log2": 1317, "lower": 1318, "lower_bound": [546, 1148], "lt": [547, 1149], "ltrim": 1318, "manag": 172, "manipul": [319, 800, 911, 1298], "map": 574, "map_batch": [548, 757, 845], "map_el": [549, 1150], "map_field": 575, "map_group": [303, 758, 892], "map_row": 227, "mapwithoutreturndtypewarn": 98, "math": 1317, "max": [228, 304, 356, 522, 550, 759, 846, 893, 948, 1018, 1124, 1151, 1312], "max_horizont": [229, 760], "mean": [230, 305, 523, 551, 761, 847, 894, 1019, 1125, 1152], "mean_horizont": [231, 762], "median": [232, 306, 357, 524, 552, 763, 848, 895, 949, 1020, 1126, 1153, 1312], "melt": [233, 849], "merge_sort": [234, 850], "meta": [553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 798], "metadata": 912, "method": 1323, "microsecond": [423, 1021], "millennium": [424, 1022], "millisecond": [425, 1023], "min": [235, 307, 358, 525, 568, 764, 851, 896, 950, 1024, 1127, 1154, 1312], "min_horizont": [236, 765], "minut": [426, 1025], "miscellan": [318, 799, 807, 910, 1297], "mod": [569, 1317], "mode": [570, 1155], "moduleupgraderequirederror": 99, "month": [427, 1026], "month_end": [428, 1027], "month_start": [429, 1028], "mul": 571, "n_chunk": [237, 1156], "n_uniqu": [238, 308, 359, 526, 572, 766, 897, 951, 1128, 1157], "name": [573, 574, 575, 576, 577, 578, 579, 580, 581, 793, 801, 1158, 1324], "nan_max": [582, 1159], "nan_min": [583, 1160], "nanosecond": [430, 1029], "ne": [559, 584, 1161], "ne_miss": [585, 1162], "neg": 586, "nest": 322, "new": 1, "new_from_index": 1163, "next_batch": 129, "nodataerror": 100, "norowsreturnederror": 101, "not_": [587, 1164], "nth": 767, "null": 76, "null_count": [239, 588, 852, 1165], "nullif": 1315, "numer": [322, 802, 1299], "object": 77, "octet_length": 1318, "od": 809, "offset": 1311, "offset_bi": [431, 1030], "ones": 768, "oper": [802, 915, 1299, 1324, 1325], "option": 172, "or_": 589, "order": 1311, "ordinal_dai": [432, 1031], "other": 322, "outofboundserror": 102, "output": 809, "output_nam": 560, "over": 590, "pad_end": [666, 1233], "pad_start": [667, 1234], "panic": 323, "panicexcept": 103, "parallel": 807, "parametercollisionerror": 104, "parametr": [160, 161, 162, 163, 164, 165, 166, 167, 168, 1326], "parquet": 809, "partition_bi": 240, "pct_chang": [591, 1166], "peak_max": [592, 1167], "peak_min": [593, 1168], "performancewarn": 105, "pi": 1317, "pipe": [241, 594, 853], "pivot": 242, "plot": [320, 1300], "plugin": 913, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1326], "polarserror": 106, "polarsinefficientmapwarn": 107, "polarswarn": 108, "pop": 561, "pow": [595, 1169, 1317], "prefix": 576, "prefix_field": 577, "product": [243, 596, 1170], "profil": [854, 1326], "provid": 1, "pyarrow": 809, "python": [808, 1323], "qcut": [597, 1171], "quantil": [244, 309, 598, 769, 855, 898, 1172], "quantile_cont": 1312, "quantile_disc": 1312, "quarter": [433, 1032], "queri": 1323, "radian": [599, 1320], "random": 807, "rank": [600, 1173], "read_avro": 131, "read_clipboard": 132, "read_csv": 133, "read_csv_batch": 134, "read_databas": 135, "read_database_uri": 136, "read_delta": 137, "read_excel": 138, "read_ipc": 139, "read_ipc_schema": 140, "read_ipc_stream": 141, "read_json": 142, "read_ndjson": 143, "read_od": 144, "read_parquet": 145, "read_parquet_schema": 146, "rechunk": [245, 601, 1174], "reduc": 770, "refer": 808, "regexp_lik": 1318, "regist": 1306, "register_dataframe_namespac": 51, "register_expr_namespac": 52, "register_glob": 1307, "register_lazyframe_namespac": 53, "register_mani": 1308, "register_series_namespac": 54, "registr": 1, "reinterpret": [602, 1175], "renam": [246, 856, 1176], "rename_field": [695, 1263], "repeat": 771, "repeat_bi": 603, "replac": [604, 668, 1177, 1235, 1318], "replace_al": [669, 1236], "replace_column": 247, "replace_mani": [670, 1237], "replace_strict": [605, 1178], "replace_time_zon": [434, 1033], "reshap": [606, 1179], "restore_default": 4, "revers": [248, 360, 527, 607, 671, 857, 952, 1129, 1180, 1238, 1318], "right": 1318, "rle": [608, 1181], "rle_id": [609, 1182], "roll": [249, 610, 858], "rolling_corr": 772, "rolling_cov": 773, "rolling_map": [611, 1183], "rolling_max": [612, 1184], "rolling_max_bi": 613, "rolling_mean": [614, 1185], "rolling_mean_bi": 615, "rolling_median": [616, 1186], "rolling_median_bi": 617, "rolling_min": [618, 1187], "rolling_min_bi": 619, "rolling_quantil": [620, 1188], "rolling_quantile_bi": 621, "rolling_skew": [622, 1189], "rolling_std": [623, 1190], "rolling_std_bi": 624, "rolling_sum": [625, 1191], "rolling_sum_bi": 626, "rolling_var": [627, 1192], "rolling_var_bi": 628, "root_nam": 562, "round": [435, 629, 1034, 1193, 1317], "round_sig_fig": [630, 1194], "row": [250, 251], "rows_by_kei": 252, "rowserror": 109, "rtrim": 1318, "sampl": [253, 528, 631, 1130, 1195], "save": [5, 172], "save_to_fil": 6, "scan_csv": 147, "scan_delta": 148, "scan_iceberg": 149, "scan_ipc": 150, "scan_ndjson": 151, "scan_parquet": 152, "scan_pyarrow_dataset": 153, "scatter": 1196, "schema": [254, 859, 914, 1264], "schemaerror": 112, "schemafieldnotfounderror": 113, "search_sort": [632, 1197], "second": [436, 1035], "select": [255, 319, 774, 800, 860, 911, 1298, 1311], "select_seq": [256, 861], "selector": 915, "seri": [167, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1295], "serial": [257, 318, 563, 862, 910], "set": [915, 1198, 1324], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [529, 1131], "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_intersect": [530, 1132], "set_profil": 168, "set_random_se": 154, "set_sort": [258, 633, 863, 1199], "set_streaming_chunk_s": 14, "set_symmetric_differ": [531, 1133], "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_union": [532, 1134], "set_verbos": 29, "shape": [259, 1200], "shapeerror": 114, "shift": [260, 361, 533, 634, 864, 953, 1135, 1201], "show": 1325, "show_graph": [564, 865], "show_vers": 155, "shrink_dtyp": [635, 1202], "shrink_to_fit": [261, 1203], "shuffl": [636, 1204], "sign": [637, 1205, 1317], "sin": [638, 1206, 1320], "sind": 1320, "sinh": [639, 1207], "sink_csv": 45, "sink_ipc": 46, "sink_ndjson": 47, "sink_parquet": 48, "size": [374, 965], "skew": [640, 1208], "slice": [262, 534, 641, 672, 866, 1136, 1209, 1239], "sort": [263, 362, 535, 642, 867, 954, 1137, 1210], "sort_bi": 643, "split": [673, 1240], "split_exact": [674, 1241], "splitn": [675, 1242], "sql": [264, 775, 868, 1311, 1316, 1322, 1323], "sql_expr": 776, "sqlcontext": [1304, 1305, 1306, 1307, 1308, 1309, 1310, 1323], "sqlinterfaceerror": 110, "sqlsyntaxerror": 111, "sqrt": [644, 1211, 1317], "starts_with": [375, 676, 966, 1243, 1318], "state": [30, 172], "std": [265, 363, 536, 645, 777, 869, 955, 1138, 1212], "stddev": 1312, "str": [646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259], "strategi": 1326, "strftime": [437, 1036, 1319], "string": [78, 322, 803, 1301, 1318], "stringcach": [49, 807], "stringcachemismatcherror": 115, "strip_char": [677, 1244], "strip_chars_end": [678, 1245], "strip_chars_start": [679, 1246], "strip_prefix": [680, 1247], "strip_suffix": [681, 1248], "strpo": 1318, "strptime": [682, 1249, 1318], "struct": [79, 693, 694, 695, 696, 697, 778, 804, 1260, 1261, 1262, 1263, 1264, 1265, 1302], "structfieldnotfounderror": 116, "style": 321, "sub": 698, "substr": 1318, "suffix": 578, "suffix_field": 579, "sum": [266, 310, 364, 537, 699, 779, 870, 899, 956, 1139, 1266, 1312], "sum_horizont": [267, 780], "tabl": [1309, 1325], "tail": [268, 311, 538, 683, 700, 781, 871, 900, 1140, 1250, 1267], "tan": [701, 1268, 1320], "tand": 1320, "tanh": [702, 1269], "tempor": [322, 805, 1303, 1314, 1319], "test": [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 1326], "thread_pool_s": 169, "threadpool_s": 170, "time": [80, 438, 782, 1037], "time_rang": [783, 784], "timestamp": [439, 1038, 1318], "to_arrai": [539, 1141], "to_arrow": [269, 1270], "to_dat": [684, 1251], "to_datetim": [685, 1252], "to_decim": [686, 1253], "to_dict": [270, 271], "to_dummi": [272, 1271], "to_fram": 1272, "to_init_repr": [273, 1273], "to_integ": [687, 1254], "to_jax": [274, 1274], "to_list": [365, 957, 1275], "to_loc": 980, "to_lowercas": [580, 688, 1255], "to_numpi": [275, 1276], "to_panda": [276, 1277], "to_phys": [703, 1278], "to_seri": 277, "to_str": [440, 1039], "to_struct": [278, 366, 540, 958, 1142], "to_tim": [689, 1256], "to_titlecas": [690, 1257], "to_torch": [279, 1279], "to_uppercas": [581, 691, 1258], "toomanyrowsreturnederror": 117, "top_k": [280, 704, 872, 1280], "top_k_bi": 705, "total_dai": [441, 1040], "total_hour": [442, 1041], "total_microsecond": [443, 1042], "total_millisecond": [444, 1043], "total_minut": [445, 1044], "total_nanosecond": [446, 1045], "total_second": [447, 1046], "transpos": 281, "tree_format": 565, "trigonometri": 1320, "truediv": 706, "truncat": [448, 1047, 1325], "try_cast": 1321, "type": [322, 1321], "uint16": 81, "uint32": 82, "uint64": 83, "uint8": 84, "undo_alias": 566, "union": 1324, "uniqu": [282, 367, 541, 707, 873, 959, 1143, 1281], "unique_count": [708, 1282], "unknown": 85, "unnest": [283, 696, 874, 1265, 1313, 1325], "unpivot": [284, 875], "unregist": 1310, "unstablewarn": 118, "unstack": 285, "unsuitablesqlerror": 119, "updat": [286, 876], "upper": 1318, "upper_bound": [709, 1283], "upsampl": 287, "us": 172, "uses_lexical_ord": 981, "using_string_cach": 171, "utf8": 86, "value_count": [710, 1284], "var": [288, 368, 542, 711, 785, 877, 960, 1144, 1285], "varianc": 1312, "vstack": 289, "warn": 323, "week": [449, 1048], "weekdai": [450, 1049], "when": 786, "where": [712, 1311], "width": [290, 878], "window": 806, "with_column": [291, 879], "with_columns_seq": [292, 880], "with_context": 881, "with_field": 697, "with_row_count": [293, 882], "with_row_index": [294, 883], "with_time_unit": [451, 1050], "write_avro": 34, "write_clipboard": 35, "write_csv": 36, "write_databas": 37, "write_delta": 38, "write_excel": 39, "write_ipc": 40, "write_ipc_stream": 41, "write_json": [42, 567], "write_ndjson": 43, "write_parquet": 44, "xor": 713, "year": [452, 1051], "zero": 787, "zfill": [692, 1259], "zip_with": 1286}})